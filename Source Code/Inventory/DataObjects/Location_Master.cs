///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'Location_Master'
// Generated by LLBLGen v1.2.2690.36218 Final on: Monday, May 14, 2007, 8:07:34 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace Inventory.DataObjects
{
	/// <summary>
	/// Purpose: Data Access class for the table 'Location_Master'.
	/// </summary>
	public class Location_Master : DBInteractionBase
	{
		#region Class Member Declarations
			protected SqlDateTime		m_daDate_Last_Picked, m_daDate_last_unpack, m_daReserved_Date;
            protected SqlInt32 m_iQty_allocated, m_iQty_unpack, m_iQty_on_hand, m_iSequence;
            protected SqlString m_sBin_location_id, m_sUserID, m_sWarehouse_id;
            protected SqlBinary m_biTimeStamp;
            protected SqlString m_sPackage_Code, m_sReserved_code, m_sProduct_id;
		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public Location_Master()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>Warehouse_id</LI>
		///		 <LI>Bin_location_id</LI>
		///		 <LI>Sequence</LI>
		///		 <LI>Product_id. May be SqlString.Null</LI>
		///		 <LI>Package_Code. May be SqlString.Null</LI>
		///		 <LI>Qty_on_hand. May be SqlInt32.Null</LI>
		///		 <LI>Qty_allocated. May be SqlInt32.Null</LI>
		///		 <LI>Date_last_unpack. May be SqlDateTime.Null</LI>
		///		 <LI>Date_Last_Picked. May be SqlDateTime.Null</LI>
		///		 <LI>Reserved_code. May be SqlString.Null</LI>
		///		 <LI>Reserved_Date. May be SqlDateTime.Null</LI>
		///		 <LI>Qty_unpack. May be SqlInt32.Null</LI>
		///		 <LI>UserID. May be SqlString.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Insert(SqlCommand scmCmdToExecute)
		{
			scmCmdToExecute.Parameters.Clear();
			scmCmdToExecute.CommandText = "dbo.[pr_Location_Master_Insert]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sWarehouse_id", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sWarehouse_id));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sBin_location_id", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sBin_location_id));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iSequence", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iSequence));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sProduct_id", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sProduct_id));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sPackage_Code", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sPackage_Code));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iQty_on_hand", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iQty_on_hand));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iQty_allocated", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iQty_allocated));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@daDate_last_unpack", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daDate_last_unpack));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@daDate_Last_Picked", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daDate_Last_Picked));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sReserved_code", SqlDbType.NVarChar, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sReserved_code));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@daReserved_Date", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daReserved_Date));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iQty_unpack", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iQty_unpack));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sUserID", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sUserID));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_Location_Master_Insert' reported the ErrorCode: " + m_iErrorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("Location_Master::Insert::Error occured.", ex);
			}
			finally
			{
			}
		}


		/// <summary>
		/// Purpose: Update method. This method will Update one existing row in the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>Warehouse_id</LI>
		///		 <LI>Bin_location_id</LI>
		///		 <LI>Sequence</LI>
		///		 <LI>Product_id. May be SqlString.Null</LI>
		///		 <LI>Package_Code. May be SqlString.Null</LI>
		///		 <LI>Qty_on_hand. May be SqlInt32.Null</LI>
		///		 <LI>Qty_allocated. May be SqlInt32.Null</LI>
		///		 <LI>Date_last_unpack. May be SqlDateTime.Null</LI>
		///		 <LI>Date_Last_Picked. May be SqlDateTime.Null</LI>
		///		 <LI>Reserved_code. May be SqlString.Null</LI>
		///		 <LI>Reserved_Date. May be SqlDateTime.Null</LI>
		///		 <LI>Qty_unpack. May be SqlInt32.Null</LI>
		///		 <LI>UserID. May be SqlString.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Update(SqlCommand scmCmdToExecute)
		{
			scmCmdToExecute.Parameters.Clear();
			scmCmdToExecute.CommandText = "dbo.[pr_Location_Master_Update]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sWarehouse_id", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sWarehouse_id));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sBin_location_id", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sBin_location_id));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iSequence", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iSequence));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sProduct_id", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sProduct_id));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sPackage_Code", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sPackage_Code));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iQty_on_hand", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iQty_on_hand));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iQty_allocated", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iQty_allocated));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@daDate_last_unpack", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daDate_last_unpack));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@daDate_Last_Picked", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daDate_Last_Picked));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sReserved_code", SqlDbType.NVarChar, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sReserved_code));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@daReserved_Date", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daReserved_Date));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iQty_unpack", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iQty_unpack));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sUserID", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sUserID));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_Location_Master_Update' reported the ErrorCode: " + m_iErrorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("Location_Master::Update::Error occured.", ex);
			}

			finally
			{
			}

		}


		/// <summary>
		/// Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>Warehouse_id</LI>
		///		 <LI>Bin_location_id</LI>
		///		 <LI>Sequence</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Delete(SqlCommand scmCmdToExecute)
		{
			scmCmdToExecute.Parameters.Clear();
			scmCmdToExecute.CommandText = "dbo.[pr_Location_Master_Delete]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sWarehouse_id", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sWarehouse_id));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sBin_location_id", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sBin_location_id));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iSequence", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iSequence));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_Location_Master_Delete' reported the ErrorCode: " + m_iErrorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("Location_Master::Delete::Error occured.", ex);
			}
			finally
			{
			}
		}


		/// <summary>
		/// Purpose: Delete method using PK field 'Warehouse_id'. This method will 
		/// delete one or more rows from the database, based on the Primary Key field 'Warehouse_id'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>Warehouse_id</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteWWarehouse_idLogic()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_Location_Master_DeleteWWarehouse_idLogic]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sWarehouse_id", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sWarehouse_id));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 36, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_Location_Master_DeleteWWarehouse_idLogic' reported the ErrorCode: " + m_iErrorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("Location_Master::DeleteWWarehouse_idLogic::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method using PK field 'Bin_location_id'. This method will 
		/// delete one or more rows from the database, based on the Primary Key field 'Bin_location_id'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>Bin_location_id</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteWBin_location_idLogic()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_Location_Master_DeleteWBin_location_idLogic]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sBin_location_id", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sBin_location_id));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 36, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_Location_Master_DeleteWBin_location_idLogic' reported the ErrorCode: " + m_iErrorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("Location_Master::DeleteWBin_location_idLogic::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method using PK field 'Sequence'. This method will 
		/// delete one or more rows from the database, based on the Primary Key field 'Sequence'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>Sequence</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteWSequenceLogic()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_Location_Master_DeleteWSequenceLogic]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iSequence", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iSequence));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_Location_Master_DeleteWSequenceLogic' reported the ErrorCode: " + m_iErrorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("Location_Master::DeleteWSequenceLogic::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>Warehouse_id</LI>
		///		 <LI>Bin_location_id</LI>
		///		 <LI>Sequence</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		///		 <LI>Warehouse_id</LI>
		///		 <LI>Bin_location_id</LI>
		///		 <LI>Sequence</LI>
		///		 <LI>Product_id</LI>
		///		 <LI>Package_Code</LI>
		///		 <LI>Qty_on_hand</LI>
		///		 <LI>Qty_allocated</LI>
		///		 <LI>Date_last_unpack</LI>
		///		 <LI>Date_Last_Picked</LI>
		///		 <LI>Reserved_code</LI>
		///		 <LI>Reserved_Date</LI>
		///		 <LI>Qty_unpack</LI>
		///		 <LI>UserID</LI>
		///		 <LI>TimeStamp</LI>
		/// </UL>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public override DataTable SelectOne()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_Location_Master_SelectOne]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable dtToReturn = new DataTable("Location_Master");
			SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sWarehouse_id", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sWarehouse_id));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sBin_location_id", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sBin_location_id));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iSequence", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iSequence));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				sdaAdapter.Fill(dtToReturn);
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_Location_Master_SelectOne' reported the ErrorCode: " + m_iErrorCode);
				}

				if(dtToReturn.Rows.Count > 0)
				{
					m_sWarehouse_id = (string)dtToReturn.Rows[0]["Warehouse_id"];
					m_sBin_location_id = (string)dtToReturn.Rows[0]["Bin_location_id"];
					m_iSequence = (Int32)dtToReturn.Rows[0]["Sequence"];
					m_sProduct_id = dtToReturn.Rows[0]["Product_id"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["Product_id"];
					m_sPackage_Code = dtToReturn.Rows[0]["Package Code"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["Package Code"];
					m_iQty_on_hand = dtToReturn.Rows[0]["Qty_on_hand"] == System.DBNull.Value ? SqlInt32.Null : (Int32)dtToReturn.Rows[0]["Qty_on_hand"];
					m_iQty_allocated = dtToReturn.Rows[0]["Qty_allocated"] == System.DBNull.Value ? SqlInt32.Null : (Int32)dtToReturn.Rows[0]["Qty_allocated"];
					m_daDate_last_unpack = dtToReturn.Rows[0]["Date_last_unpack"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)dtToReturn.Rows[0]["Date_last_unpack"];
					m_daDate_Last_Picked = dtToReturn.Rows[0]["Date_Last_Picked"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)dtToReturn.Rows[0]["Date_Last_Picked"];
					m_sReserved_code = dtToReturn.Rows[0]["Reserved_code"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["Reserved_code"];
					m_daReserved_Date = dtToReturn.Rows[0]["Reserved_Date"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)dtToReturn.Rows[0]["Reserved_Date"];
					m_iQty_unpack = dtToReturn.Rows[0]["Qty_unpack"] == System.DBNull.Value ? SqlInt32.Null : (Int32)dtToReturn.Rows[0]["Qty_unpack"];
					m_sUserID = dtToReturn.Rows[0]["UserID"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["UserID"];
					m_biTimeStamp = dtToReturn.Rows[0]["TimeStamp"] == System.DBNull.Value ? SqlBinary.Null : (byte[])dtToReturn.Rows[0]["TimeStamp"];
				}
				return dtToReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("Location_Master::SelectOne::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
				sdaAdapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override DataTable SelectAll()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_Location_Master_SelectAll]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable dtToReturn = new DataTable("Location_Master");
			SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				sdaAdapter.Fill(dtToReturn);
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_Location_Master_SelectAll' reported the ErrorCode: " + m_iErrorCode);
				}

				return dtToReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("Location_Master::SelectAll::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
				sdaAdapter.Dispose();
			}
		}


		#region Class Property Declarations
		public SqlString Warehouse_id
		{
			get
			{
				return m_sWarehouse_id;
			}
			set
			{
				SqlString sWarehouse_idTmp = (SqlString)value;
				if(sWarehouse_idTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("warehouse_id", "warehouse_id can't be NULL");
				}
				m_sWarehouse_id = value;
			}
		}


		public SqlString Bin_location_id
		{
			get
			{
				return m_sBin_location_id;
			}
			set
			{
				m_sBin_location_id = value;
			}
		}


		public SqlInt32 Sequence
		{
			get
			{
				return m_iSequence;
			}
			set
			{
				SqlInt32 iSequenceTmp = (SqlInt32)value;
				if(iSequenceTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("sequence", "sequence can't be NULL");
				}
				m_iSequence = value;
			}
		}


		public SqlString Product_id
		{
			get
			{
				return m_sProduct_id;
			}
			set
			{
				m_sProduct_id = value;
			}
		}


		public SqlString Package_Code
		{
			get
			{
				return m_sPackage_Code;
			}
			set
			{
				m_sPackage_Code = value;
			}
		}


		public SqlInt32 Qty_on_hand
		{
			get
			{
				return m_iQty_on_hand;
			}
			set
			{
				m_iQty_on_hand = value;
			}
		}


		public SqlInt32 Qty_allocated
		{
			get
			{
				return m_iQty_allocated;
			}
			set
			{
				m_iQty_allocated = value;
			}
		}


		public SqlDateTime Date_last_unpack
		{
			get
			{
				return m_daDate_last_unpack;
			}
			set
			{
				m_daDate_last_unpack = value;
			}
		}


		public SqlDateTime Date_Last_Picked
		{
			get
			{
				return m_daDate_Last_Picked;
			}
			set
			{
				m_daDate_Last_Picked = value;
			}
		}


		public SqlString Reserved_code
		{
			get
			{
				return m_sReserved_code;
			}
			set
			{
				m_sReserved_code = value;
			}
		}


		public SqlDateTime Reserved_Date
		{
			get
			{
				return m_daReserved_Date;
			}
			set
			{
				m_daReserved_Date = value;
			}
		}


		public SqlInt32 Qty_unpack
		{
			get
			{
				return m_iQty_unpack;
			}
			set
			{
				m_iQty_unpack = value;
			}
		}


		public SqlString UserID
		{
			get
			{
				return m_sUserID;
			}
			set
			{
				m_sUserID = value;
			}
		}


		public SqlBinary TimeStamp
		{
			get
			{
				return m_biTimeStamp;
			}
			set
			{
				m_biTimeStamp = value;
			}
		}
		#endregion
	}
}
