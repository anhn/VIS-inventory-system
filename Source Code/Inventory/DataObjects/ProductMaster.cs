///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'ProductMaster'
// Generated by LLBLGen v1.2.2710.28204 Final on: Sunday, June 03, 2007, 4:01:01 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace Inventory.DataObjects
{
	/// <summary>
	/// Purpose: Data Access class for the table 'ProductMaster'.
	/// </summary>
	public class ProductMaster : DBInteractionBase
	{
		#region Class Member Declarations
			private SqlBoolean		m_bViewStatus, m_bShowOnWeb;
			private SqlString		m_sCurrencyID;
			private SqlDateTime		m_daExpiredDate;
			private SqlDecimal		m_dcLeadTimeMin, m_dcPhysicalStockLevel, m_dcSafetyLevel, m_dcBookedQty, m_dcQty, m_dcLeadTimeMax, m_dcReorderLevel, m_dcMaxLevel, m_dcMiniLevel;
			private SqlInt32		m_iSafetyStockFactor;
			private SqlMoney		m_curCostDiscount1, m_curCostDiscount2, m_curPriceDiscount3, m_curPriceDiscount2, m_curBasePrice, m_curHoldingCost, m_curPrice2, m_curPrice1, m_curPriceDiscount1, m_curPrice3, m_curCost1, m_curCost2;
			private SqlString		m_sReservedField5, m_sCategoryID, m_sCategoryIDOld, m_sReservedField4, m_sReservedField2, m_sReservedField3, m_sFamilyID, m_sFamilyIDOld, m_sProductName, m_sProductID, m_sAlternativeID, m_sBarcodeID, m_sUserID, m_sReservedField1;
			private SqlBinary		m_biTimestamp;
			private SqlString		m_sSupplierID, m_sDescription, m_sUOMID, m_sUOMIDOld, m_sInvID, m_sPOSID, m_sLocation_id, m_sRemarks1, m_sRemarks2, m_sSubCategoryID, m_sSubCategoryIDOld, m_sTaxID1, m_sTaxID2;
		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public ProductMaster()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ProductID</LI>
		///		 <LI>ProductName. May be SqlString.Null</LI>
		///		 <LI>AlternativeID. May be SqlString.Null</LI>
		///		 <LI>BarcodeID. May be SqlString.Null</LI>
		///		 <LI>FamilyID. May be SqlString.Null</LI>
		///		 <LI>CategoryID. May be SqlString.Null</LI>
		///		 <LI>SubCategoryID. May be SqlString.Null</LI>
		///		 <LI>Description. May be SqlString.Null</LI>
		///		 <LI>SupplierID. May be SqlString.Null</LI>
		///		 <LI>POSID. May be SqlString.Null</LI>
		///		 <LI>InvID. May be SqlString.Null</LI>
		///		 <LI>UOMID. May be SqlString.Null</LI>
		///		 <LI>LeadTimeMin. May be SqlDecimal.Null</LI>
		///		 <LI>LeadTimeMax. May be SqlDecimal.Null</LI>
		///		 <LI>Qty. May be SqlDecimal.Null</LI>
		///		 <LI>BookedQty. May be SqlDecimal.Null</LI>
		///		 <LI>PhysicalStockLevel. May be SqlDecimal.Null</LI>
		///		 <LI>SafetyLevel. May be SqlDecimal.Null</LI>
		///		 <LI>MiniLevel. May be SqlDecimal.Null</LI>
		///		 <LI>MaxLevel. May be SqlDecimal.Null</LI>
		///		 <LI>ReorderLevel. May be SqlDecimal.Null</LI>
		///		 <LI>CurrencyID. May be SqlString.Null</LI>
		///		 <LI>Cost1. May be SqlMoney.Null</LI>
		///		 <LI>Cost2. May be SqlMoney.Null</LI>
		///		 <LI>CostDiscount1. May be SqlMoney.Null</LI>
		///		 <LI>CostDiscount2. May be SqlMoney.Null</LI>
		///		 <LI>Price1. May be SqlMoney.Null</LI>
		///		 <LI>Price2. May be SqlMoney.Null</LI>
		///		 <LI>Price3. May be SqlMoney.Null</LI>
		///		 <LI>PriceDiscount1. May be SqlMoney.Null</LI>
		///		 <LI>PriceDiscount2. May be SqlMoney.Null</LI>
		///		 <LI>PriceDiscount3. May be SqlMoney.Null</LI>
		///		 <LI>TaxID1. May be SqlString.Null</LI>
		///		 <LI>TaxID2. May be SqlString.Null</LI>
		///		 <LI>Location_id. May be SqlString.Null</LI>
		///		 <LI>Remarks1. May be SqlString.Null</LI>
		///		 <LI>Remarks2. May be SqlString.Null</LI>
		///		 <LI>ReservedField1. May be SqlString.Null</LI>
		///		 <LI>ReservedField2. May be SqlString.Null</LI>
		///		 <LI>ReservedField3. May be SqlString.Null</LI>
		///		 <LI>ReservedField4. May be SqlString.Null</LI>
		///		 <LI>ReservedField5. May be SqlString.Null</LI>
		///		 <LI>ExpiredDate. May be SqlDateTime.Null</LI>
		///		 <LI>ShowOnWeb. May be SqlBoolean.Null</LI>
		///		 <LI>ViewStatus. May be SqlBoolean.Null</LI>
		///		 <LI>UserID. May be SqlString.Null</LI>
		///		 <LI>SafetyStockFactor. May be SqlInt32.Null</LI>
		///		 <LI>HoldingCost. May be SqlMoney.Null</LI>
		///		 <LI>BasePrice. May be SqlMoney.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Insert(SqlCommand scmCmdToExecute)
		{
			scmCmdToExecute.Parameters.Clear();
			scmCmdToExecute.CommandText = "dbo.[pr_ProductMaster_Insert]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sProductID", SqlDbType.NChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sProductID));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sProductName", SqlDbType.NVarChar, -1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sProductName));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sAlternativeID", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sAlternativeID));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sBarcodeID", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sBarcodeID));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sFamilyID", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sFamilyID));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sCategoryID", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sCategoryID));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sSubCategoryID", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sSubCategoryID));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sDescription", SqlDbType.NVarChar, -1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sDescription));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sSupplierID", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sSupplierID));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sPOSID", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sPOSID));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sInvID", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sInvID));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sUOMID", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sUOMID));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@dcLeadTimeMin", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 2, "", DataRowVersion.Proposed, m_dcLeadTimeMin));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@dcLeadTimeMax", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 2, "", DataRowVersion.Proposed, m_dcLeadTimeMax));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@dcQty", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 2, "", DataRowVersion.Proposed, m_dcQty));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@dcBookedQty", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 2, "", DataRowVersion.Proposed, m_dcBookedQty));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@dcPhysicalStockLevel", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 2, "", DataRowVersion.Proposed, m_dcPhysicalStockLevel));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@dcSafetyLevel", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 2, "", DataRowVersion.Proposed, m_dcSafetyLevel));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@dcMiniLevel", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 2, "", DataRowVersion.Proposed, m_dcMiniLevel));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@dcMaxLevel", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 2, "", DataRowVersion.Proposed, m_dcMaxLevel));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@dcReorderLevel", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 2, "", DataRowVersion.Proposed, m_dcReorderLevel));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sCurrencyID", SqlDbType.Char, 3, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sCurrencyID));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@curCost1", SqlDbType.Money, 8, ParameterDirection.Input, false, 19, 4, "", DataRowVersion.Proposed, m_curCost1));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@curCost2", SqlDbType.Money, 8, ParameterDirection.Input, false, 19, 4, "", DataRowVersion.Proposed, m_curCost2));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@curCostDiscount1", SqlDbType.Money, 8, ParameterDirection.Input, false, 19, 4, "", DataRowVersion.Proposed, m_curCostDiscount1));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@curCostDiscount2", SqlDbType.Money, 8, ParameterDirection.Input, false, 19, 4, "", DataRowVersion.Proposed, m_curCostDiscount2));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@curPrice1", SqlDbType.Money, 8, ParameterDirection.Input, false, 19, 4, "", DataRowVersion.Proposed, m_curPrice1));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@curPrice2", SqlDbType.Money, 8, ParameterDirection.Input, false, 19, 4, "", DataRowVersion.Proposed, m_curPrice2));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@curPrice3", SqlDbType.Money, 8, ParameterDirection.Input, false, 19, 4, "", DataRowVersion.Proposed, m_curPrice3));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@curPriceDiscount1", SqlDbType.Money, 8, ParameterDirection.Input, false, 19, 4, "", DataRowVersion.Proposed, m_curPriceDiscount1));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@curPriceDiscount2", SqlDbType.Money, 8, ParameterDirection.Input, false, 19, 4, "", DataRowVersion.Proposed, m_curPriceDiscount2));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@curPriceDiscount3", SqlDbType.Money, 8, ParameterDirection.Input, false, 19, 4, "", DataRowVersion.Proposed, m_curPriceDiscount3));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sTaxID1", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sTaxID1));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sTaxID2", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sTaxID2));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sLocation_id", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sLocation_id));
				int	iLength = 0;
				if(!m_sRemarks1.IsNull)
				{
					iLength = m_sRemarks1.Value.Length;
				}
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sRemarks1", SqlDbType.NText, iLength, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sRemarks1));
				iLength = 0;
				if(!m_sRemarks2.IsNull)
				{
					iLength = m_sRemarks2.Value.Length;
				}
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sRemarks2", SqlDbType.NText, iLength, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sRemarks2));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sReservedField1", SqlDbType.VarChar, -1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sReservedField1));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sReservedField2", SqlDbType.VarChar, -1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sReservedField2));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sReservedField3", SqlDbType.VarChar, -1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sReservedField3));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sReservedField4", SqlDbType.VarChar, -1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sReservedField4));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sReservedField5", SqlDbType.VarChar, -1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sReservedField5));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@daExpiredDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daExpiredDate));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@bShowOnWeb", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bShowOnWeb));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@bViewStatus", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bViewStatus));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sUserID", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sUserID));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iSafetyStockFactor", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iSafetyStockFactor));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@curHoldingCost", SqlDbType.Money, 8, ParameterDirection.Input, false, 19, 4, "", DataRowVersion.Proposed, m_curHoldingCost));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@curBasePrice", SqlDbType.Money, 8, ParameterDirection.Input, false, 19, 4, "", DataRowVersion.Proposed, m_curBasePrice));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_ProductMaster_Insert' reported the ErrorCode: " + m_iErrorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("ProductMaster::Insert::Error occured.", ex);
			}
			finally
			{
			}
		}


		/// <summary>
		/// Purpose: Update method. This method will Update one existing row in the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ProductID</LI>
		///		 <LI>ProductName. May be SqlString.Null</LI>
		///		 <LI>AlternativeID. May be SqlString.Null</LI>
		///		 <LI>BarcodeID. May be SqlString.Null</LI>
		///		 <LI>FamilyID. May be SqlString.Null</LI>
		///		 <LI>CategoryID. May be SqlString.Null</LI>
		///		 <LI>SubCategoryID. May be SqlString.Null</LI>
		///		 <LI>Description. May be SqlString.Null</LI>
		///		 <LI>SupplierID. May be SqlString.Null</LI>
		///		 <LI>POSID. May be SqlString.Null</LI>
		///		 <LI>InvID. May be SqlString.Null</LI>
		///		 <LI>UOMID. May be SqlString.Null</LI>
		///		 <LI>LeadTimeMin. May be SqlDecimal.Null</LI>
		///		 <LI>LeadTimeMax. May be SqlDecimal.Null</LI>
		///		 <LI>Qty. May be SqlDecimal.Null</LI>
		///		 <LI>BookedQty. May be SqlDecimal.Null</LI>
		///		 <LI>PhysicalStockLevel. May be SqlDecimal.Null</LI>
		///		 <LI>SafetyLevel. May be SqlDecimal.Null</LI>
		///		 <LI>MiniLevel. May be SqlDecimal.Null</LI>
		///		 <LI>MaxLevel. May be SqlDecimal.Null</LI>
		///		 <LI>ReorderLevel. May be SqlDecimal.Null</LI>
		///		 <LI>CurrencyID. May be SqlString.Null</LI>
		///		 <LI>Cost1. May be SqlMoney.Null</LI>
		///		 <LI>Cost2. May be SqlMoney.Null</LI>
		///		 <LI>CostDiscount1. May be SqlMoney.Null</LI>
		///		 <LI>CostDiscount2. May be SqlMoney.Null</LI>
		///		 <LI>Price1. May be SqlMoney.Null</LI>
		///		 <LI>Price2. May be SqlMoney.Null</LI>
		///		 <LI>Price3. May be SqlMoney.Null</LI>
		///		 <LI>PriceDiscount1. May be SqlMoney.Null</LI>
		///		 <LI>PriceDiscount2. May be SqlMoney.Null</LI>
		///		 <LI>PriceDiscount3. May be SqlMoney.Null</LI>
		///		 <LI>TaxID1. May be SqlString.Null</LI>
		///		 <LI>TaxID2. May be SqlString.Null</LI>
		///		 <LI>Location_id. May be SqlString.Null</LI>
		///		 <LI>Remarks1. May be SqlString.Null</LI>
		///		 <LI>Remarks2. May be SqlString.Null</LI>
		///		 <LI>ReservedField1. May be SqlString.Null</LI>
		///		 <LI>ReservedField2. May be SqlString.Null</LI>
		///		 <LI>ReservedField3. May be SqlString.Null</LI>
		///		 <LI>ReservedField4. May be SqlString.Null</LI>
		///		 <LI>ReservedField5. May be SqlString.Null</LI>
		///		 <LI>ExpiredDate. May be SqlDateTime.Null</LI>
		///		 <LI>ShowOnWeb. May be SqlBoolean.Null</LI>
		///		 <LI>ViewStatus. May be SqlBoolean.Null</LI>
		///		 <LI>UserID. May be SqlString.Null</LI>
		///		 <LI>SafetyStockFactor. May be SqlInt32.Null</LI>
		///		 <LI>HoldingCost. May be SqlMoney.Null</LI>
		///		 <LI>BasePrice. May be SqlMoney.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Update(SqlCommand scmCmdToExecute)
		{
			scmCmdToExecute.Parameters.Clear();
			scmCmdToExecute.CommandText = "dbo.[pr_ProductMaster_Update]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sProductID", SqlDbType.NChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sProductID));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sProductName", SqlDbType.NVarChar, -1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sProductName));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sAlternativeID", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sAlternativeID));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sBarcodeID", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sBarcodeID));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sFamilyID", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sFamilyID));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sCategoryID", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sCategoryID));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sSubCategoryID", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sSubCategoryID));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sDescription", SqlDbType.NVarChar, -1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sDescription));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sSupplierID", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sSupplierID));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sPOSID", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sPOSID));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sInvID", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sInvID));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sUOMID", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sUOMID));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@dcLeadTimeMin", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 2, "", DataRowVersion.Proposed, m_dcLeadTimeMin));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@dcLeadTimeMax", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 2, "", DataRowVersion.Proposed, m_dcLeadTimeMax));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@dcQty", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 2, "", DataRowVersion.Proposed, m_dcQty));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@dcBookedQty", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 2, "", DataRowVersion.Proposed, m_dcBookedQty));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@dcPhysicalStockLevel", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 2, "", DataRowVersion.Proposed, m_dcPhysicalStockLevel));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@dcSafetyLevel", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 2, "", DataRowVersion.Proposed, m_dcSafetyLevel));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@dcMiniLevel", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 2, "", DataRowVersion.Proposed, m_dcMiniLevel));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@dcMaxLevel", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 2, "", DataRowVersion.Proposed, m_dcMaxLevel));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@dcReorderLevel", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 2, "", DataRowVersion.Proposed, m_dcReorderLevel));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sCurrencyID", SqlDbType.Char, 3, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sCurrencyID));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@curCost1", SqlDbType.Money, 8, ParameterDirection.Input, false, 19, 4, "", DataRowVersion.Proposed, m_curCost1));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@curCost2", SqlDbType.Money, 8, ParameterDirection.Input, false, 19, 4, "", DataRowVersion.Proposed, m_curCost2));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@curCostDiscount1", SqlDbType.Money, 8, ParameterDirection.Input, false, 19, 4, "", DataRowVersion.Proposed, m_curCostDiscount1));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@curCostDiscount2", SqlDbType.Money, 8, ParameterDirection.Input, false, 19, 4, "", DataRowVersion.Proposed, m_curCostDiscount2));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@curPrice1", SqlDbType.Money, 8, ParameterDirection.Input, false, 19, 4, "", DataRowVersion.Proposed, m_curPrice1));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@curPrice2", SqlDbType.Money, 8, ParameterDirection.Input, false, 19, 4, "", DataRowVersion.Proposed, m_curPrice2));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@curPrice3", SqlDbType.Money, 8, ParameterDirection.Input, false, 19, 4, "", DataRowVersion.Proposed, m_curPrice3));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@curPriceDiscount1", SqlDbType.Money, 8, ParameterDirection.Input, false, 19, 4, "", DataRowVersion.Proposed, m_curPriceDiscount1));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@curPriceDiscount2", SqlDbType.Money, 8, ParameterDirection.Input, false, 19, 4, "", DataRowVersion.Proposed, m_curPriceDiscount2));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@curPriceDiscount3", SqlDbType.Money, 8, ParameterDirection.Input, false, 19, 4, "", DataRowVersion.Proposed, m_curPriceDiscount3));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sTaxID1", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sTaxID1));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sTaxID2", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sTaxID2));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sLocation_id", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sLocation_id));
				int	iLength = 0;
				if(!m_sRemarks1.IsNull)
				{
					iLength = m_sRemarks1.Value.Length;
				}
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sRemarks1", SqlDbType.NText, iLength, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sRemarks1));
				iLength = 0;
				if(!m_sRemarks2.IsNull)
				{
					iLength = m_sRemarks2.Value.Length;
				}
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sRemarks2", SqlDbType.NText, iLength, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sRemarks2));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sReservedField1", SqlDbType.VarChar, -1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sReservedField1));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sReservedField2", SqlDbType.VarChar, -1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sReservedField2));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sReservedField3", SqlDbType.VarChar, -1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sReservedField3));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sReservedField4", SqlDbType.VarChar, -1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sReservedField4));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sReservedField5", SqlDbType.VarChar, -1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sReservedField5));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@daExpiredDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daExpiredDate));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@bShowOnWeb", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bShowOnWeb));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@bViewStatus", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bViewStatus));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sUserID", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sUserID));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iSafetyStockFactor", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iSafetyStockFactor));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@curHoldingCost", SqlDbType.Money, 8, ParameterDirection.Input, false, 19, 4, "", DataRowVersion.Proposed, m_curHoldingCost));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@curBasePrice", SqlDbType.Money, 8, ParameterDirection.Input, false, 19, 4, "", DataRowVersion.Proposed, m_curBasePrice));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_ProductMaster_Update' reported the ErrorCode: " + m_iErrorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("ProductMaster::Update::Error occured.", ex);
			}
			finally
			{
			}
		}


		/// <summary>
		/// Purpose: Update method for updating one or more rows using the Foreign Key 'FamilyID.
		/// This method will Update one or more existing rows in the database. It will reset the field 'FamilyID' in
		/// all rows which have as value for this field the value as set in property 'familyIDOld' to 
		/// the value as set in property 'familyID'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>FamilyID. May be SqlString.Null</LI>
		///		 <LI>FamilyIDOld. May be SqlString.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool UpdateAllWFamilyIDLogic()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_ProductMaster_UpdateAllWFamilyIDLogic]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sFamilyID", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sFamilyID));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sFamilyIDOld", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sFamilyIDOld));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 36, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_ProductMaster_UpdateAllWFamilyIDLogic' reported the ErrorCode: " + m_iErrorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("ProductMaster::UpdateAllWFamilyIDLogic::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method for updating one or more rows using the Foreign Key 'CategoryID.
		/// This method will Update one or more existing rows in the database. It will reset the field 'CategoryID' in
		/// all rows which have as value for this field the value as set in property 'categoryIDOld' to 
		/// the value as set in property 'categoryID'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>CategoryID. May be SqlString.Null</LI>
		///		 <LI>CategoryIDOld. May be SqlString.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool UpdateAllWCategoryIDLogic()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_ProductMaster_UpdateAllWCategoryIDLogic]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sCategoryID", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sCategoryID));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sCategoryIDOld", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sCategoryIDOld));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 36, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_ProductMaster_UpdateAllWCategoryIDLogic' reported the ErrorCode: " + m_iErrorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("ProductMaster::UpdateAllWCategoryIDLogic::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method for updating one or more rows using the Foreign Key 'SubCategoryID.
		/// This method will Update one or more existing rows in the database. It will reset the field 'SubCategoryID' in
		/// all rows which have as value for this field the value as set in property 'subCategoryIDOld' to 
		/// the value as set in property 'subCategoryID'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>SubCategoryID. May be SqlString.Null</LI>
		///		 <LI>SubCategoryIDOld. May be SqlString.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool UpdateAllWSubCategoryIDLogic()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_ProductMaster_UpdateAllWSubCategoryIDLogic]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sSubCategoryID", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sSubCategoryID));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sSubCategoryIDOld", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sSubCategoryIDOld));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 36, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_ProductMaster_UpdateAllWSubCategoryIDLogic' reported the ErrorCode: " + m_iErrorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("ProductMaster::UpdateAllWSubCategoryIDLogic::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method for updating one or more rows using the Foreign Key 'UOMID.
		/// This method will Update one or more existing rows in the database. It will reset the field 'UOMID' in
		/// all rows which have as value for this field the value as set in property 'uOMIDOld' to 
		/// the value as set in property 'uOMID'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>UOMID. May be SqlString.Null</LI>
		///		 <LI>UOMIDOld. May be SqlString.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool UpdateAllWUOMIDLogic()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_ProductMaster_UpdateAllWUOMIDLogic]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sUOMID", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sUOMID));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sUOMIDOld", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sUOMIDOld));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 50, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_ProductMaster_UpdateAllWUOMIDLogic' reported the ErrorCode: " + m_iErrorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("ProductMaster::UpdateAllWUOMIDLogic::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ProductID</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Delete(SqlCommand scmCmdToExecute)
		{
			scmCmdToExecute.Parameters.Clear();
			scmCmdToExecute.CommandText = "dbo.[pr_ProductMaster_Delete]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sProductID", SqlDbType.NChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sProductID));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_ProductMaster_Delete' reported the ErrorCode: " + m_iErrorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("ProductMaster::Delete::Error occured.", ex);
			}
			finally
			{
			}
		}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ProductID</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		///		 <LI>ProductID</LI>
		///		 <LI>ProductName</LI>
		///		 <LI>AlternativeID</LI>
		///		 <LI>BarcodeID</LI>
		///		 <LI>FamilyID</LI>
		///		 <LI>CategoryID</LI>
		///		 <LI>SubCategoryID</LI>
		///		 <LI>Description</LI>
		///		 <LI>SupplierID</LI>
		///		 <LI>POSID</LI>
		///		 <LI>InvID</LI>
		///		 <LI>UOMID</LI>
		///		 <LI>LeadTimeMin</LI>
		///		 <LI>LeadTimeMax</LI>
		///		 <LI>Qty</LI>
		///		 <LI>BookedQty</LI>
		///		 <LI>PhysicalStockLevel</LI>
		///		 <LI>SafetyLevel</LI>
		///		 <LI>MiniLevel</LI>
		///		 <LI>MaxLevel</LI>
		///		 <LI>ReorderLevel</LI>
		///		 <LI>CurrencyID</LI>
		///		 <LI>Cost1</LI>
		///		 <LI>Cost2</LI>
		///		 <LI>CostDiscount1</LI>
		///		 <LI>CostDiscount2</LI>
		///		 <LI>Price1</LI>
		///		 <LI>Price2</LI>
		///		 <LI>Price3</LI>
		///		 <LI>PriceDiscount1</LI>
		///		 <LI>PriceDiscount2</LI>
		///		 <LI>PriceDiscount3</LI>
		///		 <LI>TaxID1</LI>
		///		 <LI>TaxID2</LI>
		///		 <LI>Location_id</LI>
		///		 <LI>Remarks1</LI>
		///		 <LI>Remarks2</LI>
		///		 <LI>ReservedField1</LI>
		///		 <LI>ReservedField2</LI>
		///		 <LI>ReservedField3</LI>
		///		 <LI>ReservedField4</LI>
		///		 <LI>ReservedField5</LI>
		///		 <LI>ExpiredDate</LI>
		///		 <LI>ShowOnWeb</LI>
		///		 <LI>ViewStatus</LI>
		///		 <LI>UserID</LI>
		///		 <LI>Timestamp</LI>
		///		 <LI>SafetyStockFactor</LI>
		///		 <LI>HoldingCost</LI>
		///		 <LI>BasePrice</LI>
		/// </UL>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public override DataTable SelectOne()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_ProductMaster_SelectOne]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable dtToReturn = new DataTable("ProductMaster");
			SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sProductID", SqlDbType.NChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sProductID));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				sdaAdapter.Fill(dtToReturn);
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_ProductMaster_SelectOne' reported the ErrorCode: " + m_iErrorCode);
				}

				if(dtToReturn.Rows.Count > 0)
				{
					m_sProductID = (string)dtToReturn.Rows[0]["ProductID"];
					m_sProductName = dtToReturn.Rows[0]["ProductName"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["ProductName"];
					m_sAlternativeID = dtToReturn.Rows[0]["AlternativeID"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["AlternativeID"];
					m_sBarcodeID = dtToReturn.Rows[0]["BarcodeID"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["BarcodeID"];
					m_sFamilyID = dtToReturn.Rows[0]["FamilyID"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["FamilyID"];
					m_sCategoryID = dtToReturn.Rows[0]["CategoryID"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["CategoryID"];
					m_sSubCategoryID = dtToReturn.Rows[0]["SubCategoryID"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["SubCategoryID"];
					m_sDescription = dtToReturn.Rows[0]["Description"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["Description"];
					m_sSupplierID = dtToReturn.Rows[0]["SupplierID"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["SupplierID"];
					m_sPOSID = dtToReturn.Rows[0]["POSID"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["POSID"];
					m_sInvID = dtToReturn.Rows[0]["InvID"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["InvID"];
					m_sUOMID = dtToReturn.Rows[0]["UOMID"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["UOMID"];
					m_dcLeadTimeMin = dtToReturn.Rows[0]["LeadTimeMin"] == System.DBNull.Value ? SqlDecimal.Null : (Decimal)dtToReturn.Rows[0]["LeadTimeMin"];
					m_dcLeadTimeMax = dtToReturn.Rows[0]["LeadTimeMax"] == System.DBNull.Value ? SqlDecimal.Null : (Decimal)dtToReturn.Rows[0]["LeadTimeMax"];
					m_dcQty = dtToReturn.Rows[0]["Qty"] == System.DBNull.Value ? SqlDecimal.Null : (Decimal)dtToReturn.Rows[0]["Qty"];
					m_dcBookedQty = dtToReturn.Rows[0]["BookedQty"] == System.DBNull.Value ? SqlDecimal.Null : (Decimal)dtToReturn.Rows[0]["BookedQty"];
					m_dcPhysicalStockLevel = dtToReturn.Rows[0]["PhysicalStockLevel"] == System.DBNull.Value ? SqlDecimal.Null : (Decimal)dtToReturn.Rows[0]["PhysicalStockLevel"];
					m_dcSafetyLevel = dtToReturn.Rows[0]["SafetyLevel"] == System.DBNull.Value ? SqlDecimal.Null : (Decimal)dtToReturn.Rows[0]["SafetyLevel"];
					m_dcMiniLevel = dtToReturn.Rows[0]["MiniLevel"] == System.DBNull.Value ? SqlDecimal.Null : (Decimal)dtToReturn.Rows[0]["MiniLevel"];
					m_dcMaxLevel = dtToReturn.Rows[0]["MaxLevel"] == System.DBNull.Value ? SqlDecimal.Null : (Decimal)dtToReturn.Rows[0]["MaxLevel"];
					m_dcReorderLevel = dtToReturn.Rows[0]["ReorderLevel"] == System.DBNull.Value ? SqlDecimal.Null : (Decimal)dtToReturn.Rows[0]["ReorderLevel"];
					m_sCurrencyID = dtToReturn.Rows[0]["CurrencyID"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["CurrencyID"];
					m_curCost1 = dtToReturn.Rows[0]["Cost1"] == System.DBNull.Value ? SqlMoney.Null : (Decimal)dtToReturn.Rows[0]["Cost1"];
					m_curCost2 = dtToReturn.Rows[0]["Cost2"] == System.DBNull.Value ? SqlMoney.Null : (Decimal)dtToReturn.Rows[0]["Cost2"];
					m_curCostDiscount1 = dtToReturn.Rows[0]["CostDiscount1"] == System.DBNull.Value ? SqlMoney.Null : (Decimal)dtToReturn.Rows[0]["CostDiscount1"];
					m_curCostDiscount2 = dtToReturn.Rows[0]["CostDiscount2"] == System.DBNull.Value ? SqlMoney.Null : (Decimal)dtToReturn.Rows[0]["CostDiscount2"];
					m_curPrice1 = dtToReturn.Rows[0]["Price1"] == System.DBNull.Value ? SqlMoney.Null : (Decimal)dtToReturn.Rows[0]["Price1"];
					m_curPrice2 = dtToReturn.Rows[0]["Price2"] == System.DBNull.Value ? SqlMoney.Null : (Decimal)dtToReturn.Rows[0]["Price2"];
					m_curPrice3 = dtToReturn.Rows[0]["Price3"] == System.DBNull.Value ? SqlMoney.Null : (Decimal)dtToReturn.Rows[0]["Price3"];
					m_curPriceDiscount1 = dtToReturn.Rows[0]["PriceDiscount1"] == System.DBNull.Value ? SqlMoney.Null : (Decimal)dtToReturn.Rows[0]["PriceDiscount1"];
					m_curPriceDiscount2 = dtToReturn.Rows[0]["PriceDiscount2"] == System.DBNull.Value ? SqlMoney.Null : (Decimal)dtToReturn.Rows[0]["PriceDiscount2"];
					m_curPriceDiscount3 = dtToReturn.Rows[0]["PriceDiscount3"] == System.DBNull.Value ? SqlMoney.Null : (Decimal)dtToReturn.Rows[0]["PriceDiscount3"];
					m_sTaxID1 = dtToReturn.Rows[0]["TaxID1"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["TaxID1"];
					m_sTaxID2 = dtToReturn.Rows[0]["TaxID2"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["TaxID2"];
					m_sLocation_id = dtToReturn.Rows[0]["Location_id"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["Location_id"];
					m_sRemarks1 = dtToReturn.Rows[0]["Remarks1"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["Remarks1"];
					m_sRemarks2 = dtToReturn.Rows[0]["Remarks2"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["Remarks2"];
					m_sReservedField1 = dtToReturn.Rows[0]["ReservedField1"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["ReservedField1"];
					m_sReservedField2 = dtToReturn.Rows[0]["ReservedField2"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["ReservedField2"];
					m_sReservedField3 = dtToReturn.Rows[0]["ReservedField3"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["ReservedField3"];
					m_sReservedField4 = dtToReturn.Rows[0]["ReservedField4"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["ReservedField4"];
					m_sReservedField5 = dtToReturn.Rows[0]["ReservedField5"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["ReservedField5"];
					m_daExpiredDate = dtToReturn.Rows[0]["ExpiredDate"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)dtToReturn.Rows[0]["ExpiredDate"];
					m_bShowOnWeb = dtToReturn.Rows[0]["ShowOnWeb"] == System.DBNull.Value ? SqlBoolean.Null : (bool)dtToReturn.Rows[0]["ShowOnWeb"];
					m_bViewStatus = dtToReturn.Rows[0]["ViewStatus"] == System.DBNull.Value ? SqlBoolean.Null : (bool)dtToReturn.Rows[0]["ViewStatus"];
					m_sUserID = dtToReturn.Rows[0]["UserID"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["UserID"];
					m_biTimestamp = dtToReturn.Rows[0]["Timestamp"] == System.DBNull.Value ? SqlBinary.Null : (byte[])dtToReturn.Rows[0]["Timestamp"];
					m_iSafetyStockFactor = dtToReturn.Rows[0]["SafetyStockFactor"] == System.DBNull.Value ? SqlInt32.Null : (Int32)dtToReturn.Rows[0]["SafetyStockFactor"];
					m_curHoldingCost = dtToReturn.Rows[0]["HoldingCost"] == System.DBNull.Value ? SqlMoney.Null : (Decimal)dtToReturn.Rows[0]["HoldingCost"];
					m_curBasePrice = dtToReturn.Rows[0]["BasePrice"] == System.DBNull.Value ? SqlMoney.Null : (Decimal)dtToReturn.Rows[0]["BasePrice"];
				}
				return dtToReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("ProductMaster::SelectOne::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
				sdaAdapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override DataTable SelectAll()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_ProductMaster_SelectAll]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable dtToReturn = new DataTable("ProductMaster");
			SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				sdaAdapter.Fill(dtToReturn);
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_ProductMaster_SelectAll' reported the ErrorCode: " + m_iErrorCode);
				}

				return dtToReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("ProductMaster::SelectAll::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
				sdaAdapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method for a foreign key. This method will Select one or more rows from the database, based on the Foreign Key 'FamilyID'
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>FamilyID. May be SqlString.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public DataTable SelectAllWFamilyIDLogic()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_ProductMaster_SelectAllWFamilyIDLogic]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable dtToReturn = new DataTable("ProductMaster");
			SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sFamilyID", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sFamilyID));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				sdaAdapter.Fill(dtToReturn);
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_ProductMaster_SelectAllWFamilyIDLogic' reported the ErrorCode: " + m_iErrorCode);
				}

				return dtToReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("ProductMaster::SelectAllWFamilyIDLogic::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
				sdaAdapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method for a foreign key. This method will Select one or more rows from the database, based on the Foreign Key 'CategoryID'
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>CategoryID. May be SqlString.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public DataTable SelectAllWCategoryIDLogic()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_ProductMaster_SelectAllWCategoryIDLogic]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable dtToReturn = new DataTable("ProductMaster");
			SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sCategoryID", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sCategoryID));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				sdaAdapter.Fill(dtToReturn);
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_ProductMaster_SelectAllWCategoryIDLogic' reported the ErrorCode: " + m_iErrorCode);
				}

				return dtToReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("ProductMaster::SelectAllWCategoryIDLogic::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
				sdaAdapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method for a foreign key. This method will Select one or more rows from the database, based on the Foreign Key 'SubCategoryID'
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>SubCategoryID. May be SqlString.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public DataTable SelectAllWSubCategoryIDLogic()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_ProductMaster_SelectAllWSubCategoryIDLogic]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable dtToReturn = new DataTable("ProductMaster");
			SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sSubCategoryID", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sSubCategoryID));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				sdaAdapter.Fill(dtToReturn);
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_ProductMaster_SelectAllWSubCategoryIDLogic' reported the ErrorCode: " + m_iErrorCode);
				}

				return dtToReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("ProductMaster::SelectAllWSubCategoryIDLogic::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
				sdaAdapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method for a foreign key. This method will Select one or more rows from the database, based on the Foreign Key 'UOMID'
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>UOMID. May be SqlString.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public DataTable SelectAllWUOMIDLogic()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_ProductMaster_SelectAllWUOMIDLogic]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable dtToReturn = new DataTable("ProductMaster");
			SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sUOMID", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sUOMID));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				sdaAdapter.Fill(dtToReturn);
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_ProductMaster_SelectAllWUOMIDLogic' reported the ErrorCode: " + m_iErrorCode);
				}

				return dtToReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("ProductMaster::SelectAllWUOMIDLogic::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
				sdaAdapter.Dispose();
			}
		}


		#region Class Property Declarations
		public SqlString ProductID
		{
			get
			{
				return m_sProductID;
			}
			set
			{
				SqlString sProductIDTmp = (SqlString)value;
				if(sProductIDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("productID", "productID can't be NULL");
				}
				m_sProductID = value;
			}
		}


		public SqlString ProductName
		{
			get
			{
				return m_sProductName;
			}
			set
			{
				m_sProductName = value;
			}
		}


		public SqlString AlternativeID
		{
			get
			{
				return m_sAlternativeID;
			}
			set
			{
				m_sAlternativeID = value;
			}
		}


		public SqlString BarcodeID
		{
			get
			{
				return m_sBarcodeID;
			}
			set
			{
				m_sBarcodeID = value;
			}
		}


		public SqlString FamilyID
		{
			get
			{
				return m_sFamilyID;
			}
			set
			{
				m_sFamilyID = value;
			}
		}
		public SqlString familyIDOld
		{
			get
			{
				return m_sFamilyIDOld;
			}
			set
			{
				m_sFamilyIDOld = value;
			}
		}


		public SqlString CategoryID
		{
			get
			{
				return m_sCategoryID;
			}
			set
			{
				m_sCategoryID = value;
			}
		}
		public SqlString categoryIDOld
		{
			get
			{
				return m_sCategoryIDOld;
			}
			set
			{
				m_sCategoryIDOld = value;
			}
		}


		public SqlString SubCategoryID
		{
			get
			{
				return m_sSubCategoryID;
			}
			set
			{
				m_sSubCategoryID = value;
			}
		}
		public SqlString subCategoryIDOld
		{
			get
			{
				return m_sSubCategoryIDOld;
			}
			set
			{
				m_sSubCategoryIDOld = value;
			}
		}


		public SqlString Description
		{
			get
			{
				return m_sDescription;
			}
			set
			{
				m_sDescription = value;
			}
		}


		public SqlString SupplierID
		{
			get
			{
				return m_sSupplierID;
			}
			set
			{
				m_sSupplierID = value;
			}
		}


		public SqlString POSID
		{
			get
			{
				return m_sPOSID;
			}
			set
			{
				m_sPOSID = value;
			}
		}


		public SqlString InvID
		{
			get
			{
				return m_sInvID;
			}
			set
			{
				m_sInvID = value;
			}
		}


		public SqlString UOMID
		{
			get
			{
				return m_sUOMID;
			}
			set
			{
				m_sUOMID = value;
			}
		}
		public SqlString uOMIDOld
		{
			get
			{
				return m_sUOMIDOld;
			}
			set
			{
				m_sUOMIDOld = value;
			}
		}


		public SqlDecimal LeadTimeMin
		{
			get
			{
				return m_dcLeadTimeMin;
			}
			set
			{
				m_dcLeadTimeMin = value;
			}
		}


		public SqlDecimal LeadTimeMax
		{
			get
			{
				return m_dcLeadTimeMax;
			}
			set
			{
				m_dcLeadTimeMax = value;
			}
		}


		public SqlDecimal Qty
		{
			get
			{
				return m_dcQty;
			}
			set
			{
				m_dcQty = value;
			}
		}


		public SqlDecimal BookedQty
		{
			get
			{
				return m_dcBookedQty;
			}
			set
			{
				m_dcBookedQty = value;
			}
		}


		public SqlDecimal PhysicalStockLevel
		{
			get
			{
				return m_dcPhysicalStockLevel;
			}
			set
			{
				m_dcPhysicalStockLevel = value;
			}
		}


		public SqlDecimal SafetyLevel
		{
			get
			{
				return m_dcSafetyLevel;
			}
			set
			{
				m_dcSafetyLevel = value;
			}
		}


		public SqlDecimal MiniLevel
		{
			get
			{
				return m_dcMiniLevel;
			}
			set
			{
				m_dcMiniLevel = value;
			}
		}


		public SqlDecimal MaxLevel
		{
			get
			{
				return m_dcMaxLevel;
			}
			set
			{
				m_dcMaxLevel = value;
			}
		}


		public SqlDecimal ReorderLevel
		{
			get
			{
				return m_dcReorderLevel;
			}
			set
			{
				m_dcReorderLevel = value;
			}
		}


		public SqlString CurrencyID
		{
			get
			{
				return m_sCurrencyID;
			}
			set
			{
				m_sCurrencyID = value;
			}
		}


		public SqlMoney Cost1
		{
			get
			{
				return m_curCost1;
			}
			set
			{
				m_curCost1 = value;
			}
		}


		public SqlMoney Cost2
		{
			get
			{
				return m_curCost2;
			}
			set
			{
				m_curCost2 = value;
			}
		}


		public SqlMoney CostDiscount1
		{
			get
			{
				return m_curCostDiscount1;
			}
			set
			{
				m_curCostDiscount1 = value;
			}
		}


		public SqlMoney CostDiscount2
		{
			get
			{
				return m_curCostDiscount2;
			}
			set
			{
				m_curCostDiscount2 = value;
			}
		}


		public SqlMoney Price1
		{
			get
			{
				return m_curPrice1;
			}
			set
			{
				m_curPrice1 = value;
			}
		}


		public SqlMoney Price2
		{
			get
			{
				return m_curPrice2;
			}
			set
			{
				m_curPrice2 = value;
			}
		}


		public SqlMoney Price3
		{
			get
			{
				return m_curPrice3;
			}
			set
			{
				m_curPrice3 = value;
			}
		}


		public SqlMoney PriceDiscount1
		{
			get
			{
				return m_curPriceDiscount1;
			}
			set
			{
				m_curPriceDiscount1 = value;
			}
		}


		public SqlMoney PriceDiscount2
		{
			get
			{
				return m_curPriceDiscount2;
			}
			set
			{
				m_curPriceDiscount2 = value;
			}
		}


		public SqlMoney PriceDiscount3
		{
			get
			{
				return m_curPriceDiscount3;
			}
			set
			{
				m_curPriceDiscount3 = value;
			}
		}


		public SqlString TaxID1
		{
			get
			{
				return m_sTaxID1;
			}
			set
			{
				m_sTaxID1 = value;
			}
		}


		public SqlString TaxID2
		{
			get
			{
				return m_sTaxID2;
			}
			set
			{
				m_sTaxID2 = value;
			}
		}


		public SqlString Location_id
		{
			get
			{
				return m_sLocation_id;
			}
			set
			{
				m_sLocation_id = value;
			}
		}


		public SqlString Remarks1
		{
			get
			{
				return m_sRemarks1;
			}
			set
			{
				m_sRemarks1 = value;
			}
		}


		public SqlString Remarks2
		{
			get
			{
				return m_sRemarks2;
			}
			set
			{
				m_sRemarks2 = value;
			}
		}


		public SqlString ReservedField1
		{
			get
			{
				return m_sReservedField1;
			}
			set
			{
				m_sReservedField1 = value;
			}
		}


		public SqlString ReservedField2
		{
			get
			{
				return m_sReservedField2;
			}
			set
			{
				m_sReservedField2 = value;
			}
		}


		public SqlString ReservedField3
		{
			get
			{
				return m_sReservedField3;
			}
			set
			{
				m_sReservedField3 = value;
			}
		}


		public SqlString ReservedField4
		{
			get
			{
				return m_sReservedField4;
			}
			set
			{
				m_sReservedField4 = value;
			}
		}


		public SqlString ReservedField5
		{
			get
			{
				return m_sReservedField5;
			}
			set
			{
				m_sReservedField5 = value;
			}
		}


		public SqlDateTime ExpiredDate
		{
			get
			{
				return m_daExpiredDate;
			}
			set
			{
				m_daExpiredDate = value;
			}
		}


		public SqlBoolean ShowOnWeb
		{
			get
			{
				return m_bShowOnWeb;
			}
			set
			{
				m_bShowOnWeb = value;
			}
		}


		public SqlBoolean ViewStatus
		{
			get
			{
				return m_bViewStatus;
			}
			set
			{
				m_bViewStatus = value;
			}
		}


		public SqlString UserID
		{
			get
			{
				return m_sUserID;
			}
			set
			{
				m_sUserID = value;
			}
		}


		public SqlBinary Timestamp
		{
			get
			{
				return m_biTimestamp;
			}
			set
			{
				m_biTimestamp = value;
			}
		}


		public SqlInt32 SafetyStockFactor
		{
			get
			{
				return m_iSafetyStockFactor;
			}
			set
			{
				m_iSafetyStockFactor = value;
			}
		}


		public SqlMoney HoldingCost
		{
			get
			{
				return m_curHoldingCost;
			}
			set
			{
				m_curHoldingCost = value;
			}
		}


		public SqlMoney BasePrice
		{
			get
			{
				return m_curBasePrice;
			}
			set
			{
				m_curBasePrice = value;
			}
		}
		#endregion
	}
}
