///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'Warehouse_Master'
// Generated by LLBLGen v1.2.2690.36218 Final on: Monday, May 14, 2007, 8:07:36 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace Inventory.DataObjects
{
	/// <summary>
	/// Purpose: Data Access class for the table 'Warehouse_Master'.
	/// </summary>
	public class Warehouse_Master : DBInteractionBase
	{
		#region Class Member Declarations
			private SqlDateTime		m_daOrder_cons_date;
			private SqlInt32		m_iLast_pick_list_Nr, m_iPercentage_change;
			private SqlString		m_sPayment_Cons, m_sWeight_control, m_sSplit_Pick_list, m_sUserID, m_sLocation_Lock, m_sCons_Picklist, m_sOrder_cons_type, m_sAddress_line, m_sPostal_Code, m_sWarehouse_id, m_sDescription, m_sPull_system, m_sPull_rush_order, m_sCountry, m_sDivision_Code;
			private SqlBinary		m_biTimestamp;
		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public Warehouse_Master()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>Warehouse_id</LI>
		///		 <LI>Description. May be SqlString.Null</LI>
		///		 <LI>Address_line. May be SqlString.Null</LI>
		///		 <LI>Postal_Code. May be SqlString.Null</LI>
		///		 <LI>Country. May be SqlString.Null</LI>
		///		 <LI>Division_Code. May be SqlString.Null</LI>
		///		 <LI>Pull_system. May be SqlString.Null</LI>
		///		 <LI>Pull_rush_order. May be SqlString.Null</LI>
		///		 <LI>Order_cons_date. May be SqlDateTime.Null</LI>
		///		 <LI>Order_cons_type. May be SqlString.Null</LI>
		///		 <LI>Payment_Cons. May be SqlString.Null</LI>
		///		 <LI>Weight_control. May be SqlString.Null</LI>
		///		 <LI>Percentage_change. May be SqlInt32.Null</LI>
		///		 <LI>Location_Lock. May be SqlString.Null</LI>
		///		 <LI>Last_pick_list_Nr. May be SqlInt32.Null</LI>
		///		 <LI>Cons_Picklist. May be SqlString.Null</LI>
		///		 <LI>Split_Pick_list. May be SqlString.Null</LI>
		///		 <LI>UserID. May be SqlString.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Insert(SqlCommand scmCmdToExecute)
		{
			scmCmdToExecute.Parameters.Clear();
			scmCmdToExecute.CommandText = "dbo.[pr_Warehouse_Master_Insert]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sWarehouse_id", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sWarehouse_id));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sDescription", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sDescription));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sAddress_line", SqlDbType.NVarChar, -1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sAddress_line));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sPostal_Code", SqlDbType.NVarChar, 20, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sPostal_Code));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sCountry", SqlDbType.NVarChar, 20, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sCountry));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sDivision_Code", SqlDbType.NVarChar, 20, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sDivision_Code));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sPull_system", SqlDbType.NVarChar, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sPull_system));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sPull_rush_order", SqlDbType.NVarChar, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sPull_rush_order));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@daOrder_cons_date", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daOrder_cons_date));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sOrder_cons_type", SqlDbType.NVarChar, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sOrder_cons_type));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sPayment_Cons", SqlDbType.NVarChar, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sPayment_Cons));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sWeight_control", SqlDbType.NVarChar, 20, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sWeight_control));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iPercentage_change", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iPercentage_change));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sLocation_Lock", SqlDbType.NVarChar, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sLocation_Lock));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iLast_pick_list_Nr", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iLast_pick_list_Nr));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sCons_Picklist", SqlDbType.NVarChar, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sCons_Picklist));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sSplit_Pick_list", SqlDbType.NVarChar, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sSplit_Pick_list));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sUserID", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sUserID));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_Warehouse_Master_Insert' reported the ErrorCode: " + m_iErrorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("Warehouse_Master::Insert::Error occured.", ex);
			}
			finally
			{
			}
		}


		/// <summary>
		/// Purpose: Update method. This method will Update one existing row in the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>Warehouse_id</LI>
		///		 <LI>Description. May be SqlString.Null</LI>
		///		 <LI>Address_line. May be SqlString.Null</LI>
		///		 <LI>Postal_Code. May be SqlString.Null</LI>
		///		 <LI>Country. May be SqlString.Null</LI>
		///		 <LI>Division_Code. May be SqlString.Null</LI>
		///		 <LI>Pull_system. May be SqlString.Null</LI>
		///		 <LI>Pull_rush_order. May be SqlString.Null</LI>
		///		 <LI>Order_cons_date. May be SqlDateTime.Null</LI>
		///		 <LI>Order_cons_type. May be SqlString.Null</LI>
		///		 <LI>Payment_Cons. May be SqlString.Null</LI>
		///		 <LI>Weight_control. May be SqlString.Null</LI>
		///		 <LI>Percentage_change. May be SqlInt32.Null</LI>
		///		 <LI>Location_Lock. May be SqlString.Null</LI>
		///		 <LI>Last_pick_list_Nr. May be SqlInt32.Null</LI>
		///		 <LI>Cons_Picklist. May be SqlString.Null</LI>
		///		 <LI>Split_Pick_list. May be SqlString.Null</LI>
		///		 <LI>UserID. May be SqlString.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Update(SqlCommand scmCmdToExecute)
		{
			scmCmdToExecute.Parameters.Clear();
			scmCmdToExecute.CommandText = "dbo.[pr_Warehouse_Master_Update]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sWarehouse_id", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sWarehouse_id));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sDescription", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sDescription));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sAddress_line", SqlDbType.NVarChar, -1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sAddress_line));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sPostal_Code", SqlDbType.NVarChar, 20, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sPostal_Code));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sCountry", SqlDbType.NVarChar, 20, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sCountry));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sDivision_Code", SqlDbType.NVarChar, 20, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sDivision_Code));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sPull_system", SqlDbType.NVarChar, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sPull_system));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sPull_rush_order", SqlDbType.NVarChar, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sPull_rush_order));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@daOrder_cons_date", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daOrder_cons_date));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sOrder_cons_type", SqlDbType.NVarChar, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sOrder_cons_type));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sPayment_Cons", SqlDbType.NVarChar, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sPayment_Cons));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sWeight_control", SqlDbType.NVarChar, 20, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sWeight_control));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iPercentage_change", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iPercentage_change));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sLocation_Lock", SqlDbType.NVarChar, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sLocation_Lock));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iLast_pick_list_Nr", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iLast_pick_list_Nr));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sCons_Picklist", SqlDbType.NVarChar, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sCons_Picklist));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sSplit_Pick_list", SqlDbType.NVarChar, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sSplit_Pick_list));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sUserID", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sUserID));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_Warehouse_Master_Update' reported the ErrorCode: " + m_iErrorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("Warehouse_Master::Update::Error occured.", ex);
			}
			finally
			{
			}
		}


		/// <summary>
		/// Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>Warehouse_id</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Delete(SqlCommand scmCmdToExecute)
		{
			scmCmdToExecute.Parameters.Clear();
			scmCmdToExecute.CommandText = "dbo.[pr_Warehouse_Master_Delete]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sWarehouse_id", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sWarehouse_id));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_Warehouse_Master_Delete' reported the ErrorCode: " + m_iErrorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("Warehouse_Master::Delete::Error occured.", ex);
			}
			finally
			{
			}
		}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>Warehouse_id</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		///		 <LI>Warehouse_id</LI>
		///		 <LI>Description</LI>
		///		 <LI>Address_line</LI>
		///		 <LI>Postal_Code</LI>
		///		 <LI>Country</LI>
		///		 <LI>Division_Code</LI>
		///		 <LI>Pull_system</LI>
		///		 <LI>Pull_rush_order</LI>
		///		 <LI>Order_cons_date</LI>
		///		 <LI>Order_cons_type</LI>
		///		 <LI>Payment_Cons</LI>
		///		 <LI>Weight_control</LI>
		///		 <LI>Percentage_change</LI>
		///		 <LI>Location_Lock</LI>
		///		 <LI>Last_pick_list_Nr</LI>
		///		 <LI>Cons_Picklist</LI>
		///		 <LI>Split_Pick_list</LI>
		///		 <LI>UserID</LI>
		///		 <LI>Timestamp</LI>
		/// </UL>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public override DataTable SelectOne()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_Warehouse_Master_SelectOne]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable dtToReturn = new DataTable("Warehouse_Master");
			SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sWarehouse_id", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sWarehouse_id));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				sdaAdapter.Fill(dtToReturn);
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_Warehouse_Master_SelectOne' reported the ErrorCode: " + m_iErrorCode);
				}

				if(dtToReturn.Rows.Count > 0)
				{
					m_sWarehouse_id = (string)dtToReturn.Rows[0]["Warehouse_id"];
					m_sDescription = dtToReturn.Rows[0]["Description"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["Description"];
					m_sAddress_line = dtToReturn.Rows[0]["Address line"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["Address line"];
					m_sPostal_Code = dtToReturn.Rows[0]["Postal Code"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["Postal Code"];
					m_sCountry = dtToReturn.Rows[0]["Country"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["Country"];
					m_sDivision_Code = dtToReturn.Rows[0]["Division Code"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["Division Code"];
					m_sPull_system = dtToReturn.Rows[0]["Pull system"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["Pull system"];
					m_sPull_rush_order = dtToReturn.Rows[0]["Pull rush order"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["Pull rush order"];
					m_daOrder_cons_date = dtToReturn.Rows[0]["Order_cons_date"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)dtToReturn.Rows[0]["Order_cons_date"];
					m_sOrder_cons_type = dtToReturn.Rows[0]["Order_cons_type"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["Order_cons_type"];
					m_sPayment_Cons = dtToReturn.Rows[0]["Payment_Cons"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["Payment_Cons"];
					m_sWeight_control = dtToReturn.Rows[0]["Weight_control"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["Weight_control"];
					m_iPercentage_change = dtToReturn.Rows[0]["Percentage_change"] == System.DBNull.Value ? SqlInt32.Null : (Int32)dtToReturn.Rows[0]["Percentage_change"];
					m_sLocation_Lock = dtToReturn.Rows[0]["Location Lock"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["Location Lock"];
					m_iLast_pick_list_Nr = dtToReturn.Rows[0]["Last_pick_list Nr"] == System.DBNull.Value ? SqlInt32.Null : (Int32)dtToReturn.Rows[0]["Last_pick_list Nr"];
					m_sCons_Picklist = dtToReturn.Rows[0]["Cons_Picklist"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["Cons_Picklist"];
					m_sSplit_Pick_list = dtToReturn.Rows[0]["Split_Pick_list"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["Split_Pick_list"];
					m_sUserID = dtToReturn.Rows[0]["UserID"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["UserID"];
					m_biTimestamp = dtToReturn.Rows[0]["Timestamp"] == System.DBNull.Value ? SqlBinary.Null : (byte[])dtToReturn.Rows[0]["Timestamp"];
				}
				return dtToReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("Warehouse_Master::SelectOne::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
				sdaAdapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override DataTable SelectAll()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_Warehouse_Master_SelectAll]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable dtToReturn = new DataTable("Warehouse_Master");
			SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				sdaAdapter.Fill(dtToReturn);
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_Warehouse_Master_SelectAll' reported the ErrorCode: " + m_iErrorCode);
				}

				return dtToReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("Warehouse_Master::SelectAll::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
				sdaAdapter.Dispose();
			}
		}


		#region Class Property Declarations
		public SqlString Warehouse_id
		{
			get
			{
				return m_sWarehouse_id;
			}
			set
			{
				m_sWarehouse_id = value;
			}
		}


		public SqlString Description
		{
			get
			{
				return m_sDescription;
			}
			set
			{
				m_sDescription = value;
			}
		}


		public SqlString Address_line
		{
			get
			{
				return m_sAddress_line;
			}
			set
			{
				m_sAddress_line = value;
			}
		}


		public SqlString Postal_Code
		{
			get
			{
				return m_sPostal_Code;
			}
			set
			{
				m_sPostal_Code = value;
			}
		}


		public SqlString Country
		{
			get
			{
				return m_sCountry;
			}
			set
			{
				m_sCountry = value;
			}
		}


		public SqlString Division_Code
		{
			get
			{
				return m_sDivision_Code;
			}
			set
			{
				m_sDivision_Code = value;
			}
		}


		public SqlString Pull_system
		{
			get
			{
				return m_sPull_system;
			}
			set
			{
				m_sPull_system = value;
			}
		}


		public SqlString Pull_rush_order
		{
			get
			{
				return m_sPull_rush_order;
			}
			set
			{
				m_sPull_rush_order = value;
			}
		}


		public SqlDateTime Order_cons_date
		{
			get
			{
				return m_daOrder_cons_date;
			}
			set
			{
				m_daOrder_cons_date = value;
			}
		}


		public SqlString Order_cons_type
		{
			get
			{
				return m_sOrder_cons_type;
			}
			set
			{
				m_sOrder_cons_type = value;
			}
		}


		public SqlString Payment_Cons
		{
			get
			{
				return m_sPayment_Cons;
			}
			set
			{
				m_sPayment_Cons = value;
			}
		}


		public SqlString Weight_control
		{
			get
			{
				return m_sWeight_control;
			}
			set
			{
				m_sWeight_control = value;
			}
		}


		public SqlInt32 Percentage_change
		{
			get
			{
				return m_iPercentage_change;
			}
			set
			{
				m_iPercentage_change = value;
			}
		}


		public SqlString Location_Lock
		{
			get
			{
				return m_sLocation_Lock;
			}
			set
			{
				m_sLocation_Lock = value;
			}
		}


		public SqlInt32 Last_pick_list_Nr
		{
			get
			{
				return m_iLast_pick_list_Nr;
			}
			set
			{
				m_iLast_pick_list_Nr = value;
			}
		}


		public SqlString Cons_Picklist
		{
			get
			{
				return m_sCons_Picklist;
			}
			set
			{
				m_sCons_Picklist = value;
			}
		}


		public SqlString Split_Pick_list
		{
			get
			{
				return m_sSplit_Pick_list;
			}
			set
			{
				m_sSplit_Pick_list = value;
			}
		}


		public SqlString UserID
		{
			get
			{
				return m_sUserID;
			}
			set
			{
				m_sUserID = value;
			}
		}


		public SqlBinary Timestamp
		{
			get
			{
				return m_biTimestamp;
			}
			set
			{
				m_biTimestamp = value;
			}
		}
		#endregion
	}
}
