///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'BarcodeMaster'
// Generated by LLBLGen v1.2.2069.24088 Final on: Monday, June 04, 2007, 2:33:29 AM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace Inventory.DataObjects
{
    /// <summary>
    /// Purpose: Data Access class for the table 'BarcodeMaster'.
    /// </summary>
    public class BarcodeMaster : DBInteractionBase
    {
        #region Class Member Declarations
        private SqlBoolean m_bViewState, m_bViewLabel, m_bViewID;
        private SqlDateTime m_daCreationDate;
        private SqlInt32 m_iSize;
        private SqlString m_sID, m_sLabel, m_sDescription;
        #endregion


        /// <summary>
        /// Purpose: Class constructor.
        /// </summary>
        public BarcodeMaster()
        {
            // Nothing for now.
        }


        /// <summary>
        /// Purpose: Insert method. This method will insert one new row into the database.
        /// </summary>
        /// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
        /// <remarks>
        /// Properties needed for this method: 
        /// <UL>
        ///		 <LI>ID</LI>
        ///		 <LI>Label. May be SqlString.Null</LI>
        ///		 <LI>Description. May be SqlString.Null</LI>
        ///		 <LI>CreationDate. May be SqlDateTime.Null</LI>
        ///		 <LI>Size. May be SqlInt32.Null</LI>
        ///		 <LI>ViewState. May be SqlBoolean.Null</LI>
        ///		 <LI>ViewLabel. May be SqlBoolean.Null</LI>
        ///		 <LI>ViewID. May be SqlBoolean.Null</LI>
        /// </UL>
        /// Properties set after a succesful call of this method: 
        /// <UL>
        ///		 <LI>ErrorCode</LI>
        /// </UL>
        /// </remarks>
        public override bool Insert(SqlCommand scmCmdToExecute)
        {
            this.m_sID = Utils.Barcode.BarcodeGenerator.GenerateAutoBarcodeID();
            //Check for the unique value
            DataTable dt = this.SelectOne();
            if (dt == null && dt.Rows == null && dt.Rows.Count == 0)
            {
                throw new Exception("Barcode ID must be unique.Input again.");
            }

            scmCmdToExecute.Parameters.Clear();
            scmCmdToExecute.CommandText = "dbo.[pr_BarcodeMaster_Insert]";
            scmCmdToExecute.CommandType = CommandType.StoredProcedure;
            try
            {
                scmCmdToExecute.Parameters.Add(new SqlParameter("@sID", SqlDbType.NChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sID));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@sLabel", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sLabel));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@sDescription", SqlDbType.NVarChar, 100, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sDescription));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@daCreationDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daCreationDate));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@iSize", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iSize));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@bViewState", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bViewState));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@bViewLabel", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bViewLabel));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@bViewID", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bViewID));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

                // Execute query.
                scmCmdToExecute.ExecuteNonQuery();
                m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

                if (m_iErrorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'pr_BarcodeMaster_Insert' reported the ErrorCode: " + m_iErrorCode);
                }

                return true;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("BarcodeMaster::Insert::Error occured.", ex);
            }
            finally
            {
            }
        }


        /// <summary>
        /// Purpose: Update method. This method will Update one existing row in the database.
        /// </summary>
        /// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
        /// <remarks>
        /// Properties needed for this method: 
        /// <UL>
        ///		 <LI>ID</LI>
        ///		 <LI>Label. May be SqlString.Null</LI>
        ///		 <LI>Description. May be SqlString.Null</LI>
        ///		 <LI>CreationDate. May be SqlDateTime.Null</LI>
        ///		 <LI>Size. May be SqlInt32.Null</LI>
        ///		 <LI>ViewState. May be SqlBoolean.Null</LI>
        ///		 <LI>ViewLabel. May be SqlBoolean.Null</LI>
        ///		 <LI>ViewID. May be SqlBoolean.Null</LI>
        /// </UL>
        /// Properties set after a succesful call of this method: 
        /// <UL>
        ///		 <LI>ErrorCode</LI>
        /// </UL>
        /// </remarks>
        public override bool Update(SqlCommand scmCmdToExecute)
        {
            scmCmdToExecute.Parameters.Clear();
            scmCmdToExecute.CommandText = "dbo.[pr_BarcodeMaster_Update]";
            scmCmdToExecute.CommandType = CommandType.StoredProcedure;
            try
            {
                scmCmdToExecute.Parameters.Add(new SqlParameter("@sID", SqlDbType.NChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sID));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@sLabel", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sLabel));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@sDescription", SqlDbType.NVarChar, 100, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sDescription));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@daCreationDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daCreationDate));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@iSize", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iSize));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@bViewState", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bViewState));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@bViewLabel", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bViewLabel));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@bViewID", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bViewID));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

                // Execute query.
                scmCmdToExecute.ExecuteNonQuery();
                m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

                if (m_iErrorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'pr_BarcodeMaster_Update' reported the ErrorCode: " + m_iErrorCode);
                }

                return true;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("BarcodeMaster::Update::Error occured.", ex);
            }
            finally
            {
            }
        }


        /// <summary>
        /// Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
        /// </summary>
        /// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
        /// <remarks>
        /// Properties needed for this method: 
        /// <UL>
        ///		 <LI>ID</LI>
        /// </UL>
        /// Properties set after a succesful call of this method: 
        /// <UL>
        ///		 <LI>ErrorCode</LI>
        /// </UL>
        /// </remarks>
        public override bool Delete(SqlCommand scmCmdToExecute)
        {
            scmCmdToExecute.Parameters.Clear();
            scmCmdToExecute.CommandText = "dbo.[pr_BarcodeMaster_Delete]";
            scmCmdToExecute.CommandType = CommandType.StoredProcedure;
            try
            {
                scmCmdToExecute.Parameters.Add(new SqlParameter("@sID", SqlDbType.NChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sID));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

                // Execute query.
                scmCmdToExecute.ExecuteNonQuery();
                m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

                if (m_iErrorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'pr_BarcodeMaster_Delete' reported the ErrorCode: " + m_iErrorCode);
                }

                return true;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("BarcodeMaster::Delete::Error occured.", ex);
            }
            finally
            {
            }
        }


        /// <summary>
        /// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
        /// </summary>
        /// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
        /// <remarks>
        /// Properties needed for this method: 
        /// <UL>
        ///		 <LI>ID</LI>
        /// </UL>
        /// Properties set after a succesful call of this method: 
        /// <UL>
        ///		 <LI>ErrorCode</LI>
        ///		 <LI>ID</LI>
        ///		 <LI>Label</LI>
        ///		 <LI>Description</LI>
        ///		 <LI>CreationDate</LI>
        ///		 <LI>Size</LI>
        ///		 <LI>ViewState</LI>
        ///		 <LI>ViewLabel</LI>
        ///		 <LI>ViewID</LI>
        /// </UL>
        /// Will fill all properties corresponding with a field in the table with the value of the row selected.
        /// </remarks>
        public override DataTable SelectOne()
        {
            SqlCommand scmCmdToExecute = new SqlCommand();
            scmCmdToExecute.CommandText = "dbo.[pr_BarcodeMaster_SelectOne]";
            scmCmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable dtToReturn = new DataTable("BarcodeMaster");
            SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

            // Use base class' connection object
            scmCmdToExecute.Connection = m_scoMainConnection;

            try
            {
                scmCmdToExecute.Parameters.Add(new SqlParameter("@sID", SqlDbType.NChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sID));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

                // Open connection.
                m_scoMainConnection.Open();

                // Execute query.
                sdaAdapter.Fill(dtToReturn);
                m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

                if (m_iErrorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'pr_BarcodeMaster_SelectOne' reported the ErrorCode: " + m_iErrorCode);
                }

                if (dtToReturn.Rows.Count > 0)
                {
                    m_sID = (string)dtToReturn.Rows[0]["ID"];
                    m_sLabel = dtToReturn.Rows[0]["Label"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["Label"];
                    m_sDescription = dtToReturn.Rows[0]["Description"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["Description"];
                    m_daCreationDate = dtToReturn.Rows[0]["CreationDate"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)dtToReturn.Rows[0]["CreationDate"];
                    m_iSize = dtToReturn.Rows[0]["Size"] == System.DBNull.Value ? SqlInt32.Null : (Int32)dtToReturn.Rows[0]["Size"];
                    m_bViewState = dtToReturn.Rows[0]["ViewState"] == System.DBNull.Value ? SqlBoolean.Null : (bool)dtToReturn.Rows[0]["ViewState"];
                    m_bViewLabel = dtToReturn.Rows[0]["ViewLabel"] == System.DBNull.Value ? SqlBoolean.Null : (bool)dtToReturn.Rows[0]["ViewLabel"];
                    m_bViewID = dtToReturn.Rows[0]["ViewID"] == System.DBNull.Value ? SqlBoolean.Null : (bool)dtToReturn.Rows[0]["ViewID"];
                }
                return dtToReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("BarcodeMaster::SelectOne::Error occured.", ex);
            }
            finally
            {
                // Close connection.
                m_scoMainConnection.Close();
                scmCmdToExecute.Dispose();
                sdaAdapter.Dispose();
            }
        }


        /// <summary>
        /// Purpose: SelectAll method. This method will Select all rows from the table.
        /// </summary>
        /// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
        /// <remarks>
        /// Properties set after a succesful call of this method: 
        /// <UL>
        ///		 <LI>ErrorCode</LI>
        /// </UL>
        /// </remarks>
        public override DataTable SelectAll()
        {
            SqlCommand scmCmdToExecute = new SqlCommand();
            scmCmdToExecute.CommandText = "dbo.[pr_BarcodeMaster_SelectAll]";
            scmCmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable dtToReturn = new DataTable("BarcodeMaster");
            SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

            // Use base class' connection object
            scmCmdToExecute.Connection = m_scoMainConnection;

            try
            {
                scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

                // Open connection.
                m_scoMainConnection.Open();

                // Execute query.
                sdaAdapter.Fill(dtToReturn);
                m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

                if (m_iErrorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'pr_BarcodeMaster_SelectAll' reported the ErrorCode: " + m_iErrorCode);
                }

                return dtToReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("BarcodeMaster::SelectAll::Error occured.", ex);
            }
            finally
            {
                // Close connection.
                m_scoMainConnection.Close();
                scmCmdToExecute.Dispose();
                sdaAdapter.Dispose();
            }
        }

        public override DataTable SelectAllTrueViewStatus()
        {
            SqlCommand scmCmdToExecute = new SqlCommand();
            scmCmdToExecute.CommandText = "dbo.[pr_BarcodeMaster_SelectAllTrueStatus]";
            scmCmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable dtToReturn = new DataTable("BarcodeMaster");
            SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

            // Use base class' connection object
            scmCmdToExecute.Connection = m_scoMainConnection;

            try
            {
                scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

                // Open connection.
                m_scoMainConnection.Open();

                // Execute query.
                sdaAdapter.Fill(dtToReturn);
                m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

                if (m_iErrorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'pr_BarcodeMaster_SelectAllTrueStatus' reported the ErrorCode: " + m_iErrorCode);
                }

                return dtToReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("BarcodeMaster::SelectAllTrueViewStatus::Error occured.", ex);
            }
            finally
            {
                // Close connection.
                m_scoMainConnection.Close();
                scmCmdToExecute.Dispose();
                sdaAdapter.Dispose();
            }
        }

        #region Class Property Declarations
        public SqlString ID
        {
            get
            {
                return m_sID;
            }
            set
            {
                SqlString sIDTmp = (SqlString)value;
                if (sIDTmp.IsNull)
                {
                    throw new ArgumentOutOfRangeException("iD", "iD can't be NULL");
                }
                m_sID = value;
            }
        }


        public SqlString Label
        {
            get
            {
                return m_sLabel;
            }
            set
            {
                m_sLabel = value;
            }
        }


        public SqlString Description
        {
            get
            {
                return m_sDescription;
            }
            set
            {
                m_sDescription = value;
            }
        }


        public SqlDateTime CreationDate
        {
            get
            {
                return m_daCreationDate;
            }
            set
            {
                m_daCreationDate = value;
            }
        }


        public SqlInt32 Size
        {
            get
            {
                return m_iSize;
            }
            set
            {
                m_iSize = value;
            }
        }


        public SqlBoolean ViewState
        {
            get
            {
                return m_bViewState;
            }
            set
            {
                m_bViewState = value;
            }
        }


        public SqlBoolean ViewLabel
        {
            get
            {
                return m_bViewLabel;
            }
            set
            {
                m_bViewLabel = value;
            }
        }


        public SqlBoolean ViewID
        {
            get
            {
                return m_bViewID;
            }
            set
            {
                m_bViewID = value;
            }
        }
        #endregion
    }
}
