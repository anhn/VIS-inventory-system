///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the view 'TestView'
// Generated by LLBLGen v1.2.2690.36218 Final on: Monday, May 14, 2007, 8:07:36 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace Inventory.DataObjects
{
	/// <summary>
	/// Purpose: Data Access class for the view 'TestView'.
	/// </summary>
	public class TestView : DBInteractionBase
	{
		#region Class Member Declarations
			private SqlBoolean		m_bSubscribeNews, m_bViewStatus;
			private SqlString		m_sZip;
			private SqlInt32		m_iBalance, m_iDiscount, m_iContactGroupID, m_iAccount_number, m_iCredit_limit;
			private SqlString		m_sPhone2, m_sFax1, m_sFax2, m_sPhone1, m_sProvince, m_sCity, m_sCountry, m_sWebsite, m_sEmail1, m_sUserID, m_sNotes, m_sCell2, m_sCell1, m_sEmail3, m_sEmail2, m_sTax_code_desc, m_sTax_agent, m_sExpr1, m_sPayment_term_desc, m_sParent_id, m_sTax_code_id, m_sPayment_term_id, m_sCurrency, m_sAccountName, m_sMr, m_sAlt_contact, m_sCompanyName, m_sAddress2, m_sAddress1, m_sContactName, m_sMiddleName, m_sFirstName, m_sEmailName, m_sLastName;
		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public TestView()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>Payment_term_id. May be SqlString.Null</LI>
		///		 <LI>Tax_code_id. May be SqlString.Null</LI>
		///		 <LI>AccountName. May be SqlString.Null</LI>
		///		 <LI>Account_number. May be SqlInt32.Null</LI>
		///		 <LI>Credit_limit. May be SqlInt32.Null</LI>
		///		 <LI>Currency. May be SqlString.Null</LI>
		///		 <LI>Balance. May be SqlInt32.Null</LI>
		///		 <LI>Discount. May be SqlInt32.Null</LI>
		///		 <LI>Parent_id. May be SqlString.Null</LI>
		///		 <LI>Tax_agent. May be SqlString.Null</LI>
		///		 <LI>Tax_code_desc. May be SqlString.Null</LI>
		///		 <LI>Payment_term_desc. May be SqlString.Null</LI>
		///		 <LI>Expr1</LI>
		///		 <LI>Mr. May be SqlString.Null</LI>
		///		 <LI>FirstName. May be SqlString.Null</LI>
		///		 <LI>MiddleName. May be SqlString.Null</LI>
		///		 <LI>LastName. May be SqlString.Null</LI>
		///		 <LI>EmailName. May be SqlString.Null</LI>
		///		 <LI>ContactName. May be SqlString.Null</LI>
		///		 <LI>CompanyName. May be SqlString.Null</LI>
		///		 <LI>Alt_contact. May be SqlString.Null</LI>
		///		 <LI>Address1. May be SqlString.Null</LI>
		///		 <LI>Address2. May be SqlString.Null</LI>
		///		 <LI>City. May be SqlString.Null</LI>
		///		 <LI>Province. May be SqlString.Null</LI>
		///		 <LI>Zip. May be SqlString.Null</LI>
		///		 <LI>Country. May be SqlString.Null</LI>
		///		 <LI>Phone1. May be SqlString.Null</LI>
		///		 <LI>Phone2. May be SqlString.Null</LI>
		///		 <LI>Fax1. May be SqlString.Null</LI>
		///		 <LI>Fax2. May be SqlString.Null</LI>
		///		 <LI>Cell1. May be SqlString.Null</LI>
		///		 <LI>Cell2. May be SqlString.Null</LI>
		///		 <LI>Email2. May be SqlString.Null</LI>
		///		 <LI>Email3. May be SqlString.Null</LI>
		///		 <LI>Email1. May be SqlString.Null</LI>
		///		 <LI>Website. May be SqlString.Null</LI>
		///		 <LI>Notes. May be SqlString.Null</LI>
		///		 <LI>ContactGroupID. May be SqlInt32.Null</LI>
		///		 <LI>SubscribeNews. May be SqlBoolean.Null</LI>
		///		 <LI>ViewStatus. May be SqlBoolean.Null</LI>
		///		 <LI>UserID. May be SqlString.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Insert(SqlCommand scmCmdToExecute)
		{
			scmCmdToExecute.Parameters.Clear();
			scmCmdToExecute.CommandText = "dbo.[pr_TestView_Insert]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sPayment_term_id", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sPayment_term_id));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sTax_code_id", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sTax_code_id));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sAccountName", SqlDbType.NVarChar, -1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sAccountName));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iAccount_number", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iAccount_number));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iCredit_limit", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iCredit_limit));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sCurrency", SqlDbType.NVarChar, 3, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sCurrency));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iBalance", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iBalance));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iDiscount", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iDiscount));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sParent_id", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sParent_id));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sTax_agent", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sTax_agent));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sTax_code_desc", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sTax_code_desc));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sPayment_term_desc", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sPayment_term_desc));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sExpr1", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sExpr1));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sMr", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sMr));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sFirstName", SqlDbType.NVarChar, -1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sFirstName));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sMiddleName", SqlDbType.NVarChar, -1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sMiddleName));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sLastName", SqlDbType.NVarChar, -1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sLastName));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sEmailName", SqlDbType.NVarChar, -1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sEmailName));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sContactName", SqlDbType.NVarChar, -1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sContactName));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sCompanyName", SqlDbType.NVarChar, -1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sCompanyName));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sAlt_contact", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sAlt_contact));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sAddress1", SqlDbType.NVarChar, -1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sAddress1));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sAddress2", SqlDbType.NVarChar, -1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sAddress2));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sCity", SqlDbType.NVarChar, -1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sCity));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sProvince", SqlDbType.NVarChar, -1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sProvince));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sZip", SqlDbType.Char, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sZip));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sCountry", SqlDbType.NVarChar, -1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sCountry));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sPhone1", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sPhone1));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sPhone2", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sPhone2));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sFax1", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sFax1));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sFax2", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sFax2));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sCell1", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sCell1));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sCell2", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sCell2));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sEmail2", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sEmail2));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sEmail3", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sEmail3));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sEmail1", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sEmail1));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sWebsite", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sWebsite));
				int	iLength = 0;
				if(!m_sNotes.IsNull)
				{
					iLength = m_sNotes.Value.Length;
				}
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sNotes", SqlDbType.NText, iLength, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sNotes));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iContactGroupID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iContactGroupID));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@bSubscribeNews", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bSubscribeNews));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@bViewStatus", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bViewStatus));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sUserID", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sUserID));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_TestView_Insert' reported the ErrorCode: " + m_iErrorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TestView::Insert::Error occured.", ex);
			}
			finally
			{
			}
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the view.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override DataTable SelectAll()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_TestView_SelectAll]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable dtToReturn = new DataTable("TestView");
			SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				sdaAdapter.Fill(dtToReturn);
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_TestView_SelectAll' reported the ErrorCode: " + m_iErrorCode);
				}

				return dtToReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TestView::SelectAll::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
				sdaAdapter.Dispose();
			}
		}


		#region Class Property Declarations
		public SqlString Payment_term_id
		{
			get
			{
				return m_sPayment_term_id;
			}
			set
			{
				m_sPayment_term_id = value;
			}
		}


		public SqlString Tax_code_id
		{
			get
			{
				return m_sTax_code_id;
			}
			set
			{
				m_sTax_code_id = value;
			}
		}


		public SqlString AccountName
		{
			get
			{
				return m_sAccountName;
			}
			set
			{
				m_sAccountName = value;
			}
		}


		public SqlInt32 Account_number
		{
			get
			{
				return m_iAccount_number;
			}
			set
			{
				m_iAccount_number = value;
			}
		}


		public SqlInt32 Credit_limit
		{
			get
			{
				return m_iCredit_limit;
			}
			set
			{
				m_iCredit_limit = value;
			}
		}


		public SqlString Currency
		{
			get
			{
				return m_sCurrency;
			}
			set
			{
				m_sCurrency = value;
			}
		}


		public SqlInt32 Balance
		{
			get
			{
				return m_iBalance;
			}
			set
			{
				m_iBalance = value;
			}
		}


		public SqlInt32 Discount
		{
			get
			{
				return m_iDiscount;
			}
			set
			{
				m_iDiscount = value;
			}
		}


		public SqlString Parent_id
		{
			get
			{
				return m_sParent_id;
			}
			set
			{
				m_sParent_id = value;
			}
		}


		public SqlString Tax_agent
		{
			get
			{
				return m_sTax_agent;
			}
			set
			{
				m_sTax_agent = value;
			}
		}


		public SqlString Tax_code_desc
		{
			get
			{
				return m_sTax_code_desc;
			}
			set
			{
				m_sTax_code_desc = value;
			}
		}


		public SqlString Payment_term_desc
		{
			get
			{
				return m_sPayment_term_desc;
			}
			set
			{
				m_sPayment_term_desc = value;
			}
		}


		public SqlString Expr1
		{
			get
			{
				return m_sExpr1;
			}
			set
			{
				SqlString sExpr1Tmp = (SqlString)value;
				if(sExpr1Tmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("expr1", "expr1 can't be NULL");
				}
				m_sExpr1 = value;
			}
		}


		public SqlString Mr
		{
			get
			{
				return m_sMr;
			}
			set
			{
				m_sMr = value;
			}
		}


		public SqlString FirstName
		{
			get
			{
				return m_sFirstName;
			}
			set
			{
				m_sFirstName = value;
			}
		}


		public SqlString MiddleName
		{
			get
			{
				return m_sMiddleName;
			}
			set
			{
				m_sMiddleName = value;
			}
		}


		public SqlString LastName
		{
			get
			{
				return m_sLastName;
			}
			set
			{
				m_sLastName = value;
			}
		}


		public SqlString EmailName
		{
			get
			{
				return m_sEmailName;
			}
			set
			{
				m_sEmailName = value;
			}
		}


		public SqlString ContactName
		{
			get
			{
				return m_sContactName;
			}
			set
			{
				m_sContactName = value;
			}
		}


		public SqlString CompanyName
		{
			get
			{
				return m_sCompanyName;
			}
			set
			{
				m_sCompanyName = value;
			}
		}


		public SqlString Alt_contact
		{
			get
			{
				return m_sAlt_contact;
			}
			set
			{
				m_sAlt_contact = value;
			}
		}


		public SqlString Address1
		{
			get
			{
				return m_sAddress1;
			}
			set
			{
				m_sAddress1 = value;
			}
		}


		public SqlString Address2
		{
			get
			{
				return m_sAddress2;
			}
			set
			{
				m_sAddress2 = value;
			}
		}


		public SqlString City
		{
			get
			{
				return m_sCity;
			}
			set
			{
				m_sCity = value;
			}
		}


		public SqlString Province
		{
			get
			{
				return m_sProvince;
			}
			set
			{
				m_sProvince = value;
			}
		}


		public SqlString Zip
		{
			get
			{
				return m_sZip;
			}
			set
			{
				m_sZip = value;
			}
		}


		public SqlString Country
		{
			get
			{
				return m_sCountry;
			}
			set
			{
				m_sCountry = value;
			}
		}


		public SqlString Phone1
		{
			get
			{
				return m_sPhone1;
			}
			set
			{
				m_sPhone1 = value;
			}
		}


		public SqlString Phone2
		{
			get
			{
				return m_sPhone2;
			}
			set
			{
				m_sPhone2 = value;
			}
		}


		public SqlString Fax1
		{
			get
			{
				return m_sFax1;
			}
			set
			{
				m_sFax1 = value;
			}
		}


		public SqlString Fax2
		{
			get
			{
				return m_sFax2;
			}
			set
			{
				m_sFax2 = value;
			}
		}


		public SqlString Cell1
		{
			get
			{
				return m_sCell1;
			}
			set
			{
				m_sCell1 = value;
			}
		}


		public SqlString Cell2
		{
			get
			{
				return m_sCell2;
			}
			set
			{
				m_sCell2 = value;
			}
		}


		public SqlString Email2
		{
			get
			{
				return m_sEmail2;
			}
			set
			{
				m_sEmail2 = value;
			}
		}


		public SqlString Email3
		{
			get
			{
				return m_sEmail3;
			}
			set
			{
				m_sEmail3 = value;
			}
		}


		public SqlString Email1
		{
			get
			{
				return m_sEmail1;
			}
			set
			{
				m_sEmail1 = value;
			}
		}


		public SqlString Website
		{
			get
			{
				return m_sWebsite;
			}
			set
			{
				m_sWebsite = value;
			}
		}


		public SqlString Notes
		{
			get
			{
				return m_sNotes;
			}
			set
			{
				m_sNotes = value;
			}
		}


		public SqlInt32 ContactGroupID
		{
			get
			{
				return m_iContactGroupID;
			}
			set
			{
				m_iContactGroupID = value;
			}
		}


		public SqlBoolean SubscribeNews
		{
			get
			{
				return m_bSubscribeNews;
			}
			set
			{
				m_bSubscribeNews = value;
			}
		}


		public SqlBoolean ViewStatus
		{
			get
			{
				return m_bViewStatus;
			}
			set
			{
				m_bViewStatus = value;
			}
		}


		public SqlString UserID
		{
			get
			{
				return m_sUserID;
			}
			set
			{
				m_sUserID = value;
			}
		}
		#endregion
	}
}
