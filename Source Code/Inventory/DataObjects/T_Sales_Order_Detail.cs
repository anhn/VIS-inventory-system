///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 't_Sales_Order_Detail'
// Generated by LLBLGen v1.2.2690.36218 Final on: Monday, May 14, 2007, 8:07:35 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace Inventory.DataObjects
{
	/// <summary>
	/// Purpose: Data Access class for the table 't_Sales_Order_Detail'.
	/// </summary>
	public class T_Sales_Order_Detail : DBInteractionBase
	{
		#region Class Member Declarations
			private SqlBoolean		m_bViewStatus;
			private SqlDecimal		m_dcTotalAmount, m_dcDiscountPer, m_dcOSAmount, m_dcSettleAmount, m_dcDiscountPrice, m_dcUnitPrice;
			private SqlString		m_sInvoiceNo, m_sSONo, m_sSOLineNo, m_sQty, m_sProductID;
		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public T_Sales_Order_Detail()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>SONo</LI>
		///		 <LI>SOLineNo</LI>
		///		 <LI>ProductID. May be SqlString.Null</LI>
		///		 <LI>Qty. May be SqlString.Null</LI>
		///		 <LI>UnitPrice. May be SqlDecimal.Null</LI>
		///		 <LI>DiscountPrice. May be SqlDecimal.Null</LI>
		///		 <LI>DiscountPer. May be SqlDecimal.Null</LI>
		///		 <LI>TotalAmount. May be SqlDecimal.Null</LI>
		///		 <LI>SettleAmount. May be SqlDecimal.Null</LI>
		///		 <LI>OSAmount. May be SqlDecimal.Null</LI>
		///		 <LI>InvoiceNo. May be SqlString.Null</LI>
		///		 <LI>ViewStatus. May be SqlBoolean.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Insert(SqlCommand scmCmdToExecute)
		{
			scmCmdToExecute.Parameters.Clear();
			scmCmdToExecute.CommandText = "dbo.[pr_t_Sales_Order_Detail_Insert]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sSONo", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sSONo));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sSOLineNo", SqlDbType.NVarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sSOLineNo));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sProductID", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sProductID));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sQty", SqlDbType.NVarChar, -1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sQty));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@dcUnitPrice", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 2, "", DataRowVersion.Proposed, m_dcUnitPrice));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@dcDiscountPrice", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 2, "", DataRowVersion.Proposed, m_dcDiscountPrice));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@dcDiscountPer", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 2, "", DataRowVersion.Proposed, m_dcDiscountPer));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@dcTotalAmount", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 2, "", DataRowVersion.Proposed, m_dcTotalAmount));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@dcSettleAmount", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 2, "", DataRowVersion.Proposed, m_dcSettleAmount));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@dcOSAmount", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 2, "", DataRowVersion.Proposed, m_dcOSAmount));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sInvoiceNo", SqlDbType.NVarChar, -1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sInvoiceNo));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@bViewStatus", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bViewStatus));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_t_Sales_Order_Detail_Insert' reported the ErrorCode: " + m_iErrorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("T_Sales_Order_Detail::Insert::Error occured.", ex);
			}
			finally
			{
			}
		}


		/// <summary>
		/// Purpose: Update method. This method will Update one existing row in the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>SONo</LI>
		///		 <LI>SOLineNo</LI>
		///		 <LI>ProductID. May be SqlString.Null</LI>
		///		 <LI>Qty. May be SqlString.Null</LI>
		///		 <LI>UnitPrice. May be SqlDecimal.Null</LI>
		///		 <LI>DiscountPrice. May be SqlDecimal.Null</LI>
		///		 <LI>DiscountPer. May be SqlDecimal.Null</LI>
		///		 <LI>TotalAmount. May be SqlDecimal.Null</LI>
		///		 <LI>SettleAmount. May be SqlDecimal.Null</LI>
		///		 <LI>OSAmount. May be SqlDecimal.Null</LI>
		///		 <LI>InvoiceNo. May be SqlString.Null</LI>
		///		 <LI>ViewStatus. May be SqlBoolean.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Update(SqlCommand scmCmdToExecute)
		{
			scmCmdToExecute.Parameters.Clear();
			scmCmdToExecute.CommandText = "dbo.[pr_t_Sales_Order_Detail_Update]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sSONo", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sSONo));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sSOLineNo", SqlDbType.NVarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sSOLineNo));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sProductID", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sProductID));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sQty", SqlDbType.NVarChar, -1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sQty));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@dcUnitPrice", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 2, "", DataRowVersion.Proposed, m_dcUnitPrice));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@dcDiscountPrice", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 2, "", DataRowVersion.Proposed, m_dcDiscountPrice));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@dcDiscountPer", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 2, "", DataRowVersion.Proposed, m_dcDiscountPer));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@dcTotalAmount", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 2, "", DataRowVersion.Proposed, m_dcTotalAmount));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@dcSettleAmount", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 2, "", DataRowVersion.Proposed, m_dcSettleAmount));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@dcOSAmount", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 2, "", DataRowVersion.Proposed, m_dcOSAmount));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sInvoiceNo", SqlDbType.NVarChar, -1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sInvoiceNo));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@bViewStatus", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bViewStatus));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_t_Sales_Order_Detail_Update' reported the ErrorCode: " + m_iErrorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("T_Sales_Order_Detail::Update::Error occured.", ex);
			}
			finally
			{
			}
		}


		/// <summary>
		/// Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>SONo</LI>
		///		 <LI>SOLineNo</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Delete(SqlCommand scmCmdToExecute)
		{
			scmCmdToExecute.Parameters.Clear();
			scmCmdToExecute.CommandText = "dbo.[pr_t_Sales_Order_Detail_Delete]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sSONo", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sSONo));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sSOLineNo", SqlDbType.NVarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sSOLineNo));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_t_Sales_Order_Detail_Delete' reported the ErrorCode: " + m_iErrorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("T_Sales_Order_Detail::Delete::Error occured.", ex);
			}
			finally
			{
			}
		}


		/// <summary>
		/// Purpose: Delete method using PK field 'SONo'. This method will 
		/// delete one or more rows from the database, based on the Primary Key field 'SONo'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>SONo</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteWSONoLogic()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_t_Sales_Order_Detail_DeleteWSONoLogic]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sSONo", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sSONo));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 36, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_t_Sales_Order_Detail_DeleteWSONoLogic' reported the ErrorCode: " + m_iErrorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("T_Sales_Order_Detail::DeleteWSONoLogic::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method using PK field 'SOLineNo'. This method will 
		/// delete one or more rows from the database, based on the Primary Key field 'SOLineNo'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>SOLineNo</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteWSOLineNoLogic()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_t_Sales_Order_Detail_DeleteWSOLineNoLogic]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sSOLineNo", SqlDbType.NVarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sSOLineNo));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 36, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_t_Sales_Order_Detail_DeleteWSOLineNoLogic' reported the ErrorCode: " + m_iErrorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("T_Sales_Order_Detail::DeleteWSOLineNoLogic::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>SONo</LI>
		///		 <LI>SOLineNo</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		///		 <LI>SONo</LI>
		///		 <LI>SOLineNo</LI>
		///		 <LI>ProductID</LI>
		///		 <LI>Qty</LI>
		///		 <LI>UnitPrice</LI>
		///		 <LI>DiscountPrice</LI>
		///		 <LI>DiscountPer</LI>
		///		 <LI>TotalAmount</LI>
		///		 <LI>SettleAmount</LI>
		///		 <LI>OSAmount</LI>
		///		 <LI>InvoiceNo</LI>
		///		 <LI>ViewStatus</LI>
		/// </UL>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public override DataTable SelectOne()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_t_Sales_Order_Detail_SelectOne]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable dtToReturn = new DataTable("t_Sales_Order_Detail");
			SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sSONo", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sSONo));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sSOLineNo", SqlDbType.NVarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sSOLineNo));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				sdaAdapter.Fill(dtToReturn);
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_t_Sales_Order_Detail_SelectOne' reported the ErrorCode: " + m_iErrorCode);
				}

				if(dtToReturn.Rows.Count > 0)
				{
					m_sSONo = (string)dtToReturn.Rows[0]["SONo"];
					m_sSOLineNo = (string)dtToReturn.Rows[0]["SOLineNo"];
					m_sProductID = dtToReturn.Rows[0]["ProductID"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["ProductID"];
					m_sQty = dtToReturn.Rows[0]["Qty"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["Qty"];
					m_dcUnitPrice = dtToReturn.Rows[0]["UnitPrice"] == System.DBNull.Value ? SqlDecimal.Null : (Decimal)dtToReturn.Rows[0]["UnitPrice"];
					m_dcDiscountPrice = dtToReturn.Rows[0]["DiscountPrice"] == System.DBNull.Value ? SqlDecimal.Null : (Decimal)dtToReturn.Rows[0]["DiscountPrice"];
					m_dcDiscountPer = dtToReturn.Rows[0]["DiscountPer"] == System.DBNull.Value ? SqlDecimal.Null : (Decimal)dtToReturn.Rows[0]["DiscountPer"];
					m_dcTotalAmount = dtToReturn.Rows[0]["TotalAmount"] == System.DBNull.Value ? SqlDecimal.Null : (Decimal)dtToReturn.Rows[0]["TotalAmount"];
					m_dcSettleAmount = dtToReturn.Rows[0]["SettleAmount"] == System.DBNull.Value ? SqlDecimal.Null : (Decimal)dtToReturn.Rows[0]["SettleAmount"];
					m_dcOSAmount = dtToReturn.Rows[0]["OSAmount"] == System.DBNull.Value ? SqlDecimal.Null : (Decimal)dtToReturn.Rows[0]["OSAmount"];
					m_sInvoiceNo = dtToReturn.Rows[0]["InvoiceNo"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["InvoiceNo"];
					m_bViewStatus = dtToReturn.Rows[0]["ViewStatus"] == System.DBNull.Value ? SqlBoolean.Null : (bool)dtToReturn.Rows[0]["ViewStatus"];
				}
				return dtToReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("T_Sales_Order_Detail::SelectOne::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
				sdaAdapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override DataTable SelectAll()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_t_Sales_Order_Detail_SelectAll]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable dtToReturn = new DataTable("t_Sales_Order_Detail");
			SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				sdaAdapter.Fill(dtToReturn);
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_t_Sales_Order_Detail_SelectAll' reported the ErrorCode: " + m_iErrorCode);
				}

				return dtToReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("T_Sales_Order_Detail::SelectAll::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
				sdaAdapter.Dispose();
			}
		}


		#region Class Property Declarations
		public SqlString SONo
		{
			get
			{
				return m_sSONo;
			}
			set
			{
				SqlString sSONoTmp = (SqlString)value;
				if(sSONoTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("sONo", "sONo can't be NULL");
				}
				m_sSONo = value;
			}
		}


		public SqlString SOLineNo
		{
			get
			{
				return m_sSOLineNo;
			}
			set
			{
				SqlString sSOLineNoTmp = (SqlString)value;
				if(sSOLineNoTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("sOLineNo", "sOLineNo can't be NULL");
				}
				m_sSOLineNo = value;
			}
		}


		public SqlString ProductID
		{
			get
			{
				return m_sProductID;
			}
			set
			{
				m_sProductID = value;
			}
		}


		public SqlString Qty
		{
			get
			{
				return m_sQty;
			}
			set
			{
				m_sQty = value;
			}
		}


		public SqlDecimal UnitPrice
		{
			get
			{
				return m_dcUnitPrice;
			}
			set
			{
				m_dcUnitPrice = value;
			}
		}


		public SqlDecimal DiscountPrice
		{
			get
			{
				return m_dcDiscountPrice;
			}
			set
			{
				m_dcDiscountPrice = value;
			}
		}


		public SqlDecimal DiscountPer
		{
			get
			{
				return m_dcDiscountPer;
			}
			set
			{
				m_dcDiscountPer = value;
			}
		}


		public SqlDecimal TotalAmount
		{
			get
			{
				return m_dcTotalAmount;
			}
			set
			{
				m_dcTotalAmount = value;
			}
		}


		public SqlDecimal SettleAmount
		{
			get
			{
				return m_dcSettleAmount;
			}
			set
			{
				m_dcSettleAmount = value;
			}
		}


		public SqlDecimal OSAmount
		{
			get
			{
				return m_dcOSAmount;
			}
			set
			{
				m_dcOSAmount = value;
			}
		}


		public SqlString InvoiceNo
		{
			get
			{
				return m_sInvoiceNo;
			}
			set
			{
				m_sInvoiceNo = value;
			}
		}


		public SqlBoolean ViewStatus
		{
			get
			{
				return m_bViewStatus;
			}
			set
			{
				m_bViewStatus = value;
			}
		}
		#endregion
	}
}
