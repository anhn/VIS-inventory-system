///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'PickingListMaster'
// Generated by LLBLGen v1.2.2690.36218 Final on: Monday, May 14, 2007, 8:07:34 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace Inventory.DataObjects
{
	/// <summary>
	/// Purpose: Data Access class for the table 'PickingListMaster'.
	/// </summary>
	public class PickingListMaster : DBInteractionBase
	{
		#region Class Member Declarations
			private SqlBoolean		m_bViewStatus;
			private SqlDateTime		m_daDateCreated, m_daLastUpdatedDate;
			private SqlString		m_sOtherDestLocation, m_sNotes, m_sUserID, m_sPickingName, m_sPickingListID, m_sReferenceNo, m_sDestDepartment, m_sDestLocation;
		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public PickingListMaster()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>PickingListID</LI>
		///		 <LI>PickingName. May be SqlString.Null</LI>
		///		 <LI>ReferenceNo. May be SqlString.Null</LI>
		///		 <LI>DateCreated. May be SqlDateTime.Null</LI>
		///		 <LI>DestLocation. May be SqlString.Null</LI>
		///		 <LI>DestDepartment. May be SqlString.Null</LI>
		///		 <LI>OtherDestLocation. May be SqlString.Null</LI>
		///		 <LI>Notes. May be SqlString.Null</LI>
		///		 <LI>ViewStatus. May be SqlBoolean.Null</LI>
		///		 <LI>UserID. May be SqlString.Null</LI>
		///		 <LI>LastUpdatedDate. May be SqlDateTime.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Insert(SqlCommand scmCmdToExecute)
		{
            this.PickingListID = Guid.NewGuid().ToString();
			scmCmdToExecute.Parameters.Clear();
			scmCmdToExecute.CommandText = "dbo.[pr_PickingListMaster_Insert]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sPickingListID", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sPickingListID));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sPickingName", SqlDbType.NVarChar, -1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sPickingName));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sReferenceNo", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sReferenceNo));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@daDateCreated", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daDateCreated));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sDestLocation", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sDestLocation));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sDestDepartment", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sDestDepartment));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sOtherDestLocation", SqlDbType.VarChar, -1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sOtherDestLocation));
				int	iLength = 0;
				if(!m_sNotes.IsNull)
				{
					iLength = m_sNotes.Value.Length;
				}
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sNotes", SqlDbType.NText, iLength, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sNotes));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@bViewStatus", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bViewStatus));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sUserID", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sUserID));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@daLastUpdatedDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daLastUpdatedDate));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_PickingListMaster_Insert' reported the ErrorCode: " + m_iErrorCode);
				}

				return true;
			}

            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("PickingListMaster::Insert::Error occured.", ex);
            }
		}


		/// <summary>
		/// Purpose: Update method. This method will Update one existing row in the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>PickingListID</LI>
		///		 <LI>PickingName. May be SqlString.Null</LI>
		///		 <LI>ReferenceNo. May be SqlString.Null</LI>
		///		 <LI>DateCreated. May be SqlDateTime.Null</LI>
		///		 <LI>DestLocation. May be SqlString.Null</LI>
		///		 <LI>DestDepartment. May be SqlString.Null</LI>
		///		 <LI>OtherDestLocation. May be SqlString.Null</LI>
		///		 <LI>Notes. May be SqlString.Null</LI>
		///		 <LI>ViewStatus. May be SqlBoolean.Null</LI>
		///		 <LI>UserID. May be SqlString.Null</LI>
		///		 <LI>LastUpdatedDate. May be SqlDateTime.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Update(SqlCommand scmCmdToExecute)
		{
			scmCmdToExecute.Parameters.Clear();
			scmCmdToExecute.CommandText = "dbo.[pr_PickingListMaster_Update]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sPickingListID", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sPickingListID));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sPickingName", SqlDbType.NVarChar, -1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sPickingName));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sReferenceNo", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sReferenceNo));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@daDateCreated", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daDateCreated));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sDestLocation", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sDestLocation));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sDestDepartment", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sDestDepartment));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sOtherDestLocation", SqlDbType.VarChar, -1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sOtherDestLocation));
				int	iLength = 0;
				if(!m_sNotes.IsNull)
				{
					iLength = m_sNotes.Value.Length;
				}
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sNotes", SqlDbType.NText, iLength, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sNotes));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@bViewStatus", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bViewStatus));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sUserID", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sUserID));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@daLastUpdatedDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daLastUpdatedDate));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_PickingListMaster_Update' reported the ErrorCode: " + m_iErrorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("PickingListMaster::Update::Error occured.", ex);
			}

		}


		/// <summary>
		/// Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>PickingListID</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Delete(SqlCommand scmCmdToExecute)
		{
			scmCmdToExecute.Parameters.Clear();
			scmCmdToExecute.CommandText = "dbo.[pr_PickingListMaster_Delete]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sPickingListID", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sPickingListID));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_PickingListMaster_Delete' reported the ErrorCode: " + m_iErrorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("PickingListMaster::Delete::Error occured.", ex);
			}
			finally
			{
			}
		}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>PickingListID</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		///		 <LI>PickingListID</LI>
		///		 <LI>PickingName</LI>
		///		 <LI>ReferenceNo</LI>
		///		 <LI>DateCreated</LI>
		///		 <LI>DestLocation</LI>
		///		 <LI>DestDepartment</LI>
		///		 <LI>OtherDestLocation</LI>
		///		 <LI>Notes</LI>
		///		 <LI>ViewStatus</LI>
		///		 <LI>UserID</LI>
		///		 <LI>LastUpdatedDate</LI>
		/// </UL>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public override DataTable SelectOne()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_PickingListMaster_SelectOne]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable dtToReturn = new DataTable("PickingListMaster");
			SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sPickingListID", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sPickingListID));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				sdaAdapter.Fill(dtToReturn);
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_PickingListMaster_SelectOne' reported the ErrorCode: " + m_iErrorCode);
				}

				if(dtToReturn.Rows.Count > 0)
				{
					m_sPickingListID = (string)dtToReturn.Rows[0]["PickingListID"];
					m_sPickingName = dtToReturn.Rows[0]["PickingName"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["PickingName"];
					m_sReferenceNo = dtToReturn.Rows[0]["ReferenceNo"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["ReferenceNo"];
					m_daDateCreated = dtToReturn.Rows[0]["DateCreated"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)dtToReturn.Rows[0]["DateCreated"];
					m_sDestLocation = dtToReturn.Rows[0]["DestLocation"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["DestLocation"];
					m_sDestDepartment = dtToReturn.Rows[0]["DestDepartment"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["DestDepartment"];
					m_sOtherDestLocation = dtToReturn.Rows[0]["OtherDestLocation"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["OtherDestLocation"];
					m_sNotes = dtToReturn.Rows[0]["Notes"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["Notes"];
					m_bViewStatus = dtToReturn.Rows[0]["ViewStatus"] == System.DBNull.Value ? SqlBoolean.Null : (bool)dtToReturn.Rows[0]["ViewStatus"];
					m_sUserID = dtToReturn.Rows[0]["UserID"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["UserID"];
					m_daLastUpdatedDate = dtToReturn.Rows[0]["LastUpdatedDate"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)dtToReturn.Rows[0]["LastUpdatedDate"];
				}
				return dtToReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("PickingListMaster::SelectOne::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
				sdaAdapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override DataTable SelectAll()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_PickingListMaster_SelectAll]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable dtToReturn = new DataTable("PickingListMaster");
			SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				sdaAdapter.Fill(dtToReturn);
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_PickingListMaster_SelectAll' reported the ErrorCode: " + m_iErrorCode);
				}

				return dtToReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("PickingListMaster::SelectAll::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
				sdaAdapter.Dispose();
			}
		}


		#region Class Property Declarations
		public SqlString PickingListID
		{
			get
			{
				return m_sPickingListID;
			}
			set
			{
				SqlString sPickingListIDTmp = (SqlString)value;
				if(sPickingListIDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("pickingListID", "pickingListID can't be NULL");
				}
				m_sPickingListID = value;
			}
		}


		public SqlString PickingName
		{
			get
			{
				return m_sPickingName;
			}
			set
			{
				m_sPickingName = value;
			}
		}


		public SqlString ReferenceNo
		{
			get
			{
				return m_sReferenceNo;
			}
			set
			{
				m_sReferenceNo = value;
			}
		}


		public SqlDateTime DateCreated
		{
			get
			{
				return m_daDateCreated;
			}
			set
			{
				m_daDateCreated = value;
			}
		}


		public SqlString DestLocation
		{
			get
			{
				return m_sDestLocation;
			}
			set
			{
				m_sDestLocation = value;
			}
		}


		public SqlString DestDepartment
		{
			get
			{
				return m_sDestDepartment;
			}
			set
			{
				m_sDestDepartment = value;
			}
		}


		public SqlString OtherDestLocation
		{
			get
			{
				return m_sOtherDestLocation;
			}
			set
			{
				m_sOtherDestLocation = value;
			}
		}


		public SqlString Notes
		{
			get
			{
				return m_sNotes;
			}
			set
			{
				m_sNotes = value;
			}
		}


		public SqlBoolean ViewStatus
		{
			get
			{
				return m_bViewStatus;
			}
			set
			{
				m_bViewStatus = value;
			}
		}


		public SqlString UserID
		{
			get
			{
				return m_sUserID;
			}
			set
			{
				m_sUserID = value;
			}
		}


		public SqlDateTime LastUpdatedDate
		{
			get
			{
				return m_daLastUpdatedDate;
			}
			set
			{
				m_daLastUpdatedDate = value;
			}
		}
		#endregion
	}
}
