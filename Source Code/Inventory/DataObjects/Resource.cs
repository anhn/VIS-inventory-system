///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'Resource'
// Generated by LLBLGen v1.2.2690.36218 Final on: Monday, May 14, 2007, 8:07:35 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace Inventory.DataObjects
{
	/// <summary>
	/// Purpose: Data Access class for the table 'Resource'.
	/// </summary>
	public class Resource : DBInteractionBase
	{
		#region Class Member Declarations
			private SqlString		m_sLanguage2, m_sLanguage1, m_sLanguage4, m_sLanguage3, m_sModuleID, m_sResourceID, m_sResourceSubName, m_sResourceName;
		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public Resource()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ResourceID</LI>
		///		 <LI>ModuleID. May be SqlString.Null</LI>
		///		 <LI>ResourceName. May be SqlString.Null</LI>
		///		 <LI>ResourceSubName. May be SqlString.Null</LI>
		///		 <LI>Language1. May be SqlString.Null</LI>
		///		 <LI>Language2. May be SqlString.Null</LI>
		///		 <LI>Language3. May be SqlString.Null</LI>
		///		 <LI>Language4. May be SqlString.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Insert(SqlCommand scmCmdToExecute)
		{
			scmCmdToExecute.Parameters.Clear();
			scmCmdToExecute.CommandText = "dbo.[pr_Resource_Insert]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sResourceID", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sResourceID));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sModuleID", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sModuleID));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sResourceName", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sResourceName));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sResourceSubName", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sResourceSubName));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sLanguage1", SqlDbType.NVarChar, -1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sLanguage1));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sLanguage2", SqlDbType.NVarChar, -1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sLanguage2));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sLanguage3", SqlDbType.NVarChar, -1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sLanguage3));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sLanguage4", SqlDbType.NVarChar, -1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sLanguage4));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_Resource_Insert' reported the ErrorCode: " + m_iErrorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("Resource::Insert::Error occured.", ex);
			}
			finally
			{
			}
		}


		/// <summary>
		/// Purpose: Update method. This method will Update one existing row in the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ResourceID</LI>
		///		 <LI>ModuleID. May be SqlString.Null</LI>
		///		 <LI>ResourceName. May be SqlString.Null</LI>
		///		 <LI>ResourceSubName. May be SqlString.Null</LI>
		///		 <LI>Language1. May be SqlString.Null</LI>
		///		 <LI>Language2. May be SqlString.Null</LI>
		///		 <LI>Language3. May be SqlString.Null</LI>
		///		 <LI>Language4. May be SqlString.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Update(SqlCommand scmCmdToExecute)
		{
			scmCmdToExecute.Parameters.Clear();
			scmCmdToExecute.CommandText = "dbo.[pr_Resource_Update]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sResourceID", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sResourceID));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sModuleID", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sModuleID));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sResourceName", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sResourceName));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sResourceSubName", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sResourceSubName));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sLanguage1", SqlDbType.NVarChar, -1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sLanguage1));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sLanguage2", SqlDbType.NVarChar, -1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sLanguage2));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sLanguage3", SqlDbType.NVarChar, -1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sLanguage3));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sLanguage4", SqlDbType.NVarChar, -1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sLanguage4));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_Resource_Update' reported the ErrorCode: " + m_iErrorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("Resource::Update::Error occured.", ex);
			}
			finally
			{
			}
		}


		/// <summary>
		/// Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ResourceID</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Delete(SqlCommand scmCmdToExecute)
		{
			scmCmdToExecute.Parameters.Clear();
			scmCmdToExecute.CommandText = "dbo.[pr_Resource_Delete]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sResourceID", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sResourceID));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_Resource_Delete' reported the ErrorCode: " + m_iErrorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("Resource::Delete::Error occured.", ex);
			}
			finally
			{
			}
		}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ResourceID</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		///		 <LI>ResourceID</LI>
		///		 <LI>ModuleID</LI>
		///		 <LI>ResourceName</LI>
		///		 <LI>ResourceSubName</LI>
		///		 <LI>Language1</LI>
		///		 <LI>Language2</LI>
		///		 <LI>Language3</LI>
		///		 <LI>Language4</LI>
		/// </UL>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public override DataTable SelectOne()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_Resource_SelectOne]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable dtToReturn = new DataTable("Resource");
			SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sResourceID", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sResourceID));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				sdaAdapter.Fill(dtToReturn);
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_Resource_SelectOne' reported the ErrorCode: " + m_iErrorCode);
				}

				if(dtToReturn.Rows.Count > 0)
				{
					m_sResourceID = (string)dtToReturn.Rows[0]["ResourceID"];
					m_sModuleID = dtToReturn.Rows[0]["ModuleID"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["ModuleID"];
					m_sResourceName = dtToReturn.Rows[0]["ResourceName"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["ResourceName"];
					m_sResourceSubName = dtToReturn.Rows[0]["ResourceSubName"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["ResourceSubName"];
					m_sLanguage1 = dtToReturn.Rows[0]["Language1"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["Language1"];
					m_sLanguage2 = dtToReturn.Rows[0]["Language2"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["Language2"];
					m_sLanguage3 = dtToReturn.Rows[0]["Language3"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["Language3"];
					m_sLanguage4 = dtToReturn.Rows[0]["Language4"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["Language4"];
				}
				return dtToReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("Resource::SelectOne::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
				sdaAdapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override DataTable SelectAll()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_Resource_SelectAll]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable dtToReturn = new DataTable("Resource");
			SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				sdaAdapter.Fill(dtToReturn);
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_Resource_SelectAll' reported the ErrorCode: " + m_iErrorCode);
				}

				return dtToReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("Resource::SelectAll::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
				sdaAdapter.Dispose();
			}
		}


		#region Class Property Declarations
		public SqlString ResourceID
		{
			get
			{
				return m_sResourceID;
			}
			set
			{
				m_sResourceID = value;
			}
		}


		public SqlString ModuleID
		{
			get
			{
				return m_sModuleID;
			}
			set
			{
				m_sModuleID = value;
			}
		}


		public SqlString ResourceName
		{
			get
			{
				return m_sResourceName;
			}
			set
			{
				m_sResourceName = value;
			}
		}


		public SqlString ResourceSubName
		{
			get
			{
				return m_sResourceSubName;
			}
			set
			{
				m_sResourceSubName = value;
			}
		}


		public SqlString Language1
		{
			get
			{
				return m_sLanguage1;
			}
			set
			{
				m_sLanguage1 = value;
			}
		}


		public SqlString Language2
		{
			get
			{
				return m_sLanguage2;
			}
			set
			{
				m_sLanguage2 = value;
			}
		}


		public SqlString Language3
		{
			get
			{
				return m_sLanguage3;
			}
			set
			{
				m_sLanguage3 = value;
			}
		}


		public SqlString Language4
		{
			get
			{
				return m_sLanguage4;
			}
			set
			{
				m_sLanguage4 = value;
			}
		}
		#endregion
	}
}
