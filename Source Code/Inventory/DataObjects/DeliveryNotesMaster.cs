///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'DeliveryNotesMaster'
// Generated by LLBLGen v1.2.2690.36218 Final on: Saturday, May 19, 2007, 5:33:40 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace Inventory.DataObjects
{
    /// <summary>
    /// Purpose: Data Access class for the table 'DeliveryNotesMaster'.
    /// </summary>
    public class DeliveryNotesMaster : DBInteractionBase
    {
        #region Class Member Declarations
        private SqlBoolean m_bViewStatus;
        private SqlDateTime m_daDateCreated, m_daLastUpdatedDate;
        private SqlMoney m_curCost1, m_curCost2;
        private SqlString m_sCustomerID, m_sID, m_sAddress, m_sTypeOfDelivery, m_sNotes, m_sReferenceNo, m_sDeliveryMethodID, m_sDNID, m_sUserID, m_sUserIDOld;
        #endregion


        /// <summary>
        /// Purpose: Class constructor.
        /// </summary>
        public DeliveryNotesMaster()
        {
            // Nothing for now.
        }


        /// <summary>
        /// Purpose: Insert method. This method will insert one new row into the database.
        /// </summary>
        /// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
        /// <remarks>
        /// Properties needed for this method: 
        /// <UL>
        ///		 <LI>ID</LI>
        ///		 <LI>DNID. May be SqlString.Null</LI>
        ///		 <LI>DateCreated. May be SqlDateTime.Null</LI>
        ///		 <LI>ReferenceNo. May be SqlString.Null</LI>
        ///		 <LI>DeliveryMethodID. May be SqlString.Null</LI>
        ///		 <LI>Cost1. May be SqlMoney.Null</LI>
        ///		 <LI>Cost2. May be SqlMoney.Null</LI>
        ///		 <LI>UserID. May be SqlString.Null</LI>
        ///		 <LI>LastUpdatedDate. May be SqlDateTime.Null</LI>
        ///		 <LI>Notes. May be SqlString.Null</LI>
        ///		 <LI>ViewStatus. May be SqlBoolean.Null</LI>
        ///		 <LI>CustomerID. May be SqlString.Null</LI>
        ///		 <LI>TypeOfDelivery. May be SqlString.Null</LI>
        ///		 <LI>Address. May be SqlString.Null</LI>
        /// </UL>
        /// Properties set after a succesful call of this method: 
        /// <UL>
        ///		 <LI>ErrorCode</LI>
        /// </UL>
        /// </remarks>
        public override bool Insert(SqlCommand scmCmdToExecute)
        {
            this.ID = Guid.NewGuid().ToString();
            scmCmdToExecute.Parameters.Clear();
            scmCmdToExecute.CommandText = "dbo.[pr_DeliveryNotesMaster_Insert]";
            scmCmdToExecute.CommandType = CommandType.StoredProcedure;
            try
            {
                scmCmdToExecute.Parameters.Add(new SqlParameter("@sID", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sID));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@sDNID", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sDNID));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@daDateCreated", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daDateCreated));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@sReferenceNo", SqlDbType.VarChar, 100, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sReferenceNo));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@sDeliveryMethodID", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sDeliveryMethodID));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@curCost1", SqlDbType.Money, 8, ParameterDirection.Input, false, 19, 4, "", DataRowVersion.Proposed, m_curCost1));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@curCost2", SqlDbType.Money, 8, ParameterDirection.Input, false, 19, 4, "", DataRowVersion.Proposed, m_curCost2));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@sUserID", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sUserID));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@daLastUpdatedDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daLastUpdatedDate));
                int iLength = 0;
                if (!m_sNotes.IsNull)
                {
                    iLength = m_sNotes.Value.Length;
                }
                scmCmdToExecute.Parameters.Add(new SqlParameter("@sNotes", SqlDbType.NText, iLength, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sNotes));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@bViewStatus", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bViewStatus));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@sCustomerID", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sCustomerID));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@sTypeOfDelivery", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sTypeOfDelivery));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@sAddress", SqlDbType.VarChar, 100, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sAddress));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

                // Execute query.
                scmCmdToExecute.ExecuteNonQuery();
                m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

                if (m_iErrorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'pr_DeliveryNotesMaster_Insert' reported the ErrorCode: " + m_iErrorCode);
                }

                return true;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("DeliveryNotesMaster::Insert::Error occured.", ex);
            }
            finally
            {
            }
        }


        /// <summary>
        /// Purpose: Update method. This method will Update one existing row in the database.
        /// </summary>
        /// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
        /// <remarks>
        /// Properties needed for this method: 
        /// <UL>
        ///		 <LI>ID</LI>
        ///		 <LI>DNID. May be SqlString.Null</LI>
        ///		 <LI>DateCreated. May be SqlDateTime.Null</LI>
        ///		 <LI>ReferenceNo. May be SqlString.Null</LI>
        ///		 <LI>DeliveryMethodID. May be SqlString.Null</LI>
        ///		 <LI>Cost1. May be SqlMoney.Null</LI>
        ///		 <LI>Cost2. May be SqlMoney.Null</LI>
        ///		 <LI>UserID. May be SqlString.Null</LI>
        ///		 <LI>LastUpdatedDate. May be SqlDateTime.Null</LI>
        ///		 <LI>Notes. May be SqlString.Null</LI>
        ///		 <LI>ViewStatus. May be SqlBoolean.Null</LI>
        ///		 <LI>CustomerID. May be SqlString.Null</LI>
        ///		 <LI>TypeOfDelivery. May be SqlString.Null</LI>
        ///		 <LI>Address. May be SqlString.Null</LI>
        /// </UL>
        /// Properties set after a succesful call of this method: 
        /// <UL>
        ///		 <LI>ErrorCode</LI>
        /// </UL>
        /// </remarks>
        public override bool Update(SqlCommand scmCmdToExecute)
        {
            scmCmdToExecute.Parameters.Clear();
            scmCmdToExecute.CommandText = "dbo.[pr_DeliveryNotesMaster_Update]";
            scmCmdToExecute.CommandType = CommandType.StoredProcedure;
            try
            {
                scmCmdToExecute.Parameters.Add(new SqlParameter("@sID", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sID));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@sDNID", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sDNID));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@daDateCreated", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daDateCreated));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@sReferenceNo", SqlDbType.VarChar, 100, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sReferenceNo));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@sDeliveryMethodID", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sDeliveryMethodID));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@curCost1", SqlDbType.Money, 8, ParameterDirection.Input, false, 19, 4, "", DataRowVersion.Proposed, m_curCost1));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@curCost2", SqlDbType.Money, 8, ParameterDirection.Input, false, 19, 4, "", DataRowVersion.Proposed, m_curCost2));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@sUserID", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sUserID));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@daLastUpdatedDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daLastUpdatedDate));
                int iLength = 0;
                if (!m_sNotes.IsNull)
                {
                    iLength = m_sNotes.Value.Length;
                }
                scmCmdToExecute.Parameters.Add(new SqlParameter("@sNotes", SqlDbType.NText, iLength, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sNotes));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@bViewStatus", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bViewStatus));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@sCustomerID", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sCustomerID));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@sTypeOfDelivery", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sTypeOfDelivery));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@sAddress", SqlDbType.VarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sAddress));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

                // Execute query.
                scmCmdToExecute.ExecuteNonQuery();
                m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

                if (m_iErrorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'pr_DeliveryNotesMaster_Update' reported the ErrorCode: " + m_iErrorCode);
                }

                return true;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("DeliveryNotesMaster::Update::Error occured.", ex);
            }
            finally
            {
            }
        }


        /// <summary>
        /// Purpose: Update method for updating one or more rows using the Foreign Key 'UserID.
        /// This method will Update one or more existing rows in the database. It will reset the field 'UserID' in
        /// all rows which have as value for this field the value as set in property 'userIDOld' to 
        /// the value as set in property 'userID'.
        /// </summary>
        /// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
        /// <remarks>
        /// Properties needed for this method: 
        /// <UL>
        ///		 <LI>UserID. May be SqlString.Null</LI>
        ///		 <LI>UserIDOld. May be SqlString.Null</LI>
        /// </UL>
        /// Properties set after a succesful call of this method: 
        /// <UL>
        ///		 <LI>ErrorCode</LI>
        /// </UL>
        /// </remarks>
        public bool UpdateAllWUserIDLogic()
        {
            SqlCommand scmCmdToExecute = new SqlCommand();
            scmCmdToExecute.CommandText = "dbo.[pr_DeliveryNotesMaster_UpdateAllWUserIDLogic]";
            scmCmdToExecute.CommandType = CommandType.StoredProcedure;

            // Use base class' connection object
            scmCmdToExecute.Connection = m_scoMainConnection;

            try
            {
                scmCmdToExecute.Parameters.Add(new SqlParameter("@sUserID", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sUserID));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@sUserIDOld", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sUserIDOld));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 36, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

                // Open connection.
                m_scoMainConnection.Open();

                // Execute query.
                scmCmdToExecute.ExecuteNonQuery();
                m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

                if (m_iErrorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'pr_DeliveryNotesMaster_UpdateAllWUserIDLogic' reported the ErrorCode: " + m_iErrorCode);
                }

                return true;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("DeliveryNotesMaster::UpdateAllWUserIDLogic::Error occured.", ex);
            }
            finally
            {
                // Close connection.
                m_scoMainConnection.Close();
                scmCmdToExecute.Dispose();
            }
        }


        /// <summary>
        /// Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
        /// </summary>
        /// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
        /// <remarks>
        /// Properties needed for this method: 
        /// <UL>
        ///		 <LI>ID</LI>
        /// </UL>
        /// Properties set after a succesful call of this method: 
        /// <UL>
        ///		 <LI>ErrorCode</LI>
        /// </UL>
        /// </remarks>
        public override bool Delete(SqlCommand scmCmdToExecute)
        {
            scmCmdToExecute.Parameters.Clear();
            scmCmdToExecute.CommandText = "dbo.[pr_DeliveryNotesMaster_Delete]";
            scmCmdToExecute.CommandType = CommandType.StoredProcedure;
            try
            {
                scmCmdToExecute.Parameters.Add(new SqlParameter("@sID", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sID));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

                // Execute query.
                scmCmdToExecute.ExecuteNonQuery();
                m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

                if (m_iErrorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'pr_DeliveryNotesMaster_Delete' reported the ErrorCode: " + m_iErrorCode);
                }

                return true;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("DeliveryNotesMaster::Delete::Error occured.", ex);
            }
            finally
            {
            }
        }


        /// <summary>
        /// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
        /// </summary>
        /// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
        /// <remarks>
        /// Properties needed for this method: 
        /// <UL>
        ///		 <LI>ID</LI>
        /// </UL>
        /// Properties set after a succesful call of this method: 
        /// <UL>
        ///		 <LI>ErrorCode</LI>
        ///		 <LI>ID</LI>
        ///		 <LI>DNID</LI>
        ///		 <LI>DateCreated</LI>
        ///		 <LI>ReferenceNo</LI>
        ///		 <LI>DeliveryMethodID</LI>
        ///		 <LI>Cost1</LI>
        ///		 <LI>Cost2</LI>
        ///		 <LI>UserID</LI>
        ///		 <LI>LastUpdatedDate</LI>
        ///		 <LI>Notes</LI>
        ///		 <LI>ViewStatus</LI>
        ///		 <LI>CustomerID</LI>
        ///		 <LI>TypeOfDelivery</LI>
        ///		 <LI>Address</LI>
        /// </UL>
        /// Will fill all properties corresponding with a field in the table with the value of the row selected.
        /// </remarks>
        public override DataTable SelectOne()
        {
            SqlCommand scmCmdToExecute = new SqlCommand();
            scmCmdToExecute.CommandText = "dbo.[pr_DeliveryNotesMaster_SelectOne]";
            scmCmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable dtToReturn = new DataTable("DeliveryNotesMaster");
            SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

            // Use base class' connection object
            scmCmdToExecute.Connection = m_scoMainConnection;

            try
            {
                scmCmdToExecute.Parameters.Add(new SqlParameter("@sID", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sID));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

                // Open connection.
                m_scoMainConnection.Open();

                // Execute query.
                sdaAdapter.Fill(dtToReturn);
                m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

                if (m_iErrorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'pr_DeliveryNotesMaster_SelectOne' reported the ErrorCode: " + m_iErrorCode);
                }

                if (dtToReturn.Rows.Count > 0)
                {
                    m_sID = (string)dtToReturn.Rows[0]["ID"];
                    m_sDNID = dtToReturn.Rows[0]["DNID"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["DNID"];
                    m_daDateCreated = dtToReturn.Rows[0]["DateCreated"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)dtToReturn.Rows[0]["DateCreated"];
                    m_sReferenceNo = dtToReturn.Rows[0]["ReferenceNo"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["ReferenceNo"];
                    m_sDeliveryMethodID = dtToReturn.Rows[0]["DeliveryMethodID"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["DeliveryMethodID"];
                    m_curCost1 = dtToReturn.Rows[0]["Cost1"] == System.DBNull.Value ? SqlMoney.Null : (Decimal)dtToReturn.Rows[0]["Cost1"];
                    m_curCost2 = dtToReturn.Rows[0]["Cost2"] == System.DBNull.Value ? SqlMoney.Null : (Decimal)dtToReturn.Rows[0]["Cost2"];
                    m_sUserID = dtToReturn.Rows[0]["UserID"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["UserID"];
                    m_daLastUpdatedDate = dtToReturn.Rows[0]["LastUpdatedDate"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)dtToReturn.Rows[0]["LastUpdatedDate"];
                    m_sNotes = dtToReturn.Rows[0]["Notes"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["Notes"];
                    m_bViewStatus = dtToReturn.Rows[0]["ViewStatus"] == System.DBNull.Value ? SqlBoolean.Null : (bool)dtToReturn.Rows[0]["ViewStatus"];
                    m_sCustomerID = dtToReturn.Rows[0]["CustomerID"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["CustomerID"];
                    m_sTypeOfDelivery = dtToReturn.Rows[0]["TypeOfDelivery"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["TypeOfDelivery"];
                    m_sAddress = dtToReturn.Rows[0]["Address"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["Address"];
                }
                return dtToReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("DeliveryNotesMaster::SelectOne::Error occured.", ex);
            }
            finally
            {
                // Close connection.
                m_scoMainConnection.Close();
                scmCmdToExecute.Dispose();
                sdaAdapter.Dispose();
            }
        }


        /// <summary>
        /// Purpose: SelectAll method. This method will Select all rows from the table.
        /// </summary>
        /// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
        /// <remarks>
        /// Properties set after a succesful call of this method: 
        /// <UL>
        ///		 <LI>ErrorCode</LI>
        /// </UL>
        /// </remarks>
        public override DataTable SelectAll()
        {
            SqlCommand scmCmdToExecute = new SqlCommand();
            scmCmdToExecute.CommandText = "dbo.[pr_DeliveryNotesMaster_SelectAll]";
            scmCmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable dtToReturn = new DataTable("DeliveryNotesMaster");
            SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

            // Use base class' connection object
            scmCmdToExecute.Connection = m_scoMainConnection;

            try
            {
                scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

                // Open connection.
                m_scoMainConnection.Open();

                // Execute query.
                sdaAdapter.Fill(dtToReturn);
                m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

                if (m_iErrorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'pr_DeliveryNotesMaster_SelectAll' reported the ErrorCode: " + m_iErrorCode);
                }

                return dtToReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("DeliveryNotesMaster::SelectAll::Error occured.", ex);
            }
            finally
            {
                // Close connection.
                m_scoMainConnection.Close();
                scmCmdToExecute.Dispose();
                sdaAdapter.Dispose();
            }
        }


        /// <summary>
        /// Purpose: Select method for a foreign key. This method will Select one or more rows from the database, based on the Foreign Key 'UserID'
        /// </summary>
        /// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
        /// <remarks>
        /// Properties needed for this method: 
        /// <UL>
        ///		 <LI>UserID. May be SqlString.Null</LI>
        /// </UL>
        /// Properties set after a succesful call of this method: 
        /// <UL>
        ///		 <LI>ErrorCode</LI>
        /// </UL>
        /// </remarks>
        public DataTable SelectAllWUserIDLogic()
        {
            SqlCommand scmCmdToExecute = new SqlCommand();
            scmCmdToExecute.CommandText = "dbo.[pr_DeliveryNotesMaster_SelectAllWUserIDLogic]";
            scmCmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable dtToReturn = new DataTable("DeliveryNotesMaster");
            SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

            // Use base class' connection object
            scmCmdToExecute.Connection = m_scoMainConnection;

            try
            {
                scmCmdToExecute.Parameters.Add(new SqlParameter("@sUserID", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sUserID));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

                // Open connection.
                m_scoMainConnection.Open();

                // Execute query.
                sdaAdapter.Fill(dtToReturn);
                m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

                if (m_iErrorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'pr_DeliveryNotesMaster_SelectAllWUserIDLogic' reported the ErrorCode: " + m_iErrorCode);
                }

                return dtToReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("DeliveryNotesMaster::SelectAllWUserIDLogic::Error occured.", ex);
            }
            finally
            {
                // Close connection.
                m_scoMainConnection.Close();
                scmCmdToExecute.Dispose();
                sdaAdapter.Dispose();
            }
        }


        #region Class Property Declarations
        public SqlString ID
        {
            get
            {
                return m_sID;
            }
            set
            {
                SqlString sIDTmp = (SqlString)value;
                if (sIDTmp.IsNull)
                {
                    throw new ArgumentOutOfRangeException("iD", "iD can't be NULL");
                }
                m_sID = value;
            }
        }


        public SqlString DNID
        {
            get
            {
                return m_sDNID;
            }
            set
            {
                m_sDNID = value;
            }
        }


        public SqlDateTime DateCreated
        {
            get
            {
                return m_daDateCreated;
            }
            set
            {
                m_daDateCreated = value;
            }
        }


        public SqlString ReferenceNo
        {
            get
            {
                return m_sReferenceNo;
            }
            set
            {
                m_sReferenceNo = value;
            }
        }


        public SqlString DeliveryMethodID
        {
            get
            {
                return m_sDeliveryMethodID;
            }
            set
            {
                m_sDeliveryMethodID = value;
            }
        }


        public SqlMoney Cost1
        {
            get
            {
                return m_curCost1;
            }
            set
            {
                m_curCost1 = value;
            }
        }


        public SqlMoney Cost2
        {
            get
            {
                return m_curCost2;
            }
            set
            {
                m_curCost2 = value;
            }
        }


        public SqlString UserID
        {
            get
            {
                return m_sUserID;
            }
            set
            {
                m_sUserID = value;
            }
        }
        public SqlString userIDOld
        {
            get
            {
                return m_sUserIDOld;
            }
            set
            {
                m_sUserIDOld = value;
            }
        }


        public SqlDateTime LastUpdatedDate
        {
            get
            {
                return m_daLastUpdatedDate;
            }
            set
            {
                m_daLastUpdatedDate = value;
            }
        }


        public SqlString Notes
        {
            get
            {
                return m_sNotes;
            }
            set
            {
                m_sNotes = value;
            }
        }


        public SqlBoolean ViewStatus
        {
            get
            {
                return m_bViewStatus;
            }
            set
            {
                m_bViewStatus = value;
            }
        }


        public SqlString CustomerID
        {
            get
            {
                return m_sCustomerID;
            }
            set
            {
                m_sCustomerID = value;
            }
        }


        public SqlString TypeOfDelivery
        {
            get
            {
                return m_sTypeOfDelivery;
            }
            set
            {
                m_sTypeOfDelivery = value;
            }
        }


        public SqlString Address
        {
            get
            {
                return m_sAddress;
            }
            set
            {
                m_sAddress = value;
            }
        }
        #endregion
    }
}
