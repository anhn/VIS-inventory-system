-- ================================================================================================================
-- Stored Procedures generated by LLBLGen v1.2.2689.38888 Final on Monday, May 14, 2007, 3:13:19 PM
-- For the Low Level Business Logic Layer for the database 'vis-inventory'
-- ================================================================================================================
SET NOCOUNT ON
GO
USE [vis-inventory]
GO

-- ========================================================================================================
-- [Stored Procedures generated for table:  CategoryInContact]
GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_CategoryInContact_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_CategoryInContact_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'CategoryInContact'
-- Gets: @sContactCatID varchar(36)
-- Gets: @sContactCatName nvarchar(-1)
-- Gets: @sNotes ntext
-- Gets: @bViewStatus bit
-- Gets: @sUserID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_CategoryInContact_Insert]
	@sContactCatID varchar(36),
	@sContactCatName nvarchar(-1),
	@sNotes ntext,
	@bViewStatus bit,
	@sUserID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[CategoryInContact]
(
	[ContactCatID],
	[ContactCatName],
	[Notes],
	[ViewStatus],
	[UserID]
)
VALUES
(
	@sContactCatID,
	@sContactCatName,
	@sNotes,
	@bViewStatus,
	@sUserID
)
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_CategoryInContact_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_CategoryInContact_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'CategoryInContact'
-- Gets: @sContactCatID varchar(36)
-- Gets: @sContactCatName nvarchar(-1)
-- Gets: @sNotes ntext
-- Gets: @bViewStatus bit
-- Gets: @sUserID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_CategoryInContact_Update]
	@sContactCatID varchar(36),
	@sContactCatName nvarchar(-1),
	@sNotes ntext,
	@bViewStatus bit,
	@sUserID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[CategoryInContact]
SET 
	[ContactCatName] = @sContactCatName,
	[Notes] = @sNotes,
	[ViewStatus] = @bViewStatus,
	[UserID] = @sUserID
WHERE
	[ContactCatID] = @sContactCatID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_CategoryInContact_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_CategoryInContact_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'CategoryInContact'
-- using the Primary Key. 
-- Gets: @sContactCatID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_CategoryInContact_Delete]
	@sContactCatID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[CategoryInContact]
WHERE
	[ContactCatID] = @sContactCatID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_CategoryInContact_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_CategoryInContact_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'CategoryInContact'
-- based on the Primary Key.
-- Gets: @sContactCatID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_CategoryInContact_SelectOne]
	@sContactCatID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[ContactCatID],
	[ContactCatName],
	[Notes],
	[ViewStatus],
	[UserID],
	[Timestamp]
FROM [dbo].[CategoryInContact]
WHERE
	[ContactCatID] = @sContactCatID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_CategoryInContact_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_CategoryInContact_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'CategoryInContact'
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_CategoryInContact_SelectAll]
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[ContactCatID],
	[ContactCatName],
	[Notes],
	[ViewStatus],
	[UserID],
	[Timestamp]
FROM [dbo].[CategoryInContact]
ORDER BY 
	[ContactCatID] ASC
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     CategoryInContact]
-- ========================================================================================================
GO

-- ========================================================================================================
-- [Stored Procedures generated for table:  Contact]
GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Contact_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Contact_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'Contact'
-- Gets: @sContactID varchar(36)
-- Gets: @sMr varchar(50)
-- Gets: @sFirstName nvarchar(-1)
-- Gets: @sMiddleName nvarchar(-1)
-- Gets: @sLastName nvarchar(-1)
-- Gets: @sEmailName nvarchar(-1)
-- Gets: @sContactName nvarchar(-1)
-- Gets: @sCompanyName nvarchar(-1)
-- Gets: @sAlt_contact nvarchar(50)
-- Gets: @sPosition nvarchar(-1)
-- Gets: @sDepartment nvarchar(-1)
-- Gets: @sDivision nvarchar(-1)
-- Gets: @sAddress1 nvarchar(-1)
-- Gets: @sAddress2 nvarchar(-1)
-- Gets: @sCity nvarchar(-1)
-- Gets: @sProvince nvarchar(-1)
-- Gets: @sZip char(10)
-- Gets: @sCountry nvarchar(-1)
-- Gets: @sPhone1 varchar(50)
-- Gets: @sPhone2 varchar(50)
-- Gets: @sFax1 varchar(50)
-- Gets: @sFax2 varchar(50)
-- Gets: @sCell1 varchar(50)
-- Gets: @sCell2 varchar(50)
-- Gets: @sEmail1 varchar(50)
-- Gets: @sEmail2 varchar(50)
-- Gets: @sEmail3 varchar(50)
-- Gets: @sWebsite varchar(50)
-- Gets: @biPhoto varbinary(-1)
-- Gets: @sNotes ntext
-- Gets: @iContactGroupID int
-- Gets: @bSubscribeNews bit
-- Gets: @bViewStatus bit
-- Gets: @sUserID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Contact_Insert]
	@sContactID varchar(36),
	@sMr varchar(50),
	@sFirstName nvarchar(-1),
	@sMiddleName nvarchar(-1),
	@sLastName nvarchar(-1),
	@sEmailName nvarchar(-1),
	@sContactName nvarchar(-1),
	@sCompanyName nvarchar(-1),
	@sAlt_contact nvarchar(50),
	@sPosition nvarchar(-1),
	@sDepartment nvarchar(-1),
	@sDivision nvarchar(-1),
	@sAddress1 nvarchar(-1),
	@sAddress2 nvarchar(-1),
	@sCity nvarchar(-1),
	@sProvince nvarchar(-1),
	@sZip char(10),
	@sCountry nvarchar(-1),
	@sPhone1 varchar(50),
	@sPhone2 varchar(50),
	@sFax1 varchar(50),
	@sFax2 varchar(50),
	@sCell1 varchar(50),
	@sCell2 varchar(50),
	@sEmail1 varchar(50),
	@sEmail2 varchar(50),
	@sEmail3 varchar(50),
	@sWebsite varchar(50),
	@biPhoto varbinary(-1),
	@sNotes ntext,
	@iContactGroupID int,
	@bSubscribeNews bit,
	@bViewStatus bit,
	@sUserID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[Contact]
(
	[ContactID],
	[Mr],
	[FirstName],
	[MiddleName],
	[LastName],
	[EmailName],
	[ContactName],
	[CompanyName],
	[Alt_contact],
	[Position],
	[Department],
	[Division],
	[Address1],
	[Address2],
	[City],
	[Province],
	[Zip],
	[Country],
	[Phone1],
	[Phone2],
	[Fax1],
	[Fax2],
	[Cell1],
	[Cell2],
	[Email1],
	[Email2],
	[Email3],
	[Website],
	[Photo],
	[Notes],
	[ContactGroupID],
	[SubscribeNews],
	[ViewStatus],
	[UserID]
)
VALUES
(
	@sContactID,
	@sMr,
	@sFirstName,
	@sMiddleName,
	@sLastName,
	@sEmailName,
	@sContactName,
	@sCompanyName,
	@sAlt_contact,
	@sPosition,
	@sDepartment,
	@sDivision,
	@sAddress1,
	@sAddress2,
	@sCity,
	@sProvince,
	@sZip,
	@sCountry,
	@sPhone1,
	@sPhone2,
	@sFax1,
	@sFax2,
	@sCell1,
	@sCell2,
	@sEmail1,
	@sEmail2,
	@sEmail3,
	@sWebsite,
	@biPhoto,
	@sNotes,
	@iContactGroupID,
	@bSubscribeNews,
	@bViewStatus,
	@sUserID
)
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Contact_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Contact_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'Contact'
-- Gets: @sContactID varchar(36)
-- Gets: @sMr varchar(50)
-- Gets: @sFirstName nvarchar(-1)
-- Gets: @sMiddleName nvarchar(-1)
-- Gets: @sLastName nvarchar(-1)
-- Gets: @sEmailName nvarchar(-1)
-- Gets: @sContactName nvarchar(-1)
-- Gets: @sCompanyName nvarchar(-1)
-- Gets: @sAlt_contact nvarchar(50)
-- Gets: @sPosition nvarchar(-1)
-- Gets: @sDepartment nvarchar(-1)
-- Gets: @sDivision nvarchar(-1)
-- Gets: @sAddress1 nvarchar(-1)
-- Gets: @sAddress2 nvarchar(-1)
-- Gets: @sCity nvarchar(-1)
-- Gets: @sProvince nvarchar(-1)
-- Gets: @sZip char(10)
-- Gets: @sCountry nvarchar(-1)
-- Gets: @sPhone1 varchar(50)
-- Gets: @sPhone2 varchar(50)
-- Gets: @sFax1 varchar(50)
-- Gets: @sFax2 varchar(50)
-- Gets: @sCell1 varchar(50)
-- Gets: @sCell2 varchar(50)
-- Gets: @sEmail1 varchar(50)
-- Gets: @sEmail2 varchar(50)
-- Gets: @sEmail3 varchar(50)
-- Gets: @sWebsite varchar(50)
-- Gets: @biPhoto varbinary(-1)
-- Gets: @sNotes ntext
-- Gets: @iContactGroupID int
-- Gets: @bSubscribeNews bit
-- Gets: @bViewStatus bit
-- Gets: @sUserID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Contact_Update]
	@sContactID varchar(36),
	@sMr varchar(50),
	@sFirstName nvarchar(-1),
	@sMiddleName nvarchar(-1),
	@sLastName nvarchar(-1),
	@sEmailName nvarchar(-1),
	@sContactName nvarchar(-1),
	@sCompanyName nvarchar(-1),
	@sAlt_contact nvarchar(50),
	@sPosition nvarchar(-1),
	@sDepartment nvarchar(-1),
	@sDivision nvarchar(-1),
	@sAddress1 nvarchar(-1),
	@sAddress2 nvarchar(-1),
	@sCity nvarchar(-1),
	@sProvince nvarchar(-1),
	@sZip char(10),
	@sCountry nvarchar(-1),
	@sPhone1 varchar(50),
	@sPhone2 varchar(50),
	@sFax1 varchar(50),
	@sFax2 varchar(50),
	@sCell1 varchar(50),
	@sCell2 varchar(50),
	@sEmail1 varchar(50),
	@sEmail2 varchar(50),
	@sEmail3 varchar(50),
	@sWebsite varchar(50),
	@biPhoto varbinary(-1),
	@sNotes ntext,
	@iContactGroupID int,
	@bSubscribeNews bit,
	@bViewStatus bit,
	@sUserID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[Contact]
SET 
	[Mr] = @sMr,
	[FirstName] = @sFirstName,
	[MiddleName] = @sMiddleName,
	[LastName] = @sLastName,
	[EmailName] = @sEmailName,
	[ContactName] = @sContactName,
	[CompanyName] = @sCompanyName,
	[Alt_contact] = @sAlt_contact,
	[Position] = @sPosition,
	[Department] = @sDepartment,
	[Division] = @sDivision,
	[Address1] = @sAddress1,
	[Address2] = @sAddress2,
	[City] = @sCity,
	[Province] = @sProvince,
	[Zip] = @sZip,
	[Country] = @sCountry,
	[Phone1] = @sPhone1,
	[Phone2] = @sPhone2,
	[Fax1] = @sFax1,
	[Fax2] = @sFax2,
	[Cell1] = @sCell1,
	[Cell2] = @sCell2,
	[Email1] = @sEmail1,
	[Email2] = @sEmail2,
	[Email3] = @sEmail3,
	[Website] = @sWebsite,
	[Photo] = @biPhoto,
	[Notes] = @sNotes,
	[ContactGroupID] = @iContactGroupID,
	[SubscribeNews] = @bSubscribeNews,
	[ViewStatus] = @bViewStatus,
	[UserID] = @sUserID
WHERE
	[ContactID] = @sContactID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Contact_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Contact_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'Contact'
-- using the Primary Key. 
-- Gets: @sContactID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Contact_Delete]
	@sContactID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[Contact]
WHERE
	[ContactID] = @sContactID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Contact_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Contact_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'Contact'
-- based on the Primary Key.
-- Gets: @sContactID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Contact_SelectOne]
	@sContactID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[ContactID],
	[Mr],
	[FirstName],
	[MiddleName],
	[LastName],
	[EmailName],
	[ContactName],
	[CompanyName],
	[Alt_contact],
	[Position],
	[Department],
	[Division],
	[Address1],
	[Address2],
	[City],
	[Province],
	[Zip],
	[Country],
	[Phone1],
	[Phone2],
	[Fax1],
	[Fax2],
	[Cell1],
	[Cell2],
	[Email1],
	[Email2],
	[Email3],
	[Website],
	[Photo],
	[Notes],
	[ContactGroupID],
	[SubscribeNews],
	[ViewStatus],
	[UserID],
	[Timestamp]
FROM [dbo].[Contact]
WHERE
	[ContactID] = @sContactID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Contact_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Contact_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'Contact'
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Contact_SelectAll]
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[ContactID],
	[Mr],
	[FirstName],
	[MiddleName],
	[LastName],
	[EmailName],
	[ContactName],
	[CompanyName],
	[Alt_contact],
	[Position],
	[Department],
	[Division],
	[Address1],
	[Address2],
	[City],
	[Province],
	[Zip],
	[Country],
	[Phone1],
	[Phone2],
	[Fax1],
	[Fax2],
	[Cell1],
	[Cell2],
	[Email1],
	[Email2],
	[Email3],
	[Website],
	[Photo],
	[Notes],
	[ContactGroupID],
	[SubscribeNews],
	[ViewStatus],
	[UserID],
	[Timestamp]
FROM [dbo].[Contact]
ORDER BY 
	[ContactID] ASC
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     Contact]
-- ========================================================================================================
GO

-- ========================================================================================================
-- [Stored Procedures generated for table:  ContactCategory]
GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_ContactCategory_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_ContactCategory_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'ContactCategory'
-- Gets: @sContactCatID varchar(36)
-- Gets: @sContactID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_ContactCategory_Insert]
	@sContactCatID varchar(36),
	@sContactID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[ContactCategory]
(
	[ContactCatID],
	[ContactID]
)
VALUES
(
	@sContactCatID,
	@sContactID
)
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_ContactCategory_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_ContactCategory_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'ContactCategory'
-- using the Primary Key. 
-- Gets: @sContactCatID varchar(36)
-- Gets: @sContactID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_ContactCategory_Delete]
	@sContactCatID varchar(36),
	@sContactID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[ContactCategory]
WHERE
	[ContactCatID] = @sContactCatID
	AND [ContactID] = @sContactID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using PK field [ContactCatID]
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_ContactCategory_DeleteWContactCatIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_ContactCategory_DeleteWContactCatIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete one or more  existing rows from the table 'ContactCategory'
-- using the Primary Key field [ContactCatID]. 
-- Gets: @sContactCatID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_ContactCategory_DeleteWContactCatIDLogic]
	@sContactCatID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE one or more existing rows from the table.
DELETE FROM [dbo].[ContactCategory]
WHERE
	[ContactCatID] = @sContactCatID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using PK field [ContactID]
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_ContactCategory_DeleteWContactIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_ContactCategory_DeleteWContactIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete one or more  existing rows from the table 'ContactCategory'
-- using the Primary Key field [ContactID]. 
-- Gets: @sContactID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_ContactCategory_DeleteWContactIDLogic]
	@sContactID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE one or more existing rows from the table.
DELETE FROM [dbo].[ContactCategory]
WHERE
	[ContactID] = @sContactID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_ContactCategory_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_ContactCategory_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'ContactCategory'
-- based on the Primary Key.
-- Gets: @sContactCatID varchar(36)
-- Gets: @sContactID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_ContactCategory_SelectOne]
	@sContactCatID varchar(36),
	@sContactID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[ContactCatID],
	[ContactID]
FROM [dbo].[ContactCategory]
WHERE
	[ContactCatID] = @sContactCatID
	AND [ContactID] = @sContactID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_ContactCategory_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_ContactCategory_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'ContactCategory'
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_ContactCategory_SelectAll]
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[ContactCatID],
	[ContactID]
FROM [dbo].[ContactCategory]
ORDER BY 
	[ContactCatID] ASC
	, [ContactID] ASC
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [ContactCatID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_ContactCategory_SelectAllWContactCatIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_ContactCategory_SelectAllWContactCatIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'ContactCategory'
-- based on a foreign key field.
-- Gets: @sContactCatID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_ContactCategory_SelectAllWContactCatIDLogic]
	@sContactCatID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[ContactCatID],
	[ContactID]
FROM [dbo].[ContactCategory]
WHERE
	[ContactCatID] = @sContactCatID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [ContactID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_ContactCategory_SelectAllWContactIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_ContactCategory_SelectAllWContactIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'ContactCategory'
-- based on a foreign key field.
-- Gets: @sContactID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_ContactCategory_SelectAllWContactIDLogic]
	@sContactID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[ContactCatID],
	[ContactID]
FROM [dbo].[ContactCategory]
WHERE
	[ContactID] = @sContactID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     ContactCategory]
-- ========================================================================================================
GO

-- ========================================================================================================
-- [Stored Procedures generated for table:  ContactGroupInContact]
GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_ContactGroupInContact_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_ContactGroupInContact_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'ContactGroupInContact'
-- Gets: @sContactGroupID varchar(36)
-- Gets: @sContactGroupName nvarchar(-1)
-- Gets: @biIcon varbinary(-1)
-- Gets: @sNotes ntext
-- Gets: @bViewStatus bit
-- Gets: @sUserID varchar(50)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_ContactGroupInContact_Insert]
	@sContactGroupID varchar(36),
	@sContactGroupName nvarchar(-1),
	@biIcon varbinary(-1),
	@sNotes ntext,
	@bViewStatus bit,
	@sUserID varchar(50),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[ContactGroupInContact]
(
	[ContactGroupID],
	[ContactGroupName],
	[Icon],
	[Notes],
	[ViewStatus],
	[UserID]
)
VALUES
(
	ISNULL(@sContactGroupID, (newid())),
	@sContactGroupName,
	@biIcon,
	@sNotes,
	@bViewStatus,
	@sUserID
)
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_ContactGroupInContact_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_ContactGroupInContact_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'ContactGroupInContact'
-- Gets: @sContactGroupID varchar(36)
-- Gets: @sContactGroupName nvarchar(-1)
-- Gets: @biIcon varbinary(-1)
-- Gets: @sNotes ntext
-- Gets: @bViewStatus bit
-- Gets: @sUserID varchar(50)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_ContactGroupInContact_Update]
	@sContactGroupID varchar(36),
	@sContactGroupName nvarchar(-1),
	@biIcon varbinary(-1),
	@sNotes ntext,
	@bViewStatus bit,
	@sUserID varchar(50),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[ContactGroupInContact]
SET 
	[ContactGroupName] = @sContactGroupName,
	[Icon] = @biIcon,
	[Notes] = @sNotes,
	[ViewStatus] = @bViewStatus,
	[UserID] = @sUserID
WHERE
	[ContactGroupID] = @sContactGroupID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_ContactGroupInContact_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_ContactGroupInContact_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'ContactGroupInContact'
-- using the Primary Key. 
-- Gets: @sContactGroupID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_ContactGroupInContact_Delete]
	@sContactGroupID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[ContactGroupInContact]
WHERE
	[ContactGroupID] = @sContactGroupID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_ContactGroupInContact_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_ContactGroupInContact_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'ContactGroupInContact'
-- based on the Primary Key.
-- Gets: @sContactGroupID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_ContactGroupInContact_SelectOne]
	@sContactGroupID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[ContactGroupID],
	[ContactGroupName],
	[Icon],
	[Notes],
	[ViewStatus],
	[UserID],
	[Timestamp]
FROM [dbo].[ContactGroupInContact]
WHERE
	[ContactGroupID] = @sContactGroupID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_ContactGroupInContact_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_ContactGroupInContact_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'ContactGroupInContact'
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_ContactGroupInContact_SelectAll]
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[ContactGroupID],
	[ContactGroupName],
	[Icon],
	[Notes],
	[ViewStatus],
	[UserID],
	[Timestamp]
FROM [dbo].[ContactGroupInContact]
ORDER BY 
	[ContactGroupID] ASC
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     ContactGroupInContact]
-- ========================================================================================================
GO

-- ========================================================================================================
-- [Stored Procedures generated for table:  CostHistory]
GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_CostHistory_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_CostHistory_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'CostHistory'
-- Gets: @sID varchar(36)
-- Gets: @sProductID nchar(10)
-- Gets: @curCost1 money
-- Gets: @curCost2 money
-- Gets: @curCostDiscount1 money
-- Gets: @curCostDiscount2 money
-- Gets: @sUserID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_CostHistory_Insert]
	@sID varchar(36),
	@sProductID nchar(10),
	@curCost1 money,
	@curCost2 money,
	@curCostDiscount1 money,
	@curCostDiscount2 money,
	@sUserID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[CostHistory]
(
	[ID],
	[ProductID],
	[Cost1],
	[Cost2],
	[CostDiscount1],
	[CostDiscount2],
	[UserID]
)
VALUES
(
	@sID,
	@sProductID,
	@curCost1,
	@curCost2,
	@curCostDiscount1,
	@curCostDiscount2,
	@sUserID
)
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_CostHistory_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_CostHistory_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'CostHistory'
-- Gets: @sID varchar(36)
-- Gets: @sProductID nchar(10)
-- Gets: @curCost1 money
-- Gets: @curCost2 money
-- Gets: @curCostDiscount1 money
-- Gets: @curCostDiscount2 money
-- Gets: @sUserID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_CostHistory_Update]
	@sID varchar(36),
	@sProductID nchar(10),
	@curCost1 money,
	@curCost2 money,
	@curCostDiscount1 money,
	@curCostDiscount2 money,
	@sUserID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[CostHistory]
SET 
	[ProductID] = @sProductID,
	[Cost1] = @curCost1,
	[Cost2] = @curCost2,
	[CostDiscount1] = @curCostDiscount1,
	[CostDiscount2] = @curCostDiscount2,
	[UserID] = @sUserID
WHERE
	[ID] = @sID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [ProductID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_CostHistory_UpdateAllWProductIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_CostHistory_UpdateAllWProductIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'CostHistory'.
-- Will reset field [ProductID] with value @sProductIDOld  to value @sProductID
-- Gets: @sProductID nchar(10)
-- Gets: @sProductIDOld nchar(10)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_CostHistory_UpdateAllWProductIDLogic]
	@sProductID nchar(10),
	@sProductIDOld nchar(10),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[CostHistory]
SET
	[ProductID] = @sProductID
WHERE
	[ProductID] = @sProductIDOld
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [UserID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_CostHistory_UpdateAllWUserIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_CostHistory_UpdateAllWUserIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'CostHistory'.
-- Will reset field [UserID] with value @sUserIDOld  to value @sUserID
-- Gets: @sUserID varchar(36)
-- Gets: @sUserIDOld varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_CostHistory_UpdateAllWUserIDLogic]
	@sUserID varchar(36),
	@sUserIDOld varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[CostHistory]
SET
	[UserID] = @sUserID
WHERE
	[UserID] = @sUserIDOld
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_CostHistory_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_CostHistory_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'CostHistory'
-- using the Primary Key. 
-- Gets: @sID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_CostHistory_Delete]
	@sID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[CostHistory]
WHERE
	[ID] = @sID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_CostHistory_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_CostHistory_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'CostHistory'
-- based on the Primary Key.
-- Gets: @sID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_CostHistory_SelectOne]
	@sID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[ID],
	[ProductID],
	[Cost1],
	[Cost2],
	[CostDiscount1],
	[CostDiscount2],
	[UserID],
	[Timestamp]
FROM [dbo].[CostHistory]
WHERE
	[ID] = @sID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_CostHistory_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_CostHistory_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'CostHistory'
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_CostHistory_SelectAll]
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[ID],
	[ProductID],
	[Cost1],
	[Cost2],
	[CostDiscount1],
	[CostDiscount2],
	[UserID],
	[Timestamp]
FROM [dbo].[CostHistory]
ORDER BY 
	[ID] ASC
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [ProductID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_CostHistory_SelectAllWProductIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_CostHistory_SelectAllWProductIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'CostHistory'
-- based on a foreign key field.
-- Gets: @sProductID nchar(10)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_CostHistory_SelectAllWProductIDLogic]
	@sProductID nchar(10),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[ID],
	[ProductID],
	[Cost1],
	[Cost2],
	[CostDiscount1],
	[CostDiscount2],
	[UserID],
	[Timestamp]
FROM [dbo].[CostHistory]
WHERE
	[ProductID] = @sProductID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [UserID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_CostHistory_SelectAllWUserIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_CostHistory_SelectAllWUserIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'CostHistory'
-- based on a foreign key field.
-- Gets: @sUserID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_CostHistory_SelectAllWUserIDLogic]
	@sUserID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[ID],
	[ProductID],
	[Cost1],
	[Cost2],
	[CostDiscount1],
	[CostDiscount2],
	[UserID],
	[Timestamp]
FROM [dbo].[CostHistory]
WHERE
	[UserID] = @sUserID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     CostHistory]
-- ========================================================================================================
GO

-- ========================================================================================================
-- [Stored Procedures generated for table:  Currency]
GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Currency_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Currency_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'Currency'
-- Gets: @sCurrencyID char(3)
-- Gets: @sCurrencyName nvarchar(50)
-- Gets: @curExRate money
-- Gets: @bIsMainCurrency bit
-- Gets: @bViewStatus bit
-- Gets: @sUserID varchar(36)
-- Gets: @daLastUpdatedDate datetime
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Currency_Insert]
	@sCurrencyID char(3),
	@sCurrencyName nvarchar(50),
	@curExRate money,
	@bIsMainCurrency bit,
	@bViewStatus bit,
	@sUserID varchar(36),
	@daLastUpdatedDate datetime,
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[Currency]
(
	[CurrencyID],
	[CurrencyName],
	[ExRate],
	[IsMainCurrency],
	[ViewStatus],
	[UserID],
	[LastUpdatedDate]
)
VALUES
(
	@sCurrencyID,
	@sCurrencyName,
	@curExRate,
	@bIsMainCurrency,
	@bViewStatus,
	@sUserID,
	@daLastUpdatedDate
)
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Currency_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Currency_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'Currency'
-- Gets: @sCurrencyID char(3)
-- Gets: @sCurrencyName nvarchar(50)
-- Gets: @curExRate money
-- Gets: @bIsMainCurrency bit
-- Gets: @bViewStatus bit
-- Gets: @sUserID varchar(36)
-- Gets: @daLastUpdatedDate datetime
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Currency_Update]
	@sCurrencyID char(3),
	@sCurrencyName nvarchar(50),
	@curExRate money,
	@bIsMainCurrency bit,
	@bViewStatus bit,
	@sUserID varchar(36),
	@daLastUpdatedDate datetime,
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[Currency]
SET 
	[CurrencyName] = @sCurrencyName,
	[ExRate] = @curExRate,
	[IsMainCurrency] = @bIsMainCurrency,
	[ViewStatus] = @bViewStatus,
	[UserID] = @sUserID,
	[LastUpdatedDate] = @daLastUpdatedDate
WHERE
	[CurrencyID] = @sCurrencyID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [UserID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Currency_UpdateAllWUserIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Currency_UpdateAllWUserIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'Currency'.
-- Will reset field [UserID] with value @sUserIDOld  to value @sUserID
-- Gets: @sUserID varchar(36)
-- Gets: @sUserIDOld varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Currency_UpdateAllWUserIDLogic]
	@sUserID varchar(36),
	@sUserIDOld varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[Currency]
SET
	[UserID] = @sUserID
WHERE
	[UserID] = @sUserIDOld
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Currency_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Currency_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'Currency'
-- using the Primary Key. 
-- Gets: @sCurrencyID char(3)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Currency_Delete]
	@sCurrencyID char(3),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[Currency]
WHERE
	[CurrencyID] = @sCurrencyID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Currency_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Currency_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'Currency'
-- based on the Primary Key.
-- Gets: @sCurrencyID char(3)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Currency_SelectOne]
	@sCurrencyID char(3),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[CurrencyID],
	[CurrencyName],
	[ExRate],
	[IsMainCurrency],
	[ViewStatus],
	[UserID],
	[LastUpdatedDate]
FROM [dbo].[Currency]
WHERE
	[CurrencyID] = @sCurrencyID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Currency_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Currency_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'Currency'
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Currency_SelectAll]
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[CurrencyID],
	[CurrencyName],
	[ExRate],
	[IsMainCurrency],
	[ViewStatus],
	[UserID],
	[LastUpdatedDate]
FROM [dbo].[Currency]
ORDER BY 
	[CurrencyID] ASC
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [UserID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Currency_SelectAllWUserIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Currency_SelectAllWUserIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'Currency'
-- based on a foreign key field.
-- Gets: @sUserID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Currency_SelectAllWUserIDLogic]
	@sUserID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[CurrencyID],
	[CurrencyName],
	[ExRate],
	[IsMainCurrency],
	[ViewStatus],
	[UserID],
	[LastUpdatedDate]
FROM [dbo].[Currency]
WHERE
	[UserID] = @sUserID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     Currency]
-- ========================================================================================================
GO

-- ========================================================================================================
-- [Stored Procedures generated for table:  CustomerContact]
GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_CustomerContact_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_CustomerContact_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'CustomerContact'
-- Gets: @sContactID varchar(36)
-- Gets: @sCustomerID varchar(50)
-- Gets: @sPayment_term_id varchar(36)
-- Gets: @sTax_code_id varchar(36)
-- Gets: @sBilling_address varchar(-1)
-- Gets: @sBilling_city nvarchar(50)
-- Gets: @sBilling_state nvarchar(50)
-- Gets: @sBilling_country nvarchar(50)
-- Gets: @sBilling_zip nvarchar(20)
-- Gets: @sBilling_phone nvarchar(20)
-- Gets: @sBilling_email nvarchar(50)
-- Gets: @sShipping_address1 nvarchar(-1)
-- Gets: @sShipping_city nvarchar(50)
-- Gets: @sShipping_state nvarchar(50)
-- Gets: @sShipping_country nvarchar(50)
-- Gets: @sShipping_zip nvarchar(20)
-- Gets: @sShipping_phone nvarchar(20)
-- Gets: @sShipping_email nvarchar(50)
-- Gets: @sBankName nvarchar(-1)
-- Gets: @sAccountName nvarchar(-1)
-- Gets: @sAccount_number varchar(50)
-- Gets: @sCredit_limit varchar(50)
-- Gets: @sCurrency nvarchar(3)
-- Gets: @dcBalance decimal(18, 2)
-- Gets: @dcDiscount decimal(18, 2)
-- Gets: @sParent_id varchar(36)
-- Gets: @sTax_agent varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_CustomerContact_Insert]
	@sContactID varchar(36),
	@sCustomerID varchar(50),
	@sPayment_term_id varchar(36),
	@sTax_code_id varchar(36),
	@sBilling_address varchar(-1),
	@sBilling_city nvarchar(50),
	@sBilling_state nvarchar(50),
	@sBilling_country nvarchar(50),
	@sBilling_zip nvarchar(20),
	@sBilling_phone nvarchar(20),
	@sBilling_email nvarchar(50),
	@sShipping_address1 nvarchar(-1),
	@sShipping_city nvarchar(50),
	@sShipping_state nvarchar(50),
	@sShipping_country nvarchar(50),
	@sShipping_zip nvarchar(20),
	@sShipping_phone nvarchar(20),
	@sShipping_email nvarchar(50),
	@sBankName nvarchar(-1),
	@sAccountName nvarchar(-1),
	@sAccount_number varchar(50),
	@sCredit_limit varchar(50),
	@sCurrency nvarchar(3),
	@dcBalance decimal(18, 2),
	@dcDiscount decimal(18, 2),
	@sParent_id varchar(36),
	@sTax_agent varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[CustomerContact]
(
	[ContactID],
	[CustomerID],
	[Payment_term_id],
	[Tax_code_id],
	[Billing_address],
	[Billing_city],
	[Billing_state],
	[Billing_country],
	[Billing_zip],
	[Billing_phone],
	[Billing_email],
	[Shipping_address1],
	[Shipping_city],
	[Shipping_state],
	[Shipping_country],
	[Shipping_zip],
	[Shipping_phone],
	[Shipping_email],
	[BankName],
	[AccountName],
	[Account_number],
	[Credit_limit],
	[Currency],
	[Balance],
	[Discount],
	[Parent_id],
	[Tax_agent]
)
VALUES
(
	@sContactID,
	@sCustomerID,
	@sPayment_term_id,
	@sTax_code_id,
	@sBilling_address,
	@sBilling_city,
	@sBilling_state,
	@sBilling_country,
	@sBilling_zip,
	@sBilling_phone,
	@sBilling_email,
	@sShipping_address1,
	@sShipping_city,
	@sShipping_state,
	@sShipping_country,
	@sShipping_zip,
	@sShipping_phone,
	@sShipping_email,
	@sBankName,
	@sAccountName,
	@sAccount_number,
	@sCredit_limit,
	@sCurrency,
	@dcBalance,
	@dcDiscount,
	@sParent_id,
	@sTax_agent
)
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_CustomerContact_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_CustomerContact_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'CustomerContact'
-- Gets: @sContactID varchar(36)
-- Gets: @sCustomerID varchar(50)
-- Gets: @sPayment_term_id varchar(36)
-- Gets: @sTax_code_id varchar(36)
-- Gets: @sBilling_address varchar(-1)
-- Gets: @sBilling_city nvarchar(50)
-- Gets: @sBilling_state nvarchar(50)
-- Gets: @sBilling_country nvarchar(50)
-- Gets: @sBilling_zip nvarchar(20)
-- Gets: @sBilling_phone nvarchar(20)
-- Gets: @sBilling_email nvarchar(50)
-- Gets: @sShipping_address1 nvarchar(-1)
-- Gets: @sShipping_city nvarchar(50)
-- Gets: @sShipping_state nvarchar(50)
-- Gets: @sShipping_country nvarchar(50)
-- Gets: @sShipping_zip nvarchar(20)
-- Gets: @sShipping_phone nvarchar(20)
-- Gets: @sShipping_email nvarchar(50)
-- Gets: @sBankName nvarchar(-1)
-- Gets: @sAccountName nvarchar(-1)
-- Gets: @sAccount_number varchar(50)
-- Gets: @sCredit_limit varchar(50)
-- Gets: @sCurrency nvarchar(3)
-- Gets: @dcBalance decimal(18, 2)
-- Gets: @dcDiscount decimal(18, 2)
-- Gets: @sParent_id varchar(36)
-- Gets: @sTax_agent varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_CustomerContact_Update]
	@sContactID varchar(36),
	@sCustomerID varchar(50),
	@sPayment_term_id varchar(36),
	@sTax_code_id varchar(36),
	@sBilling_address varchar(-1),
	@sBilling_city nvarchar(50),
	@sBilling_state nvarchar(50),
	@sBilling_country nvarchar(50),
	@sBilling_zip nvarchar(20),
	@sBilling_phone nvarchar(20),
	@sBilling_email nvarchar(50),
	@sShipping_address1 nvarchar(-1),
	@sShipping_city nvarchar(50),
	@sShipping_state nvarchar(50),
	@sShipping_country nvarchar(50),
	@sShipping_zip nvarchar(20),
	@sShipping_phone nvarchar(20),
	@sShipping_email nvarchar(50),
	@sBankName nvarchar(-1),
	@sAccountName nvarchar(-1),
	@sAccount_number varchar(50),
	@sCredit_limit varchar(50),
	@sCurrency nvarchar(3),
	@dcBalance decimal(18, 2),
	@dcDiscount decimal(18, 2),
	@sParent_id varchar(36),
	@sTax_agent varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[CustomerContact]
SET 
	[CustomerID] = @sCustomerID,
	[Payment_term_id] = @sPayment_term_id,
	[Tax_code_id] = @sTax_code_id,
	[Billing_address] = @sBilling_address,
	[Billing_city] = @sBilling_city,
	[Billing_state] = @sBilling_state,
	[Billing_country] = @sBilling_country,
	[Billing_zip] = @sBilling_zip,
	[Billing_phone] = @sBilling_phone,
	[Billing_email] = @sBilling_email,
	[Shipping_address1] = @sShipping_address1,
	[Shipping_city] = @sShipping_city,
	[Shipping_state] = @sShipping_state,
	[Shipping_country] = @sShipping_country,
	[Shipping_zip] = @sShipping_zip,
	[Shipping_phone] = @sShipping_phone,
	[Shipping_email] = @sShipping_email,
	[BankName] = @sBankName,
	[AccountName] = @sAccountName,
	[Account_number] = @sAccount_number,
	[Credit_limit] = @sCredit_limit,
	[Currency] = @sCurrency,
	[Balance] = @dcBalance,
	[Discount] = @dcDiscount,
	[Parent_id] = @sParent_id,
	[Tax_agent] = @sTax_agent
WHERE
	[ContactID] = @sContactID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [Payment_term_id].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_CustomerContact_UpdateAllWPayment_term_idLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_CustomerContact_UpdateAllWPayment_term_idLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'CustomerContact'.
-- Will reset field [Payment_term_id] with value @sPayment_term_idOld  to value @sPayment_term_id
-- Gets: @sPayment_term_id varchar(36)
-- Gets: @sPayment_term_idOld varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_CustomerContact_UpdateAllWPayment_term_idLogic]
	@sPayment_term_id varchar(36),
	@sPayment_term_idOld varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[CustomerContact]
SET
	[Payment_term_id] = @sPayment_term_id
WHERE
	[Payment_term_id] = @sPayment_term_idOld
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [Tax_code_id].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_CustomerContact_UpdateAllWTax_code_idLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_CustomerContact_UpdateAllWTax_code_idLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'CustomerContact'.
-- Will reset field [Tax_code_id] with value @sTax_code_idOld  to value @sTax_code_id
-- Gets: @sTax_code_id varchar(36)
-- Gets: @sTax_code_idOld varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_CustomerContact_UpdateAllWTax_code_idLogic]
	@sTax_code_id varchar(36),
	@sTax_code_idOld varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[CustomerContact]
SET
	[Tax_code_id] = @sTax_code_id
WHERE
	[Tax_code_id] = @sTax_code_idOld
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_CustomerContact_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_CustomerContact_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'CustomerContact'
-- using the Primary Key. 
-- Gets: @sContactID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_CustomerContact_Delete]
	@sContactID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[CustomerContact]
WHERE
	[ContactID] = @sContactID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_CustomerContact_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_CustomerContact_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'CustomerContact'
-- based on the Primary Key.
-- Gets: @sContactID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_CustomerContact_SelectOne]
	@sContactID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[ContactID],
	[CustomerID],
	[Payment_term_id],
	[Tax_code_id],
	[Billing_address],
	[Billing_city],
	[Billing_state],
	[Billing_country],
	[Billing_zip],
	[Billing_phone],
	[Billing_email],
	[Shipping_address1],
	[Shipping_city],
	[Shipping_state],
	[Shipping_country],
	[Shipping_zip],
	[Shipping_phone],
	[Shipping_email],
	[BankName],
	[AccountName],
	[Account_number],
	[Credit_limit],
	[Currency],
	[Balance],
	[Discount],
	[Parent_id],
	[Tax_agent]
FROM [dbo].[CustomerContact]
WHERE
	[ContactID] = @sContactID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_CustomerContact_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_CustomerContact_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'CustomerContact'
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_CustomerContact_SelectAll]
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[ContactID],
	[CustomerID],
	[Payment_term_id],
	[Tax_code_id],
	[Billing_address],
	[Billing_city],
	[Billing_state],
	[Billing_country],
	[Billing_zip],
	[Billing_phone],
	[Billing_email],
	[Shipping_address1],
	[Shipping_city],
	[Shipping_state],
	[Shipping_country],
	[Shipping_zip],
	[Shipping_phone],
	[Shipping_email],
	[BankName],
	[AccountName],
	[Account_number],
	[Credit_limit],
	[Currency],
	[Balance],
	[Discount],
	[Parent_id],
	[Tax_agent]
FROM [dbo].[CustomerContact]
ORDER BY 
	[ContactID] ASC
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [Payment_term_id].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_CustomerContact_SelectAllWPayment_term_idLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_CustomerContact_SelectAllWPayment_term_idLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'CustomerContact'
-- based on a foreign key field.
-- Gets: @sPayment_term_id varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_CustomerContact_SelectAllWPayment_term_idLogic]
	@sPayment_term_id varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[ContactID],
	[CustomerID],
	[Payment_term_id],
	[Tax_code_id],
	[Billing_address],
	[Billing_city],
	[Billing_state],
	[Billing_country],
	[Billing_zip],
	[Billing_phone],
	[Billing_email],
	[Shipping_address1],
	[Shipping_city],
	[Shipping_state],
	[Shipping_country],
	[Shipping_zip],
	[Shipping_phone],
	[Shipping_email],
	[BankName],
	[AccountName],
	[Account_number],
	[Credit_limit],
	[Currency],
	[Balance],
	[Discount],
	[Parent_id],
	[Tax_agent]
FROM [dbo].[CustomerContact]
WHERE
	[Payment_term_id] = @sPayment_term_id
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [Tax_code_id].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_CustomerContact_SelectAllWTax_code_idLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_CustomerContact_SelectAllWTax_code_idLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'CustomerContact'
-- based on a foreign key field.
-- Gets: @sTax_code_id varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_CustomerContact_SelectAllWTax_code_idLogic]
	@sTax_code_id varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[ContactID],
	[CustomerID],
	[Payment_term_id],
	[Tax_code_id],
	[Billing_address],
	[Billing_city],
	[Billing_state],
	[Billing_country],
	[Billing_zip],
	[Billing_phone],
	[Billing_email],
	[Shipping_address1],
	[Shipping_city],
	[Shipping_state],
	[Shipping_country],
	[Shipping_zip],
	[Shipping_phone],
	[Shipping_email],
	[BankName],
	[AccountName],
	[Account_number],
	[Credit_limit],
	[Currency],
	[Balance],
	[Discount],
	[Parent_id],
	[Tax_agent]
FROM [dbo].[CustomerContact]
WHERE
	[Tax_code_id] = @sTax_code_id
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     CustomerContact]
-- ========================================================================================================
GO

-- ========================================================================================================
-- [Stored Procedures generated for table:  DeliveryMethod]
GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_DeliveryMethod_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_DeliveryMethod_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'DeliveryMethod'
-- Gets: @sDeliveryMethodID varchar(36)
-- Gets: @sName nvarchar(-1)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_DeliveryMethod_Insert]
	@sDeliveryMethodID varchar(36),
	@sName nvarchar(-1),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[DeliveryMethod]
(
	[DeliveryMethodID],
	[Name]
)
VALUES
(
	@sDeliveryMethodID,
	@sName
)
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_DeliveryMethod_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_DeliveryMethod_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'DeliveryMethod'
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_DeliveryMethod_SelectAll]
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[DeliveryMethodID],
	[Name]
FROM [dbo].[DeliveryMethod]
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     DeliveryMethod]
-- ========================================================================================================
GO

-- ========================================================================================================
-- [Stored Procedures generated for table:  DeliveryNotesDetails]
GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_DeliveryNotesDetails_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_DeliveryNotesDetails_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'DeliveryNotesDetails'
-- Gets: @sID nchar(10)
-- Gets: @sDeliveryNoteID varchar(36)
-- Gets: @sProductID varchar(36)
-- Gets: @sPackage_code varchar(36)
-- Gets: @dcQty decimal(18, 2)
-- Gets: @sFromLocation varchar(36)
-- Gets: @sToLocation varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_DeliveryNotesDetails_Insert]
	@sID nchar(10),
	@sDeliveryNoteID varchar(36),
	@sProductID varchar(36),
	@sPackage_code varchar(36),
	@dcQty decimal(18, 2),
	@sFromLocation varchar(36),
	@sToLocation varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[DeliveryNotesDetails]
(
	[ID],
	[DeliveryNoteID],
	[ProductID],
	[Package_code],
	[Qty],
	[FromLocation],
	[ToLocation]
)
VALUES
(
	@sID,
	@sDeliveryNoteID,
	@sProductID,
	@sPackage_code,
	@dcQty,
	@sFromLocation,
	@sToLocation
)
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_DeliveryNotesDetails_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_DeliveryNotesDetails_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'DeliveryNotesDetails'
-- Gets: @sID nchar(10)
-- Gets: @sDeliveryNoteID varchar(36)
-- Gets: @sProductID varchar(36)
-- Gets: @sPackage_code varchar(36)
-- Gets: @dcQty decimal(18, 2)
-- Gets: @sFromLocation varchar(36)
-- Gets: @sToLocation varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_DeliveryNotesDetails_Update]
	@sID nchar(10),
	@sDeliveryNoteID varchar(36),
	@sProductID varchar(36),
	@sPackage_code varchar(36),
	@dcQty decimal(18, 2),
	@sFromLocation varchar(36),
	@sToLocation varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[DeliveryNotesDetails]
SET 
	[DeliveryNoteID] = @sDeliveryNoteID,
	[ProductID] = @sProductID,
	[Package_code] = @sPackage_code,
	[Qty] = @dcQty,
	[FromLocation] = @sFromLocation,
	[ToLocation] = @sToLocation
WHERE
	[ID] = @sID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [DeliveryNoteID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_DeliveryNotesDetails_UpdateAllWDeliveryNoteIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_DeliveryNotesDetails_UpdateAllWDeliveryNoteIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'DeliveryNotesDetails'.
-- Will reset field [DeliveryNoteID] with value @sDeliveryNoteIDOld  to value @sDeliveryNoteID
-- Gets: @sDeliveryNoteID varchar(36)
-- Gets: @sDeliveryNoteIDOld varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_DeliveryNotesDetails_UpdateAllWDeliveryNoteIDLogic]
	@sDeliveryNoteID varchar(36),
	@sDeliveryNoteIDOld varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[DeliveryNotesDetails]
SET
	[DeliveryNoteID] = @sDeliveryNoteID
WHERE
	[DeliveryNoteID] = @sDeliveryNoteIDOld
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_DeliveryNotesDetails_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_DeliveryNotesDetails_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'DeliveryNotesDetails'
-- using the Primary Key. 
-- Gets: @sID nchar(10)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_DeliveryNotesDetails_Delete]
	@sID nchar(10),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[DeliveryNotesDetails]
WHERE
	[ID] = @sID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_DeliveryNotesDetails_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_DeliveryNotesDetails_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'DeliveryNotesDetails'
-- based on the Primary Key.
-- Gets: @sID nchar(10)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_DeliveryNotesDetails_SelectOne]
	@sID nchar(10),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[ID],
	[DeliveryNoteID],
	[ProductID],
	[Package_code],
	[Qty],
	[FromLocation],
	[ToLocation]
FROM [dbo].[DeliveryNotesDetails]
WHERE
	[ID] = @sID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_DeliveryNotesDetails_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_DeliveryNotesDetails_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'DeliveryNotesDetails'
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_DeliveryNotesDetails_SelectAll]
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[ID],
	[DeliveryNoteID],
	[ProductID],
	[Package_code],
	[Qty],
	[FromLocation],
	[ToLocation]
FROM [dbo].[DeliveryNotesDetails]
ORDER BY 
	[ID] ASC
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [DeliveryNoteID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_DeliveryNotesDetails_SelectAllWDeliveryNoteIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_DeliveryNotesDetails_SelectAllWDeliveryNoteIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'DeliveryNotesDetails'
-- based on a foreign key field.
-- Gets: @sDeliveryNoteID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_DeliveryNotesDetails_SelectAllWDeliveryNoteIDLogic]
	@sDeliveryNoteID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[ID],
	[DeliveryNoteID],
	[ProductID],
	[Package_code],
	[Qty],
	[FromLocation],
	[ToLocation]
FROM [dbo].[DeliveryNotesDetails]
WHERE
	[DeliveryNoteID] = @sDeliveryNoteID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     DeliveryNotesDetails]
-- ========================================================================================================
GO

-- ========================================================================================================
-- [Stored Procedures generated for table:  DeliveryNotesMaster]
GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_DeliveryNotesMaster_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_DeliveryNotesMaster_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'DeliveryNotesMaster'
-- Gets: @sID varchar(36)
-- Gets: @sDNID varchar(36)
-- Gets: @daDateCreated datetime
-- Gets: @sReferenceNo varchar(100)
-- Gets: @sDeliveryMethodID varchar(36)
-- Gets: @curCost1 money
-- Gets: @curCost2 money
-- Gets: @sUserID varchar(36)
-- Gets: @daLastUpdatedDate datetime
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_DeliveryNotesMaster_Insert]
	@sID varchar(36),
	@sDNID varchar(36),
	@daDateCreated datetime,
	@sReferenceNo varchar(100),
	@sDeliveryMethodID varchar(36),
	@curCost1 money,
	@curCost2 money,
	@sUserID varchar(36),
	@daLastUpdatedDate datetime,
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[DeliveryNotesMaster]
(
	[ID],
	[DNID],
	[DateCreated],
	[ReferenceNo],
	[DeliveryMethodID],
	[Cost1],
	[Cost2],
	[UserID],
	[LastUpdatedDate]
)
VALUES
(
	@sID,
	@sDNID,
	@daDateCreated,
	@sReferenceNo,
	@sDeliveryMethodID,
	@curCost1,
	@curCost2,
	@sUserID,
	@daLastUpdatedDate
)
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_DeliveryNotesMaster_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_DeliveryNotesMaster_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'DeliveryNotesMaster'
-- Gets: @sID varchar(36)
-- Gets: @sDNID varchar(36)
-- Gets: @daDateCreated datetime
-- Gets: @sReferenceNo varchar(100)
-- Gets: @sDeliveryMethodID varchar(36)
-- Gets: @curCost1 money
-- Gets: @curCost2 money
-- Gets: @sUserID varchar(36)
-- Gets: @daLastUpdatedDate datetime
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_DeliveryNotesMaster_Update]
	@sID varchar(36),
	@sDNID varchar(36),
	@daDateCreated datetime,
	@sReferenceNo varchar(100),
	@sDeliveryMethodID varchar(36),
	@curCost1 money,
	@curCost2 money,
	@sUserID varchar(36),
	@daLastUpdatedDate datetime,
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[DeliveryNotesMaster]
SET 
	[DNID] = @sDNID,
	[DateCreated] = @daDateCreated,
	[ReferenceNo] = @sReferenceNo,
	[DeliveryMethodID] = @sDeliveryMethodID,
	[Cost1] = @curCost1,
	[Cost2] = @curCost2,
	[UserID] = @sUserID,
	[LastUpdatedDate] = @daLastUpdatedDate
WHERE
	[ID] = @sID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [UserID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_DeliveryNotesMaster_UpdateAllWUserIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_DeliveryNotesMaster_UpdateAllWUserIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'DeliveryNotesMaster'.
-- Will reset field [UserID] with value @sUserIDOld  to value @sUserID
-- Gets: @sUserID varchar(36)
-- Gets: @sUserIDOld varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_DeliveryNotesMaster_UpdateAllWUserIDLogic]
	@sUserID varchar(36),
	@sUserIDOld varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[DeliveryNotesMaster]
SET
	[UserID] = @sUserID
WHERE
	[UserID] = @sUserIDOld
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_DeliveryNotesMaster_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_DeliveryNotesMaster_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'DeliveryNotesMaster'
-- using the Primary Key. 
-- Gets: @sID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_DeliveryNotesMaster_Delete]
	@sID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[DeliveryNotesMaster]
WHERE
	[ID] = @sID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_DeliveryNotesMaster_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_DeliveryNotesMaster_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'DeliveryNotesMaster'
-- based on the Primary Key.
-- Gets: @sID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_DeliveryNotesMaster_SelectOne]
	@sID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[ID],
	[DNID],
	[DateCreated],
	[ReferenceNo],
	[DeliveryMethodID],
	[Cost1],
	[Cost2],
	[UserID],
	[LastUpdatedDate]
FROM [dbo].[DeliveryNotesMaster]
WHERE
	[ID] = @sID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_DeliveryNotesMaster_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_DeliveryNotesMaster_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'DeliveryNotesMaster'
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_DeliveryNotesMaster_SelectAll]
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[ID],
	[DNID],
	[DateCreated],
	[ReferenceNo],
	[DeliveryMethodID],
	[Cost1],
	[Cost2],
	[UserID],
	[LastUpdatedDate]
FROM [dbo].[DeliveryNotesMaster]
ORDER BY 
	[ID] ASC
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [UserID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_DeliveryNotesMaster_SelectAllWUserIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_DeliveryNotesMaster_SelectAllWUserIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'DeliveryNotesMaster'
-- based on a foreign key field.
-- Gets: @sUserID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_DeliveryNotesMaster_SelectAllWUserIDLogic]
	@sUserID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[ID],
	[DNID],
	[DateCreated],
	[ReferenceNo],
	[DeliveryMethodID],
	[Cost1],
	[Cost2],
	[UserID],
	[LastUpdatedDate]
FROM [dbo].[DeliveryNotesMaster]
WHERE
	[UserID] = @sUserID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     DeliveryNotesMaster]
-- ========================================================================================================
GO

-- ========================================================================================================
-- [Stored Procedures generated for table:  Image]
GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Image_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Image_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'Image'
-- Gets: @simg_name varchar(50)
-- Gets: @biimg_data binary(50)
-- Gets: @simg_contenttype varchar(50)
-- Returns: @iimg_pk int
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Image_Insert]
	@simg_name varchar(50),
	@biimg_data binary(50),
	@simg_contenttype varchar(50),
	@iimg_pk int OUTPUT,
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[Image]
(
	[img_name],
	[img_data],
	[img_contenttype]
)
VALUES
(
	@simg_name,
	@biimg_data,
	@simg_contenttype
)
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @iimg_pk=SCOPE_IDENTITY()
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Image_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Image_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'Image'
-- Gets: @iimg_pk int
-- Gets: @simg_name varchar(50)
-- Gets: @biimg_data binary(50)
-- Gets: @simg_contenttype varchar(50)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Image_Update]
	@iimg_pk int,
	@simg_name varchar(50),
	@biimg_data binary(50),
	@simg_contenttype varchar(50),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[Image]
SET 
	[img_name] = @simg_name,
	[img_data] = @biimg_data,
	[img_contenttype] = @simg_contenttype
WHERE
	[img_pk] = @iimg_pk
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Image_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Image_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'Image'
-- using the Primary Key. 
-- Gets: @iimg_pk int
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Image_Delete]
	@iimg_pk int,
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[Image]
WHERE
	[img_pk] = @iimg_pk
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Image_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Image_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'Image'
-- based on the Primary Key.
-- Gets: @iimg_pk int
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Image_SelectOne]
	@iimg_pk int,
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[img_pk],
	[img_name],
	[img_data],
	[img_contenttype]
FROM [dbo].[Image]
WHERE
	[img_pk] = @iimg_pk
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Image_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Image_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'Image'
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Image_SelectAll]
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[img_pk],
	[img_name],
	[img_data],
	[img_contenttype]
FROM [dbo].[Image]
ORDER BY 
	[img_pk] ASC
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     Image]
-- ========================================================================================================
GO

-- ========================================================================================================
-- [Stored Procedures generated for table:  Languages]
GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Languages_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Languages_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'Languages'
-- Gets: @sStringID varchar(50)
-- Gets: @sLang1 nvarchar(-1)
-- Gets: @sLang2 nvarchar(-1)
-- Gets: @sLang3 nvarchar(-1)
-- Gets: @sLang4 nvarchar(-1)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Languages_Insert]
	@sStringID varchar(50),
	@sLang1 nvarchar(-1),
	@sLang2 nvarchar(-1),
	@sLang3 nvarchar(-1),
	@sLang4 nvarchar(-1),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[Languages]
(
	[StringID],
	[Lang1],
	[Lang2],
	[Lang3],
	[Lang4]
)
VALUES
(
	@sStringID,
	@sLang1,
	@sLang2,
	@sLang3,
	@sLang4
)
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Languages_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Languages_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'Languages'
-- Gets: @sStringID varchar(50)
-- Gets: @sLang1 nvarchar(-1)
-- Gets: @sLang2 nvarchar(-1)
-- Gets: @sLang3 nvarchar(-1)
-- Gets: @sLang4 nvarchar(-1)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Languages_Update]
	@sStringID varchar(50),
	@sLang1 nvarchar(-1),
	@sLang2 nvarchar(-1),
	@sLang3 nvarchar(-1),
	@sLang4 nvarchar(-1),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[Languages]
SET 
	[Lang1] = @sLang1,
	[Lang2] = @sLang2,
	[Lang3] = @sLang3,
	[Lang4] = @sLang4
WHERE
	[StringID] = @sStringID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Languages_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Languages_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'Languages'
-- using the Primary Key. 
-- Gets: @sStringID varchar(50)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Languages_Delete]
	@sStringID varchar(50),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[Languages]
WHERE
	[StringID] = @sStringID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Languages_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Languages_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'Languages'
-- based on the Primary Key.
-- Gets: @sStringID varchar(50)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Languages_SelectOne]
	@sStringID varchar(50),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[StringID],
	[Lang1],
	[Lang2],
	[Lang3],
	[Lang4]
FROM [dbo].[Languages]
WHERE
	[StringID] = @sStringID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Languages_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Languages_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'Languages'
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Languages_SelectAll]
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[StringID],
	[Lang1],
	[Lang2],
	[Lang3],
	[Lang4]
FROM [dbo].[Languages]
ORDER BY 
	[StringID] ASC
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     Languages]
-- ========================================================================================================
GO

-- ========================================================================================================
-- [Stored Procedures generated for table:  LeadTimeHistory]
GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_LeadTimeHistory_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_LeadTimeHistory_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'LeadTimeHistory'
-- Gets: @sID varchar(36)
-- Gets: @sProductID varchar(36)
-- Gets: @iLeadTimeMini int
-- Gets: @iLeadTimeMax int
-- Gets: @sUserID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_LeadTimeHistory_Insert]
	@sID varchar(36),
	@sProductID varchar(36),
	@iLeadTimeMini int,
	@iLeadTimeMax int,
	@sUserID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[LeadTimeHistory]
(
	[ID],
	[ProductID],
	[LeadTimeMini],
	[LeadTimeMax],
	[UserID]
)
VALUES
(
	@sID,
	@sProductID,
	@iLeadTimeMini,
	@iLeadTimeMax,
	@sUserID
)
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_LeadTimeHistory_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_LeadTimeHistory_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'LeadTimeHistory'
-- Gets: @sID varchar(36)
-- Gets: @sProductID varchar(36)
-- Gets: @iLeadTimeMini int
-- Gets: @iLeadTimeMax int
-- Gets: @sUserID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_LeadTimeHistory_Update]
	@sID varchar(36),
	@sProductID varchar(36),
	@iLeadTimeMini int,
	@iLeadTimeMax int,
	@sUserID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[LeadTimeHistory]
SET 
	[LeadTimeMini] = @iLeadTimeMini,
	[LeadTimeMax] = @iLeadTimeMax,
	[UserID] = @sUserID
WHERE
	[ID] = @sID
	AND [ProductID] = @sProductID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_LeadTimeHistory_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_LeadTimeHistory_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'LeadTimeHistory'
-- using the Primary Key. 
-- Gets: @sID varchar(36)
-- Gets: @sProductID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_LeadTimeHistory_Delete]
	@sID varchar(36),
	@sProductID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[LeadTimeHistory]
WHERE
	[ID] = @sID
	AND [ProductID] = @sProductID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using PK field [ID]
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_LeadTimeHistory_DeleteWIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_LeadTimeHistory_DeleteWIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete one or more  existing rows from the table 'LeadTimeHistory'
-- using the Primary Key field [ID]. 
-- Gets: @sID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_LeadTimeHistory_DeleteWIDLogic]
	@sID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE one or more existing rows from the table.
DELETE FROM [dbo].[LeadTimeHistory]
WHERE
	[ID] = @sID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using PK field [ProductID]
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_LeadTimeHistory_DeleteWProductIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_LeadTimeHistory_DeleteWProductIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete one or more  existing rows from the table 'LeadTimeHistory'
-- using the Primary Key field [ProductID]. 
-- Gets: @sProductID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_LeadTimeHistory_DeleteWProductIDLogic]
	@sProductID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE one or more existing rows from the table.
DELETE FROM [dbo].[LeadTimeHistory]
WHERE
	[ProductID] = @sProductID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_LeadTimeHistory_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_LeadTimeHistory_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'LeadTimeHistory'
-- based on the Primary Key.
-- Gets: @sID varchar(36)
-- Gets: @sProductID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_LeadTimeHistory_SelectOne]
	@sID varchar(36),
	@sProductID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[ID],
	[ProductID],
	[Timestamp],
	[LeadTimeMini],
	[LeadTimeMax],
	[UserID]
FROM [dbo].[LeadTimeHistory]
WHERE
	[ID] = @sID
	AND [ProductID] = @sProductID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_LeadTimeHistory_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_LeadTimeHistory_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'LeadTimeHistory'
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_LeadTimeHistory_SelectAll]
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[ID],
	[ProductID],
	[Timestamp],
	[LeadTimeMini],
	[LeadTimeMax],
	[UserID]
FROM [dbo].[LeadTimeHistory]
ORDER BY 
	[ID] ASC
	, [ProductID] ASC
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     LeadTimeHistory]
-- ========================================================================================================
GO

-- ========================================================================================================
-- [Stored Procedures generated for table:  Location_Master]
GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Location_Master_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Location_Master_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'Location_Master'
-- Gets: @sWarehouse_id varchar(36)
-- Gets: @sBin_location_id varchar(36)
-- Gets: @iSequence int
-- Gets: @sProduct_id varchar(36)
-- Gets: @sPackage_Code varchar(36)
-- Gets: @iQty_on_hand int
-- Gets: @iQty_allocated int
-- Gets: @daDate_last_unpack datetime
-- Gets: @daDate_Last_Picked datetime
-- Gets: @sReserved_code nvarchar(1)
-- Gets: @daReserved_Date datetime
-- Gets: @iQty_unpack int
-- Gets: @sUserID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Location_Master_Insert]
	@sWarehouse_id varchar(36),
	@sBin_location_id varchar(36),
	@iSequence int,
	@sProduct_id varchar(36),
	@sPackage_Code varchar(36),
	@iQty_on_hand int,
	@iQty_allocated int,
	@daDate_last_unpack datetime,
	@daDate_Last_Picked datetime,
	@sReserved_code nvarchar(1),
	@daReserved_Date datetime,
	@iQty_unpack int,
	@sUserID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[Location_Master]
(
	[Warehouse_id],
	[Bin_location_id],
	[Sequence],
	[Product_id],
	[Package Code],
	[Qty_on_hand],
	[Qty_allocated],
	[Date_last_unpack],
	[Date_Last_Picked],
	[Reserved_code],
	[Reserved_Date],
	[Qty_unpack],
	[UserID]
)
VALUES
(
	@sWarehouse_id,
	ISNULL(@sBin_location_id, (newid())),
	@iSequence,
	@sProduct_id,
	@sPackage_Code,
	@iQty_on_hand,
	@iQty_allocated,
	@daDate_last_unpack,
	@daDate_Last_Picked,
	@sReserved_code,
	@daReserved_Date,
	@iQty_unpack,
	@sUserID
)
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Location_Master_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Location_Master_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'Location_Master'
-- Gets: @sWarehouse_id varchar(36)
-- Gets: @sBin_location_id varchar(36)
-- Gets: @iSequence int
-- Gets: @sProduct_id varchar(36)
-- Gets: @sPackage_Code varchar(36)
-- Gets: @iQty_on_hand int
-- Gets: @iQty_allocated int
-- Gets: @daDate_last_unpack datetime
-- Gets: @daDate_Last_Picked datetime
-- Gets: @sReserved_code nvarchar(1)
-- Gets: @daReserved_Date datetime
-- Gets: @iQty_unpack int
-- Gets: @sUserID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Location_Master_Update]
	@sWarehouse_id varchar(36),
	@sBin_location_id varchar(36),
	@iSequence int,
	@sProduct_id varchar(36),
	@sPackage_Code varchar(36),
	@iQty_on_hand int,
	@iQty_allocated int,
	@daDate_last_unpack datetime,
	@daDate_Last_Picked datetime,
	@sReserved_code nvarchar(1),
	@daReserved_Date datetime,
	@iQty_unpack int,
	@sUserID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[Location_Master]
SET 
	[Product_id] = @sProduct_id,
	[Package Code] = @sPackage_Code,
	[Qty_on_hand] = @iQty_on_hand,
	[Qty_allocated] = @iQty_allocated,
	[Date_last_unpack] = @daDate_last_unpack,
	[Date_Last_Picked] = @daDate_Last_Picked,
	[Reserved_code] = @sReserved_code,
	[Reserved_Date] = @daReserved_Date,
	[Qty_unpack] = @iQty_unpack,
	[UserID] = @sUserID
WHERE
	[Warehouse_id] = @sWarehouse_id
	AND [Bin_location_id] = @sBin_location_id
	AND [Sequence] = @iSequence
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Location_Master_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Location_Master_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'Location_Master'
-- using the Primary Key. 
-- Gets: @sWarehouse_id varchar(36)
-- Gets: @sBin_location_id varchar(36)
-- Gets: @iSequence int
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Location_Master_Delete]
	@sWarehouse_id varchar(36),
	@sBin_location_id varchar(36),
	@iSequence int,
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[Location_Master]
WHERE
	[Warehouse_id] = @sWarehouse_id
	AND [Bin_location_id] = @sBin_location_id
	AND [Sequence] = @iSequence
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using PK field [Warehouse_id]
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Location_Master_DeleteWWarehouse_idLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Location_Master_DeleteWWarehouse_idLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete one or more  existing rows from the table 'Location_Master'
-- using the Primary Key field [Warehouse_id]. 
-- Gets: @sWarehouse_id varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Location_Master_DeleteWWarehouse_idLogic]
	@sWarehouse_id varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE one or more existing rows from the table.
DELETE FROM [dbo].[Location_Master]
WHERE
	[Warehouse_id] = @sWarehouse_id
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using PK field [Bin_location_id]
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Location_Master_DeleteWBin_location_idLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Location_Master_DeleteWBin_location_idLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete one or more  existing rows from the table 'Location_Master'
-- using the Primary Key field [Bin_location_id]. 
-- Gets: @sBin_location_id varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Location_Master_DeleteWBin_location_idLogic]
	@sBin_location_id varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE one or more existing rows from the table.
DELETE FROM [dbo].[Location_Master]
WHERE
	[Bin_location_id] = @sBin_location_id
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using PK field [Sequence]
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Location_Master_DeleteWSequenceLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Location_Master_DeleteWSequenceLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete one or more  existing rows from the table 'Location_Master'
-- using the Primary Key field [Sequence]. 
-- Gets: @iSequence int
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Location_Master_DeleteWSequenceLogic]
	@iSequence int,
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE one or more existing rows from the table.
DELETE FROM [dbo].[Location_Master]
WHERE
	[Sequence] = @iSequence
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Location_Master_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Location_Master_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'Location_Master'
-- based on the Primary Key.
-- Gets: @sWarehouse_id varchar(36)
-- Gets: @sBin_location_id varchar(36)
-- Gets: @iSequence int
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Location_Master_SelectOne]
	@sWarehouse_id varchar(36),
	@sBin_location_id varchar(36),
	@iSequence int,
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[Warehouse_id],
	[Bin_location_id],
	[Sequence],
	[Product_id],
	[Package Code],
	[Qty_on_hand],
	[Qty_allocated],
	[Date_last_unpack],
	[Date_Last_Picked],
	[Reserved_code],
	[Reserved_Date],
	[Qty_unpack],
	[UserID],
	[TimeStamp]
FROM [dbo].[Location_Master]
WHERE
	[Warehouse_id] = @sWarehouse_id
	AND [Bin_location_id] = @sBin_location_id
	AND [Sequence] = @iSequence
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Location_Master_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Location_Master_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'Location_Master'
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Location_Master_SelectAll]
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[Warehouse_id],
	[Bin_location_id],
	[Sequence],
	[Product_id],
	[Package Code],
	[Qty_on_hand],
	[Qty_allocated],
	[Date_last_unpack],
	[Date_Last_Picked],
	[Reserved_code],
	[Reserved_Date],
	[Qty_unpack],
	[UserID],
	[TimeStamp]
FROM [dbo].[Location_Master]
ORDER BY 
	[Warehouse_id] ASC
	, [Bin_location_id] ASC
	, [Sequence] ASC
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     Location_Master]
-- ========================================================================================================
GO

-- ========================================================================================================
-- [Stored Procedures generated for table:  LocationHistory]
GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_LocationHistory_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_LocationHistory_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'LocationHistory'
-- Gets: @sID varchar(36)
-- Gets: @sProductID nchar(10)
-- Gets: @sLocationID varchar(36)
-- Gets: @sUserID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_LocationHistory_Insert]
	@sID varchar(36),
	@sProductID nchar(10),
	@sLocationID varchar(36),
	@sUserID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[LocationHistory]
(
	[ID],
	[ProductID],
	[LocationID],
	[UserID]
)
VALUES
(
	@sID,
	@sProductID,
	@sLocationID,
	@sUserID
)
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_LocationHistory_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_LocationHistory_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'LocationHistory'
-- Gets: @sID varchar(36)
-- Gets: @sProductID nchar(10)
-- Gets: @sLocationID varchar(36)
-- Gets: @sUserID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_LocationHistory_Update]
	@sID varchar(36),
	@sProductID nchar(10),
	@sLocationID varchar(36),
	@sUserID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[LocationHistory]
SET 
	[LocationID] = @sLocationID,
	[UserID] = @sUserID
WHERE
	[ID] = @sID
	AND [ProductID] = @sProductID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [UserID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_LocationHistory_UpdateAllWUserIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_LocationHistory_UpdateAllWUserIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'LocationHistory'.
-- Will reset field [UserID] with value @sUserIDOld  to value @sUserID
-- Gets: @sUserID varchar(36)
-- Gets: @sUserIDOld varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_LocationHistory_UpdateAllWUserIDLogic]
	@sUserID varchar(36),
	@sUserIDOld varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[LocationHistory]
SET
	[UserID] = @sUserID
WHERE
	[UserID] = @sUserIDOld
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_LocationHistory_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_LocationHistory_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'LocationHistory'
-- using the Primary Key. 
-- Gets: @sID varchar(36)
-- Gets: @sProductID nchar(10)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_LocationHistory_Delete]
	@sID varchar(36),
	@sProductID nchar(10),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[LocationHistory]
WHERE
	[ID] = @sID
	AND [ProductID] = @sProductID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using PK field [ID]
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_LocationHistory_DeleteWIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_LocationHistory_DeleteWIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete one or more  existing rows from the table 'LocationHistory'
-- using the Primary Key field [ID]. 
-- Gets: @sID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_LocationHistory_DeleteWIDLogic]
	@sID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE one or more existing rows from the table.
DELETE FROM [dbo].[LocationHistory]
WHERE
	[ID] = @sID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using PK field [ProductID]
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_LocationHistory_DeleteWProductIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_LocationHistory_DeleteWProductIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete one or more  existing rows from the table 'LocationHistory'
-- using the Primary Key field [ProductID]. 
-- Gets: @sProductID nchar(10)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_LocationHistory_DeleteWProductIDLogic]
	@sProductID nchar(10),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE one or more existing rows from the table.
DELETE FROM [dbo].[LocationHistory]
WHERE
	[ProductID] = @sProductID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_LocationHistory_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_LocationHistory_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'LocationHistory'
-- based on the Primary Key.
-- Gets: @sID varchar(36)
-- Gets: @sProductID nchar(10)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_LocationHistory_SelectOne]
	@sID varchar(36),
	@sProductID nchar(10),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[ID],
	[ProductID],
	[LocationID],
	[UserID],
	[Timestamp]
FROM [dbo].[LocationHistory]
WHERE
	[ID] = @sID
	AND [ProductID] = @sProductID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_LocationHistory_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_LocationHistory_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'LocationHistory'
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_LocationHistory_SelectAll]
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[ID],
	[ProductID],
	[LocationID],
	[UserID],
	[Timestamp]
FROM [dbo].[LocationHistory]
ORDER BY 
	[ID] ASC
	, [ProductID] ASC
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [ProductID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_LocationHistory_SelectAllWProductIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_LocationHistory_SelectAllWProductIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'LocationHistory'
-- based on a foreign key field.
-- Gets: @sProductID nchar(10)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_LocationHistory_SelectAllWProductIDLogic]
	@sProductID nchar(10),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[ID],
	[ProductID],
	[LocationID],
	[UserID],
	[Timestamp]
FROM [dbo].[LocationHistory]
WHERE
	[ProductID] = @sProductID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [UserID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_LocationHistory_SelectAllWUserIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_LocationHistory_SelectAllWUserIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'LocationHistory'
-- based on a foreign key field.
-- Gets: @sUserID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_LocationHistory_SelectAllWUserIDLogic]
	@sUserID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[ID],
	[ProductID],
	[LocationID],
	[UserID],
	[Timestamp]
FROM [dbo].[LocationHistory]
WHERE
	[UserID] = @sUserID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     LocationHistory]
-- ========================================================================================================
GO

-- ========================================================================================================
-- [Stored Procedures generated for table:  MemberContact]
GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_MemberContact_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_MemberContact_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'MemberContact'
-- Gets: @sContactID varchar(36)
-- Gets: @sMemberID varchar(50)
-- Gets: @sMembershipCardID varchar(50)
-- Gets: @sMembershipID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_MemberContact_Insert]
	@sContactID varchar(36),
	@sMemberID varchar(50),
	@sMembershipCardID varchar(50),
	@sMembershipID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[MemberContact]
(
	[ContactID],
	[MemberID],
	[MembershipCardID],
	[MembershipID]
)
VALUES
(
	@sContactID,
	@sMemberID,
	@sMembershipCardID,
	@sMembershipID
)
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_MemberContact_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_MemberContact_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'MemberContact'
-- Gets: @sContactID varchar(36)
-- Gets: @sMemberID varchar(50)
-- Gets: @sMembershipCardID varchar(50)
-- Gets: @sMembershipID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_MemberContact_Update]
	@sContactID varchar(36),
	@sMemberID varchar(50),
	@sMembershipCardID varchar(50),
	@sMembershipID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[MemberContact]
SET 
	[MemberID] = @sMemberID,
	[MembershipCardID] = @sMembershipCardID,
	[MembershipID] = @sMembershipID
WHERE
	[ContactID] = @sContactID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_MemberContact_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_MemberContact_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'MemberContact'
-- using the Primary Key. 
-- Gets: @sContactID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_MemberContact_Delete]
	@sContactID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[MemberContact]
WHERE
	[ContactID] = @sContactID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_MemberContact_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_MemberContact_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'MemberContact'
-- based on the Primary Key.
-- Gets: @sContactID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_MemberContact_SelectOne]
	@sContactID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[ContactID],
	[MemberID],
	[MembershipCardID],
	[MembershipID]
FROM [dbo].[MemberContact]
WHERE
	[ContactID] = @sContactID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_MemberContact_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_MemberContact_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'MemberContact'
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_MemberContact_SelectAll]
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[ContactID],
	[MemberID],
	[MembershipCardID],
	[MembershipID]
FROM [dbo].[MemberContact]
ORDER BY 
	[ContactID] ASC
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     MemberContact]
-- ========================================================================================================
GO

-- ========================================================================================================
-- [Stored Procedures generated for table:  Membership]
GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Membership_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Membership_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'Membership'
-- Gets: @sMembershipID varchar(36)
-- Gets: @sMembershipType nvarchar(-1)
-- Gets: @dcDiscount decimal(18, 2)
-- Gets: @sNotes ntext
-- Gets: @bViewStatus bit
-- Gets: @sUserID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Membership_Insert]
	@sMembershipID varchar(36),
	@sMembershipType nvarchar(-1),
	@dcDiscount decimal(18, 2),
	@sNotes ntext,
	@bViewStatus bit,
	@sUserID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[Membership]
(
	[MembershipID],
	[MembershipType],
	[Discount],
	[Notes],
	[ViewStatus],
	[UserID]
)
VALUES
(
	ISNULL(@sMembershipID, (newid())),
	@sMembershipType,
	@dcDiscount,
	@sNotes,
	@bViewStatus,
	@sUserID
)
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Membership_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Membership_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'Membership'
-- Gets: @sMembershipID varchar(36)
-- Gets: @sMembershipType nvarchar(-1)
-- Gets: @dcDiscount decimal(18, 2)
-- Gets: @sNotes ntext
-- Gets: @bViewStatus bit
-- Gets: @sUserID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Membership_Update]
	@sMembershipID varchar(36),
	@sMembershipType nvarchar(-1),
	@dcDiscount decimal(18, 2),
	@sNotes ntext,
	@bViewStatus bit,
	@sUserID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[Membership]
SET 
	[MembershipType] = @sMembershipType,
	[Discount] = @dcDiscount,
	[Notes] = @sNotes,
	[ViewStatus] = @bViewStatus,
	[UserID] = @sUserID
WHERE
	[MembershipID] = @sMembershipID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Membership_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Membership_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'Membership'
-- using the Primary Key. 
-- Gets: @sMembershipID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Membership_Delete]
	@sMembershipID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[Membership]
WHERE
	[MembershipID] = @sMembershipID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Membership_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Membership_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'Membership'
-- based on the Primary Key.
-- Gets: @sMembershipID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Membership_SelectOne]
	@sMembershipID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[MembershipID],
	[MembershipType],
	[Discount],
	[Notes],
	[ViewStatus],
	[UserID],
	[Timestamp]
FROM [dbo].[Membership]
WHERE
	[MembershipID] = @sMembershipID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Membership_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Membership_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'Membership'
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Membership_SelectAll]
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[MembershipID],
	[MembershipType],
	[Discount],
	[Notes],
	[ViewStatus],
	[UserID],
	[Timestamp]
FROM [dbo].[Membership]
ORDER BY 
	[MembershipID] ASC
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     Membership]
-- ========================================================================================================
GO

-- ========================================================================================================
-- [Stored Procedures generated for table:  Module]
GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Module_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Module_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'Module'
-- Gets: @sModuleID varchar(36)
-- Gets: @sModuleName nvarchar(-1)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Module_Insert]
	@sModuleID varchar(36),
	@sModuleName nvarchar(-1),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[Module]
(
	[ModuleID],
	[ModuleName]
)
VALUES
(
	ISNULL(@sModuleID, (newid())),
	@sModuleName
)
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Module_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Module_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'Module'
-- Gets: @sModuleID varchar(36)
-- Gets: @sModuleName nvarchar(-1)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Module_Update]
	@sModuleID varchar(36),
	@sModuleName nvarchar(-1),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[Module]
SET 
	[ModuleName] = @sModuleName
WHERE
	[ModuleID] = @sModuleID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Module_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Module_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'Module'
-- using the Primary Key. 
-- Gets: @sModuleID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Module_Delete]
	@sModuleID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[Module]
WHERE
	[ModuleID] = @sModuleID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Module_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Module_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'Module'
-- based on the Primary Key.
-- Gets: @sModuleID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Module_SelectOne]
	@sModuleID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[ModuleID],
	[ModuleName]
FROM [dbo].[Module]
WHERE
	[ModuleID] = @sModuleID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Module_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Module_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'Module'
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Module_SelectAll]
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[ModuleID],
	[ModuleName]
FROM [dbo].[Module]
ORDER BY 
	[ModuleID] ASC
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     Module]
-- ========================================================================================================
GO

-- ========================================================================================================
-- [Stored Procedures generated for table:  OrderType]
GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_OrderType_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_OrderType_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'OrderType'
-- Gets: @sOrderTypeID varchar(36)
-- Gets: @sOrderTypeName nvarchar(-1)
-- Gets: @sNotes ntext
-- Gets: @bViewStatus bit
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_OrderType_Insert]
	@sOrderTypeID varchar(36),
	@sOrderTypeName nvarchar(-1),
	@sNotes ntext,
	@bViewStatus bit,
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[OrderType]
(
	[OrderTypeID],
	[OrderTypeName],
	[Notes],
	[ViewStatus]
)
VALUES
(
	@sOrderTypeID,
	@sOrderTypeName,
	@sNotes,
	@bViewStatus
)
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_OrderType_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_OrderType_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'OrderType'
-- Gets: @sOrderTypeID varchar(36)
-- Gets: @sOrderTypeName nvarchar(-1)
-- Gets: @sNotes ntext
-- Gets: @bViewStatus bit
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_OrderType_Update]
	@sOrderTypeID varchar(36),
	@sOrderTypeName nvarchar(-1),
	@sNotes ntext,
	@bViewStatus bit,
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[OrderType]
SET 
	[OrderTypeName] = @sOrderTypeName,
	[Notes] = @sNotes,
	[ViewStatus] = @bViewStatus
WHERE
	[OrderTypeID] = @sOrderTypeID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_OrderType_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_OrderType_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'OrderType'
-- using the Primary Key. 
-- Gets: @sOrderTypeID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_OrderType_Delete]
	@sOrderTypeID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[OrderType]
WHERE
	[OrderTypeID] = @sOrderTypeID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_OrderType_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_OrderType_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'OrderType'
-- based on the Primary Key.
-- Gets: @sOrderTypeID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_OrderType_SelectOne]
	@sOrderTypeID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[OrderTypeID],
	[OrderTypeName],
	[Notes],
	[ViewStatus]
FROM [dbo].[OrderType]
WHERE
	[OrderTypeID] = @sOrderTypeID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_OrderType_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_OrderType_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'OrderType'
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_OrderType_SelectAll]
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[OrderTypeID],
	[OrderTypeName],
	[Notes],
	[ViewStatus]
FROM [dbo].[OrderType]
ORDER BY 
	[OrderTypeID] ASC
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     OrderType]
-- ========================================================================================================
GO

-- ========================================================================================================
-- [Stored Procedures generated for table:  Package Type Master]
GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Package Type Master_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Package Type Master_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'Package Type Master'
-- Gets: @sPackage_type varchar(36)
-- Gets: @sStorage_pack_text varchar(50)
-- Gets: @iMax_weight int
-- Gets: @iMax_length int
-- Gets: @iMax_height int
-- Gets: @iMax_width int
-- Gets: @iStorage_volume int
-- Gets: @iType_weight int
-- Gets: @sUserID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Package Type Master_Insert]
	@sPackage_type varchar(36),
	@sStorage_pack_text varchar(50),
	@iMax_weight int,
	@iMax_length int,
	@iMax_height int,
	@iMax_width int,
	@iStorage_volume int,
	@iType_weight int,
	@sUserID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[Package Type Master]
(
	[Package_type],
	[Storage pack text],
	[Max_weight],
	[Max_length],
	[Max_height],
	[Max_width],
	[Storage_volume],
	[Type_weight],
	[UserID]
)
VALUES
(
	ISNULL(@sPackage_type, (newid())),
	@sStorage_pack_text,
	@iMax_weight,
	@iMax_length,
	@iMax_height,
	@iMax_width,
	@iStorage_volume,
	@iType_weight,
	@sUserID
)
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Package Type Master_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Package Type Master_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'Package Type Master'
-- Gets: @sPackage_type varchar(36)
-- Gets: @sStorage_pack_text varchar(50)
-- Gets: @iMax_weight int
-- Gets: @iMax_length int
-- Gets: @iMax_height int
-- Gets: @iMax_width int
-- Gets: @iStorage_volume int
-- Gets: @iType_weight int
-- Gets: @sUserID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Package Type Master_Update]
	@sPackage_type varchar(36),
	@sStorage_pack_text varchar(50),
	@iMax_weight int,
	@iMax_length int,
	@iMax_height int,
	@iMax_width int,
	@iStorage_volume int,
	@iType_weight int,
	@sUserID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[Package Type Master]
SET 
	[Storage pack text] = @sStorage_pack_text,
	[Max_weight] = @iMax_weight,
	[Max_length] = @iMax_length,
	[Max_height] = @iMax_height,
	[Max_width] = @iMax_width,
	[Storage_volume] = @iStorage_volume,
	[Type_weight] = @iType_weight,
	[UserID] = @sUserID
WHERE
	[Package_type] = @sPackage_type
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Package Type Master_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Package Type Master_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'Package Type Master'
-- using the Primary Key. 
-- Gets: @sPackage_type varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Package Type Master_Delete]
	@sPackage_type varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[Package Type Master]
WHERE
	[Package_type] = @sPackage_type
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Package Type Master_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Package Type Master_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'Package Type Master'
-- based on the Primary Key.
-- Gets: @sPackage_type varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Package Type Master_SelectOne]
	@sPackage_type varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[Package_type],
	[Storage pack text],
	[Max_weight],
	[Max_length],
	[Max_height],
	[Max_width],
	[Storage_volume],
	[Type_weight],
	[UserID],
	[Timestamp]
FROM [dbo].[Package Type Master]
WHERE
	[Package_type] = @sPackage_type
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Package Type Master_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Package Type Master_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'Package Type Master'
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Package Type Master_SelectAll]
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[Package_type],
	[Storage pack text],
	[Max_weight],
	[Max_length],
	[Max_height],
	[Max_width],
	[Storage_volume],
	[Type_weight],
	[UserID],
	[Timestamp]
FROM [dbo].[Package Type Master]
ORDER BY 
	[Package_type] ASC
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     Package Type Master]
-- ========================================================================================================
GO

-- ========================================================================================================
-- [Stored Procedures generated for table:  Package_Master]
GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Package_Master_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Package_Master_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'Package_Master'
-- Gets: @sPackage_code nchar(10)
-- Gets: @sPackage_type varchar(36)
-- Gets: @iMin_stock int
-- Gets: @sReplenishment nvarchar(5)
-- Gets: @sUserID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Package_Master_Insert]
	@sPackage_code nchar(10),
	@sPackage_type varchar(36),
	@iMin_stock int,
	@sReplenishment nvarchar(5),
	@sUserID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[Package_Master]
(
	[Package_code],
	[Package_type],
	[Min_stock],
	[Replenishment],
	[UserID]
)
VALUES
(
	ISNULL(@sPackage_code, (newid())),
	@sPackage_type,
	@iMin_stock,
	@sReplenishment,
	@sUserID
)
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Package_Master_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Package_Master_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'Package_Master'
-- Gets: @sPackage_code nchar(10)
-- Gets: @sPackage_type varchar(36)
-- Gets: @iMin_stock int
-- Gets: @sReplenishment nvarchar(5)
-- Gets: @sUserID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Package_Master_Update]
	@sPackage_code nchar(10),
	@sPackage_type varchar(36),
	@iMin_stock int,
	@sReplenishment nvarchar(5),
	@sUserID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[Package_Master]
SET 
	[Package_type] = @sPackage_type,
	[Min_stock] = @iMin_stock,
	[Replenishment] = @sReplenishment,
	[UserID] = @sUserID
WHERE
	[Package_code] = @sPackage_code
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Package_Master_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Package_Master_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'Package_Master'
-- using the Primary Key. 
-- Gets: @sPackage_code nchar(10)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Package_Master_Delete]
	@sPackage_code nchar(10),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[Package_Master]
WHERE
	[Package_code] = @sPackage_code
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Package_Master_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Package_Master_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'Package_Master'
-- based on the Primary Key.
-- Gets: @sPackage_code nchar(10)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Package_Master_SelectOne]
	@sPackage_code nchar(10),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[Package_code],
	[Package_type],
	[Min_stock],
	[Replenishment],
	[UserID],
	[Timestamp]
FROM [dbo].[Package_Master]
WHERE
	[Package_code] = @sPackage_code
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Package_Master_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Package_Master_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'Package_Master'
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Package_Master_SelectAll]
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[Package_code],
	[Package_type],
	[Min_stock],
	[Replenishment],
	[UserID],
	[Timestamp]
FROM [dbo].[Package_Master]
ORDER BY 
	[Package_code] ASC
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     Package_Master]
-- ========================================================================================================
GO

-- ========================================================================================================
-- [Stored Procedures generated for table:  PackingListDetails]
GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_PackingListDetails_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_PackingListDetails_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'PackingListDetails'
-- Gets: @sID varchar(36)
-- Gets: @sPackingListID varchar(36)
-- Gets: @sProductID nchar(10)
-- Gets: @sPackage_code varchar(36)
-- Gets: @dcQty decimal(18, 2)
-- Gets: @sFromLocation varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_PackingListDetails_Insert]
	@sID varchar(36),
	@sPackingListID varchar(36),
	@sProductID nchar(10),
	@sPackage_code varchar(36),
	@dcQty decimal(18, 2),
	@sFromLocation varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[PackingListDetails]
(
	[ID],
	[PackingListID],
	[ProductID],
	[Package_code],
	[Qty],
	[FromLocation]
)
VALUES
(
	@sID,
	@sPackingListID,
	@sProductID,
	@sPackage_code,
	@dcQty,
	@sFromLocation
)
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_PackingListDetails_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_PackingListDetails_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'PackingListDetails'
-- Gets: @sID varchar(36)
-- Gets: @sPackingListID varchar(36)
-- Gets: @sProductID nchar(10)
-- Gets: @sPackage_code varchar(36)
-- Gets: @dcQty decimal(18, 2)
-- Gets: @sFromLocation varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_PackingListDetails_Update]
	@sID varchar(36),
	@sPackingListID varchar(36),
	@sProductID nchar(10),
	@sPackage_code varchar(36),
	@dcQty decimal(18, 2),
	@sFromLocation varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[PackingListDetails]
SET 
	[PackingListID] = @sPackingListID,
	[ProductID] = @sProductID,
	[Package_code] = @sPackage_code,
	[Qty] = @dcQty,
	[FromLocation] = @sFromLocation
WHERE
	[ID] = @sID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [PackingListID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_PackingListDetails_UpdateAllWPackingListIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_PackingListDetails_UpdateAllWPackingListIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'PackingListDetails'.
-- Will reset field [PackingListID] with value @sPackingListIDOld  to value @sPackingListID
-- Gets: @sPackingListID varchar(36)
-- Gets: @sPackingListIDOld varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_PackingListDetails_UpdateAllWPackingListIDLogic]
	@sPackingListID varchar(36),
	@sPackingListIDOld varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[PackingListDetails]
SET
	[PackingListID] = @sPackingListID
WHERE
	[PackingListID] = @sPackingListIDOld
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [ProductID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_PackingListDetails_UpdateAllWProductIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_PackingListDetails_UpdateAllWProductIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'PackingListDetails'.
-- Will reset field [ProductID] with value @sProductIDOld  to value @sProductID
-- Gets: @sProductID nchar(10)
-- Gets: @sProductIDOld nchar(10)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_PackingListDetails_UpdateAllWProductIDLogic]
	@sProductID nchar(10),
	@sProductIDOld nchar(10),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[PackingListDetails]
SET
	[ProductID] = @sProductID
WHERE
	[ProductID] = @sProductIDOld
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_PackingListDetails_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_PackingListDetails_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'PackingListDetails'
-- using the Primary Key. 
-- Gets: @sID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_PackingListDetails_Delete]
	@sID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[PackingListDetails]
WHERE
	[ID] = @sID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_PackingListDetails_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_PackingListDetails_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'PackingListDetails'
-- based on the Primary Key.
-- Gets: @sID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_PackingListDetails_SelectOne]
	@sID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[ID],
	[PackingListID],
	[ProductID],
	[Package_code],
	[Qty],
	[FromLocation]
FROM [dbo].[PackingListDetails]
WHERE
	[ID] = @sID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_PackingListDetails_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_PackingListDetails_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'PackingListDetails'
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_PackingListDetails_SelectAll]
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[ID],
	[PackingListID],
	[ProductID],
	[Package_code],
	[Qty],
	[FromLocation]
FROM [dbo].[PackingListDetails]
ORDER BY 
	[ID] ASC
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [PackingListID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_PackingListDetails_SelectAllWPackingListIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_PackingListDetails_SelectAllWPackingListIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'PackingListDetails'
-- based on a foreign key field.
-- Gets: @sPackingListID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_PackingListDetails_SelectAllWPackingListIDLogic]
	@sPackingListID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[ID],
	[PackingListID],
	[ProductID],
	[Package_code],
	[Qty],
	[FromLocation]
FROM [dbo].[PackingListDetails]
WHERE
	[PackingListID] = @sPackingListID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [ProductID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_PackingListDetails_SelectAllWProductIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_PackingListDetails_SelectAllWProductIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'PackingListDetails'
-- based on a foreign key field.
-- Gets: @sProductID nchar(10)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_PackingListDetails_SelectAllWProductIDLogic]
	@sProductID nchar(10),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[ID],
	[PackingListID],
	[ProductID],
	[Package_code],
	[Qty],
	[FromLocation]
FROM [dbo].[PackingListDetails]
WHERE
	[ProductID] = @sProductID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     PackingListDetails]
-- ========================================================================================================
GO

-- ========================================================================================================
-- [Stored Procedures generated for table:  PackingListMaster]
GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_PackingListMaster_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_PackingListMaster_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'PackingListMaster'
-- Gets: @sPackingListID varchar(36)
-- Gets: @sPackingListName nvarchar(-1)
-- Gets: @daDateCreated datetime
-- Gets: @bViewStatus bit
-- Gets: @sUserID varchar(36)
-- Gets: @daLastUpdatedDate datetime
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_PackingListMaster_Insert]
	@sPackingListID varchar(36),
	@sPackingListName nvarchar(-1),
	@daDateCreated datetime,
	@bViewStatus bit,
	@sUserID varchar(36),
	@daLastUpdatedDate datetime,
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[PackingListMaster]
(
	[PackingListID],
	[PackingListName],
	[DateCreated],
	[ViewStatus],
	[UserID],
	[LastUpdatedDate]
)
VALUES
(
	@sPackingListID,
	@sPackingListName,
	@daDateCreated,
	@bViewStatus,
	@sUserID,
	@daLastUpdatedDate
)
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_PackingListMaster_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_PackingListMaster_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'PackingListMaster'
-- Gets: @sPackingListID varchar(36)
-- Gets: @sPackingListName nvarchar(-1)
-- Gets: @daDateCreated datetime
-- Gets: @bViewStatus bit
-- Gets: @sUserID varchar(36)
-- Gets: @daLastUpdatedDate datetime
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_PackingListMaster_Update]
	@sPackingListID varchar(36),
	@sPackingListName nvarchar(-1),
	@daDateCreated datetime,
	@bViewStatus bit,
	@sUserID varchar(36),
	@daLastUpdatedDate datetime,
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[PackingListMaster]
SET 
	[PackingListName] = @sPackingListName,
	[DateCreated] = @daDateCreated,
	[ViewStatus] = @bViewStatus,
	[UserID] = @sUserID,
	[LastUpdatedDate] = @daLastUpdatedDate
WHERE
	[PackingListID] = @sPackingListID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [UserID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_PackingListMaster_UpdateAllWUserIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_PackingListMaster_UpdateAllWUserIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'PackingListMaster'.
-- Will reset field [UserID] with value @sUserIDOld  to value @sUserID
-- Gets: @sUserID varchar(36)
-- Gets: @sUserIDOld varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_PackingListMaster_UpdateAllWUserIDLogic]
	@sUserID varchar(36),
	@sUserIDOld varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[PackingListMaster]
SET
	[UserID] = @sUserID
WHERE
	[UserID] = @sUserIDOld
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_PackingListMaster_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_PackingListMaster_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'PackingListMaster'
-- using the Primary Key. 
-- Gets: @sPackingListID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_PackingListMaster_Delete]
	@sPackingListID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[PackingListMaster]
WHERE
	[PackingListID] = @sPackingListID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_PackingListMaster_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_PackingListMaster_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'PackingListMaster'
-- based on the Primary Key.
-- Gets: @sPackingListID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_PackingListMaster_SelectOne]
	@sPackingListID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[PackingListID],
	[PackingListName],
	[DateCreated],
	[ViewStatus],
	[UserID],
	[LastUpdatedDate]
FROM [dbo].[PackingListMaster]
WHERE
	[PackingListID] = @sPackingListID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_PackingListMaster_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_PackingListMaster_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'PackingListMaster'
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_PackingListMaster_SelectAll]
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[PackingListID],
	[PackingListName],
	[DateCreated],
	[ViewStatus],
	[UserID],
	[LastUpdatedDate]
FROM [dbo].[PackingListMaster]
ORDER BY 
	[PackingListID] ASC
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [UserID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_PackingListMaster_SelectAllWUserIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_PackingListMaster_SelectAllWUserIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'PackingListMaster'
-- based on a foreign key field.
-- Gets: @sUserID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_PackingListMaster_SelectAllWUserIDLogic]
	@sUserID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[PackingListID],
	[PackingListName],
	[DateCreated],
	[ViewStatus],
	[UserID],
	[LastUpdatedDate]
FROM [dbo].[PackingListMaster]
WHERE
	[UserID] = @sUserID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     PackingListMaster]
-- ========================================================================================================
GO

-- ========================================================================================================
-- [Stored Procedures generated for table:  Payment_Term_Master]
GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Payment_Term_Master_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Payment_Term_Master_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'Payment_Term_Master'
-- Gets: @sPayment_term_id varchar(36)
-- Gets: @sPayment_term_desc nvarchar(50)
-- Gets: @daNet_due_date datetime
-- Gets: @iDiscount int
-- Gets: @iDiscount_payment_period int
-- Gets: @daNet_due_date_advance datetime
-- Gets: @iDiscount_advance int
-- Gets: @iDiscount_period_advance int
-- Gets: @bStandard bit
-- Gets: @sUserID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Payment_Term_Master_Insert]
	@sPayment_term_id varchar(36),
	@sPayment_term_desc nvarchar(50),
	@daNet_due_date datetime,
	@iDiscount int,
	@iDiscount_payment_period int,
	@daNet_due_date_advance datetime,
	@iDiscount_advance int,
	@iDiscount_period_advance int,
	@bStandard bit,
	@sUserID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[Payment_Term_Master]
(
	[Payment_term_id],
	[Payment_term_desc],
	[Net_due_date],
	[Discount],
	[Discount_payment_period],
	[Net_due_date_advance],
	[Discount_advance],
	[Discount_period_advance],
	[Standard],
	[UserID]
)
VALUES
(
	ISNULL(@sPayment_term_id, (newid())),
	@sPayment_term_desc,
	@daNet_due_date,
	@iDiscount,
	@iDiscount_payment_period,
	@daNet_due_date_advance,
	@iDiscount_advance,
	@iDiscount_period_advance,
	@bStandard,
	@sUserID
)
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Payment_Term_Master_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Payment_Term_Master_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'Payment_Term_Master'
-- Gets: @sPayment_term_id varchar(36)
-- Gets: @sPayment_term_desc nvarchar(50)
-- Gets: @daNet_due_date datetime
-- Gets: @iDiscount int
-- Gets: @iDiscount_payment_period int
-- Gets: @daNet_due_date_advance datetime
-- Gets: @iDiscount_advance int
-- Gets: @iDiscount_period_advance int
-- Gets: @bStandard bit
-- Gets: @sUserID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Payment_Term_Master_Update]
	@sPayment_term_id varchar(36),
	@sPayment_term_desc nvarchar(50),
	@daNet_due_date datetime,
	@iDiscount int,
	@iDiscount_payment_period int,
	@daNet_due_date_advance datetime,
	@iDiscount_advance int,
	@iDiscount_period_advance int,
	@bStandard bit,
	@sUserID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[Payment_Term_Master]
SET 
	[Payment_term_desc] = @sPayment_term_desc,
	[Net_due_date] = @daNet_due_date,
	[Discount] = @iDiscount,
	[Discount_payment_period] = @iDiscount_payment_period,
	[Net_due_date_advance] = @daNet_due_date_advance,
	[Discount_advance] = @iDiscount_advance,
	[Discount_period_advance] = @iDiscount_period_advance,
	[Standard] = @bStandard,
	[UserID] = @sUserID
WHERE
	[Payment_term_id] = @sPayment_term_id
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Payment_Term_Master_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Payment_Term_Master_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'Payment_Term_Master'
-- using the Primary Key. 
-- Gets: @sPayment_term_id varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Payment_Term_Master_Delete]
	@sPayment_term_id varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[Payment_Term_Master]
WHERE
	[Payment_term_id] = @sPayment_term_id
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Payment_Term_Master_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Payment_Term_Master_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'Payment_Term_Master'
-- based on the Primary Key.
-- Gets: @sPayment_term_id varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Payment_Term_Master_SelectOne]
	@sPayment_term_id varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[Payment_term_id],
	[Payment_term_desc],
	[Net_due_date],
	[Discount],
	[Discount_payment_period],
	[Net_due_date_advance],
	[Discount_advance],
	[Discount_period_advance],
	[Standard],
	[UserID],
	[Timestamp]
FROM [dbo].[Payment_Term_Master]
WHERE
	[Payment_term_id] = @sPayment_term_id
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Payment_Term_Master_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Payment_Term_Master_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'Payment_Term_Master'
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Payment_Term_Master_SelectAll]
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[Payment_term_id],
	[Payment_term_desc],
	[Net_due_date],
	[Discount],
	[Discount_payment_period],
	[Net_due_date_advance],
	[Discount_advance],
	[Discount_period_advance],
	[Standard],
	[UserID],
	[Timestamp]
FROM [dbo].[Payment_Term_Master]
ORDER BY 
	[Payment_term_id] ASC
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     Payment_Term_Master]
-- ========================================================================================================
GO

-- ========================================================================================================
-- [Stored Procedures generated for table:  PickingListDetails]
GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_PickingListDetails_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_PickingListDetails_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'PickingListDetails'
-- Gets: @iID int
-- Gets: @sPickingListID varchar(36)
-- Gets: @sProductID varchar(36)
-- Gets: @dcQty decimal(18, 2)
-- Gets: @sFromLocation varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_PickingListDetails_Insert]
	@iID int,
	@sPickingListID varchar(36),
	@sProductID varchar(36),
	@dcQty decimal(18, 2),
	@sFromLocation varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[PickingListDetails]
(
	[ID],
	[PickingListID],
	[ProductID],
	[Qty],
	[FromLocation]
)
VALUES
(
	@iID,
	@sPickingListID,
	@sProductID,
	@dcQty,
	@sFromLocation
)
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_PickingListDetails_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_PickingListDetails_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'PickingListDetails'
-- Gets: @iID int
-- Gets: @sPickingListID varchar(36)
-- Gets: @sProductID varchar(36)
-- Gets: @dcQty decimal(18, 2)
-- Gets: @sFromLocation varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_PickingListDetails_Update]
	@iID int,
	@sPickingListID varchar(36),
	@sProductID varchar(36),
	@dcQty decimal(18, 2),
	@sFromLocation varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[PickingListDetails]
SET 
	[PickingListID] = @sPickingListID,
	[ProductID] = @sProductID,
	[Qty] = @dcQty,
	[FromLocation] = @sFromLocation
WHERE
	[ID] = @iID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [PickingListID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_PickingListDetails_UpdateAllWPickingListIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_PickingListDetails_UpdateAllWPickingListIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'PickingListDetails'.
-- Will reset field [PickingListID] with value @sPickingListIDOld  to value @sPickingListID
-- Gets: @sPickingListID varchar(36)
-- Gets: @sPickingListIDOld varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_PickingListDetails_UpdateAllWPickingListIDLogic]
	@sPickingListID varchar(36),
	@sPickingListIDOld varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[PickingListDetails]
SET
	[PickingListID] = @sPickingListID
WHERE
	[PickingListID] = @sPickingListIDOld
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_PickingListDetails_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_PickingListDetails_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'PickingListDetails'
-- using the Primary Key. 
-- Gets: @iID int
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_PickingListDetails_Delete]
	@iID int,
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[PickingListDetails]
WHERE
	[ID] = @iID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_PickingListDetails_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_PickingListDetails_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'PickingListDetails'
-- based on the Primary Key.
-- Gets: @iID int
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_PickingListDetails_SelectOne]
	@iID int,
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[ID],
	[PickingListID],
	[ProductID],
	[Qty],
	[FromLocation]
FROM [dbo].[PickingListDetails]
WHERE
	[ID] = @iID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_PickingListDetails_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_PickingListDetails_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'PickingListDetails'
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_PickingListDetails_SelectAll]
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[ID],
	[PickingListID],
	[ProductID],
	[Qty],
	[FromLocation]
FROM [dbo].[PickingListDetails]
ORDER BY 
	[ID] ASC
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [PickingListID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_PickingListDetails_SelectAllWPickingListIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_PickingListDetails_SelectAllWPickingListIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'PickingListDetails'
-- based on a foreign key field.
-- Gets: @sPickingListID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_PickingListDetails_SelectAllWPickingListIDLogic]
	@sPickingListID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[ID],
	[PickingListID],
	[ProductID],
	[Qty],
	[FromLocation]
FROM [dbo].[PickingListDetails]
WHERE
	[PickingListID] = @sPickingListID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     PickingListDetails]
-- ========================================================================================================
GO

-- ========================================================================================================
-- [Stored Procedures generated for table:  PickingListMaster]
GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_PickingListMaster_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_PickingListMaster_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'PickingListMaster'
-- Gets: @sPickingListID varchar(36)
-- Gets: @sPickingName nvarchar(-1)
-- Gets: @sReferenceNo varchar(50)
-- Gets: @daDateCreated datetime
-- Gets: @sDestLocation varchar(36)
-- Gets: @sDestDepartment varchar(36)
-- Gets: @sOtherDestLocation varchar(-1)
-- Gets: @sNotes ntext
-- Gets: @bViewStatus bit
-- Gets: @sUserID varchar(36)
-- Gets: @daLastUpdatedDate datetime
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_PickingListMaster_Insert]
	@sPickingListID varchar(36),
	@sPickingName nvarchar(-1),
	@sReferenceNo varchar(50),
	@daDateCreated datetime,
	@sDestLocation varchar(36),
	@sDestDepartment varchar(36),
	@sOtherDestLocation varchar(-1),
	@sNotes ntext,
	@bViewStatus bit,
	@sUserID varchar(36),
	@daLastUpdatedDate datetime,
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[PickingListMaster]
(
	[PickingListID],
	[PickingName],
	[ReferenceNo],
	[DateCreated],
	[DestLocation],
	[DestDepartment],
	[OtherDestLocation],
	[Notes],
	[ViewStatus],
	[UserID],
	[LastUpdatedDate]
)
VALUES
(
	@sPickingListID,
	@sPickingName,
	@sReferenceNo,
	@daDateCreated,
	@sDestLocation,
	@sDestDepartment,
	@sOtherDestLocation,
	@sNotes,
	@bViewStatus,
	@sUserID,
	@daLastUpdatedDate
)
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_PickingListMaster_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_PickingListMaster_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'PickingListMaster'
-- Gets: @sPickingListID varchar(36)
-- Gets: @sPickingName nvarchar(-1)
-- Gets: @sReferenceNo varchar(50)
-- Gets: @daDateCreated datetime
-- Gets: @sDestLocation varchar(36)
-- Gets: @sDestDepartment varchar(36)
-- Gets: @sOtherDestLocation varchar(-1)
-- Gets: @sNotes ntext
-- Gets: @bViewStatus bit
-- Gets: @sUserID varchar(36)
-- Gets: @daLastUpdatedDate datetime
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_PickingListMaster_Update]
	@sPickingListID varchar(36),
	@sPickingName nvarchar(-1),
	@sReferenceNo varchar(50),
	@daDateCreated datetime,
	@sDestLocation varchar(36),
	@sDestDepartment varchar(36),
	@sOtherDestLocation varchar(-1),
	@sNotes ntext,
	@bViewStatus bit,
	@sUserID varchar(36),
	@daLastUpdatedDate datetime,
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[PickingListMaster]
SET 
	[PickingName] = @sPickingName,
	[ReferenceNo] = @sReferenceNo,
	[DateCreated] = @daDateCreated,
	[DestLocation] = @sDestLocation,
	[DestDepartment] = @sDestDepartment,
	[OtherDestLocation] = @sOtherDestLocation,
	[Notes] = @sNotes,
	[ViewStatus] = @bViewStatus,
	[UserID] = @sUserID,
	[LastUpdatedDate] = @daLastUpdatedDate
WHERE
	[PickingListID] = @sPickingListID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_PickingListMaster_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_PickingListMaster_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'PickingListMaster'
-- using the Primary Key. 
-- Gets: @sPickingListID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_PickingListMaster_Delete]
	@sPickingListID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[PickingListMaster]
WHERE
	[PickingListID] = @sPickingListID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_PickingListMaster_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_PickingListMaster_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'PickingListMaster'
-- based on the Primary Key.
-- Gets: @sPickingListID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_PickingListMaster_SelectOne]
	@sPickingListID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[PickingListID],
	[PickingName],
	[ReferenceNo],
	[DateCreated],
	[DestLocation],
	[DestDepartment],
	[OtherDestLocation],
	[Notes],
	[ViewStatus],
	[UserID],
	[LastUpdatedDate]
FROM [dbo].[PickingListMaster]
WHERE
	[PickingListID] = @sPickingListID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_PickingListMaster_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_PickingListMaster_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'PickingListMaster'
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_PickingListMaster_SelectAll]
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[PickingListID],
	[PickingName],
	[ReferenceNo],
	[DateCreated],
	[DestLocation],
	[DestDepartment],
	[OtherDestLocation],
	[Notes],
	[ViewStatus],
	[UserID],
	[LastUpdatedDate]
FROM [dbo].[PickingListMaster]
ORDER BY 
	[PickingListID] ASC
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     PickingListMaster]
-- ========================================================================================================
GO

-- ========================================================================================================
-- [Stored Procedures generated for table:  PriceHistory]
GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_PriceHistory_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_PriceHistory_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'PriceHistory'
-- Gets: @sID varchar(36)
-- Gets: @sProductID nchar(10)
-- Gets: @curPrice1 money
-- Gets: @curPrice2 money
-- Gets: @curPrice3 money
-- Gets: @curPriceDiscount1 money
-- Gets: @curPriceDiscount2 money
-- Gets: @curPriceDiscount3 money
-- Gets: @sUserID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_PriceHistory_Insert]
	@sID varchar(36),
	@sProductID nchar(10),
	@curPrice1 money,
	@curPrice2 money,
	@curPrice3 money,
	@curPriceDiscount1 money,
	@curPriceDiscount2 money,
	@curPriceDiscount3 money,
	@sUserID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[PriceHistory]
(
	[ID],
	[ProductID],
	[Price1],
	[Price2],
	[Price3],
	[PriceDiscount1],
	[PriceDiscount2],
	[PriceDiscount3],
	[UserID]
)
VALUES
(
	@sID,
	@sProductID,
	@curPrice1,
	@curPrice2,
	@curPrice3,
	@curPriceDiscount1,
	@curPriceDiscount2,
	@curPriceDiscount3,
	@sUserID
)
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_PriceHistory_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_PriceHistory_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'PriceHistory'
-- Gets: @sID varchar(36)
-- Gets: @sProductID nchar(10)
-- Gets: @curPrice1 money
-- Gets: @curPrice2 money
-- Gets: @curPrice3 money
-- Gets: @curPriceDiscount1 money
-- Gets: @curPriceDiscount2 money
-- Gets: @curPriceDiscount3 money
-- Gets: @sUserID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_PriceHistory_Update]
	@sID varchar(36),
	@sProductID nchar(10),
	@curPrice1 money,
	@curPrice2 money,
	@curPrice3 money,
	@curPriceDiscount1 money,
	@curPriceDiscount2 money,
	@curPriceDiscount3 money,
	@sUserID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[PriceHistory]
SET 
	[ProductID] = @sProductID,
	[Price1] = @curPrice1,
	[Price2] = @curPrice2,
	[Price3] = @curPrice3,
	[PriceDiscount1] = @curPriceDiscount1,
	[PriceDiscount2] = @curPriceDiscount2,
	[PriceDiscount3] = @curPriceDiscount3,
	[UserID] = @sUserID
WHERE
	[ID] = @sID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [ProductID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_PriceHistory_UpdateAllWProductIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_PriceHistory_UpdateAllWProductIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'PriceHistory'.
-- Will reset field [ProductID] with value @sProductIDOld  to value @sProductID
-- Gets: @sProductID nchar(10)
-- Gets: @sProductIDOld nchar(10)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_PriceHistory_UpdateAllWProductIDLogic]
	@sProductID nchar(10),
	@sProductIDOld nchar(10),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[PriceHistory]
SET
	[ProductID] = @sProductID
WHERE
	[ProductID] = @sProductIDOld
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [UserID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_PriceHistory_UpdateAllWUserIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_PriceHistory_UpdateAllWUserIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'PriceHistory'.
-- Will reset field [UserID] with value @sUserIDOld  to value @sUserID
-- Gets: @sUserID varchar(36)
-- Gets: @sUserIDOld varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_PriceHistory_UpdateAllWUserIDLogic]
	@sUserID varchar(36),
	@sUserIDOld varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[PriceHistory]
SET
	[UserID] = @sUserID
WHERE
	[UserID] = @sUserIDOld
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_PriceHistory_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_PriceHistory_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'PriceHistory'
-- using the Primary Key. 
-- Gets: @sID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_PriceHistory_Delete]
	@sID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[PriceHistory]
WHERE
	[ID] = @sID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_PriceHistory_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_PriceHistory_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'PriceHistory'
-- based on the Primary Key.
-- Gets: @sID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_PriceHistory_SelectOne]
	@sID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[ID],
	[ProductID],
	[Price1],
	[Price2],
	[Price3],
	[PriceDiscount1],
	[PriceDiscount2],
	[PriceDiscount3],
	[UserID],
	[Timestamp]
FROM [dbo].[PriceHistory]
WHERE
	[ID] = @sID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_PriceHistory_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_PriceHistory_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'PriceHistory'
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_PriceHistory_SelectAll]
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[ID],
	[ProductID],
	[Price1],
	[Price2],
	[Price3],
	[PriceDiscount1],
	[PriceDiscount2],
	[PriceDiscount3],
	[UserID],
	[Timestamp]
FROM [dbo].[PriceHistory]
ORDER BY 
	[ID] ASC
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [ProductID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_PriceHistory_SelectAllWProductIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_PriceHistory_SelectAllWProductIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'PriceHistory'
-- based on a foreign key field.
-- Gets: @sProductID nchar(10)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_PriceHistory_SelectAllWProductIDLogic]
	@sProductID nchar(10),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[ID],
	[ProductID],
	[Price1],
	[Price2],
	[Price3],
	[PriceDiscount1],
	[PriceDiscount2],
	[PriceDiscount3],
	[UserID],
	[Timestamp]
FROM [dbo].[PriceHistory]
WHERE
	[ProductID] = @sProductID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [UserID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_PriceHistory_SelectAllWUserIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_PriceHistory_SelectAllWUserIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'PriceHistory'
-- based on a foreign key field.
-- Gets: @sUserID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_PriceHistory_SelectAllWUserIDLogic]
	@sUserID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[ID],
	[ProductID],
	[Price1],
	[Price2],
	[Price3],
	[PriceDiscount1],
	[PriceDiscount2],
	[PriceDiscount3],
	[UserID],
	[Timestamp]
FROM [dbo].[PriceHistory]
WHERE
	[UserID] = @sUserID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     PriceHistory]
-- ========================================================================================================
GO

-- ========================================================================================================
-- [Stored Procedures generated for table:  ProductCategory]
GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_ProductCategory_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_ProductCategory_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'ProductCategory'
-- Gets: @sCategoryID varchar(36)
-- Gets: @sCategoryName nvarchar(-1)
-- Gets: @sNote nvarchar(-1)
-- Gets: @bViewStatus bit
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_ProductCategory_Insert]
	@sCategoryID varchar(36),
	@sCategoryName nvarchar(-1),
	@sNote nvarchar(-1),
	@bViewStatus bit,
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[ProductCategory]
(
	[CategoryID],
	[CategoryName],
	[Note],
	[ViewStatus]
)
VALUES
(
	@sCategoryID,
	@sCategoryName,
	@sNote,
	@bViewStatus
)
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_ProductCategory_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_ProductCategory_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'ProductCategory'
-- Gets: @sCategoryID varchar(36)
-- Gets: @sCategoryName nvarchar(-1)
-- Gets: @sNote nvarchar(-1)
-- Gets: @bViewStatus bit
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_ProductCategory_Update]
	@sCategoryID varchar(36),
	@sCategoryName nvarchar(-1),
	@sNote nvarchar(-1),
	@bViewStatus bit,
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[ProductCategory]
SET 
	[CategoryName] = @sCategoryName,
	[Note] = @sNote,
	[ViewStatus] = @bViewStatus
WHERE
	[CategoryID] = @sCategoryID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_ProductCategory_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_ProductCategory_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'ProductCategory'
-- using the Primary Key. 
-- Gets: @sCategoryID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_ProductCategory_Delete]
	@sCategoryID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[ProductCategory]
WHERE
	[CategoryID] = @sCategoryID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_ProductCategory_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_ProductCategory_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'ProductCategory'
-- based on the Primary Key.
-- Gets: @sCategoryID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_ProductCategory_SelectOne]
	@sCategoryID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[CategoryID],
	[CategoryName],
	[Note],
	[ViewStatus]
FROM [dbo].[ProductCategory]
WHERE
	[CategoryID] = @sCategoryID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_ProductCategory_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_ProductCategory_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'ProductCategory'
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_ProductCategory_SelectAll]
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[CategoryID],
	[CategoryName],
	[Note],
	[ViewStatus]
FROM [dbo].[ProductCategory]
ORDER BY 
	[CategoryID] ASC
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     ProductCategory]
-- ========================================================================================================
GO

-- ========================================================================================================
-- [Stored Procedures generated for table:  ProductCategoryInFamily]
GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_ProductCategoryInFamily_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_ProductCategoryInFamily_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'ProductCategoryInFamily'
-- Gets: @sFamilyID varchar(36)
-- Gets: @sCategoryID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_ProductCategoryInFamily_Insert]
	@sFamilyID varchar(36),
	@sCategoryID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[ProductCategoryInFamily]
(
	[FamilyID],
	[CategoryID]
)
VALUES
(
	@sFamilyID,
	@sCategoryID
)
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_ProductCategoryInFamily_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_ProductCategoryInFamily_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'ProductCategoryInFamily'
-- using the Primary Key. 
-- Gets: @sFamilyID varchar(36)
-- Gets: @sCategoryID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_ProductCategoryInFamily_Delete]
	@sFamilyID varchar(36),
	@sCategoryID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[ProductCategoryInFamily]
WHERE
	[FamilyID] = @sFamilyID
	AND [CategoryID] = @sCategoryID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using PK field [FamilyID]
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_ProductCategoryInFamily_DeleteWFamilyIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_ProductCategoryInFamily_DeleteWFamilyIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete one or more  existing rows from the table 'ProductCategoryInFamily'
-- using the Primary Key field [FamilyID]. 
-- Gets: @sFamilyID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_ProductCategoryInFamily_DeleteWFamilyIDLogic]
	@sFamilyID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE one or more existing rows from the table.
DELETE FROM [dbo].[ProductCategoryInFamily]
WHERE
	[FamilyID] = @sFamilyID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using PK field [CategoryID]
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_ProductCategoryInFamily_DeleteWCategoryIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_ProductCategoryInFamily_DeleteWCategoryIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete one or more  existing rows from the table 'ProductCategoryInFamily'
-- using the Primary Key field [CategoryID]. 
-- Gets: @sCategoryID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_ProductCategoryInFamily_DeleteWCategoryIDLogic]
	@sCategoryID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE one or more existing rows from the table.
DELETE FROM [dbo].[ProductCategoryInFamily]
WHERE
	[CategoryID] = @sCategoryID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_ProductCategoryInFamily_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_ProductCategoryInFamily_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'ProductCategoryInFamily'
-- based on the Primary Key.
-- Gets: @sFamilyID varchar(36)
-- Gets: @sCategoryID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_ProductCategoryInFamily_SelectOne]
	@sFamilyID varchar(36),
	@sCategoryID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[FamilyID],
	[CategoryID]
FROM [dbo].[ProductCategoryInFamily]
WHERE
	[FamilyID] = @sFamilyID
	AND [CategoryID] = @sCategoryID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_ProductCategoryInFamily_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_ProductCategoryInFamily_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'ProductCategoryInFamily'
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_ProductCategoryInFamily_SelectAll]
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[FamilyID],
	[CategoryID]
FROM [dbo].[ProductCategoryInFamily]
ORDER BY 
	[FamilyID] ASC
	, [CategoryID] ASC
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [FamilyID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_ProductCategoryInFamily_SelectAllWFamilyIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_ProductCategoryInFamily_SelectAllWFamilyIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'ProductCategoryInFamily'
-- based on a foreign key field.
-- Gets: @sFamilyID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_ProductCategoryInFamily_SelectAllWFamilyIDLogic]
	@sFamilyID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[FamilyID],
	[CategoryID]
FROM [dbo].[ProductCategoryInFamily]
WHERE
	[FamilyID] = @sFamilyID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [CategoryID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_ProductCategoryInFamily_SelectAllWCategoryIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_ProductCategoryInFamily_SelectAllWCategoryIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'ProductCategoryInFamily'
-- based on a foreign key field.
-- Gets: @sCategoryID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_ProductCategoryInFamily_SelectAllWCategoryIDLogic]
	@sCategoryID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[FamilyID],
	[CategoryID]
FROM [dbo].[ProductCategoryInFamily]
WHERE
	[CategoryID] = @sCategoryID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     ProductCategoryInFamily]
-- ========================================================================================================
GO

-- ========================================================================================================
-- [Stored Procedures generated for table:  ProductFamily]
GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_ProductFamily_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_ProductFamily_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'ProductFamily'
-- Gets: @sFamilyID varchar(36)
-- Gets: @sName nvarchar(-1)
-- Gets: @sNote nvarchar(-1)
-- Gets: @bViewStatus bit
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_ProductFamily_Insert]
	@sFamilyID varchar(36),
	@sName nvarchar(-1),
	@sNote nvarchar(-1),
	@bViewStatus bit,
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[ProductFamily]
(
	[FamilyID],
	[Name],
	[Note],
	[ViewStatus]
)
VALUES
(
	@sFamilyID,
	@sName,
	@sNote,
	@bViewStatus
)
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_ProductFamily_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_ProductFamily_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'ProductFamily'
-- Gets: @sFamilyID varchar(36)
-- Gets: @sName nvarchar(-1)
-- Gets: @sNote nvarchar(-1)
-- Gets: @bViewStatus bit
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_ProductFamily_Update]
	@sFamilyID varchar(36),
	@sName nvarchar(-1),
	@sNote nvarchar(-1),
	@bViewStatus bit,
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[ProductFamily]
SET 
	[Name] = @sName,
	[Note] = @sNote,
	[ViewStatus] = @bViewStatus
WHERE
	[FamilyID] = @sFamilyID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_ProductFamily_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_ProductFamily_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'ProductFamily'
-- using the Primary Key. 
-- Gets: @sFamilyID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_ProductFamily_Delete]
	@sFamilyID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[ProductFamily]
WHERE
	[FamilyID] = @sFamilyID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_ProductFamily_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_ProductFamily_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'ProductFamily'
-- based on the Primary Key.
-- Gets: @sFamilyID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_ProductFamily_SelectOne]
	@sFamilyID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[FamilyID],
	[Name],
	[Note],
	[ViewStatus]
FROM [dbo].[ProductFamily]
WHERE
	[FamilyID] = @sFamilyID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_ProductFamily_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_ProductFamily_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'ProductFamily'
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_ProductFamily_SelectAll]
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[FamilyID],
	[Name],
	[Note],
	[ViewStatus]
FROM [dbo].[ProductFamily]
ORDER BY 
	[FamilyID] ASC
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     ProductFamily]
-- ========================================================================================================
GO

-- ========================================================================================================
-- [Stored Procedures generated for table:  ProductLocation]
GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_ProductLocation_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_ProductLocation_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'ProductLocation'
-- Gets: @sID varchar(36)
-- Gets: @sProductID nchar(10)
-- Gets: @sLocationID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_ProductLocation_Insert]
	@sID varchar(36),
	@sProductID nchar(10),
	@sLocationID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[ProductLocation]
(
	[ID],
	[ProductID],
	[LocationID]
)
VALUES
(
	@sID,
	@sProductID,
	@sLocationID
)
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_ProductLocation_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_ProductLocation_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'ProductLocation'
-- Gets: @sID varchar(36)
-- Gets: @sProductID nchar(10)
-- Gets: @sLocationID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_ProductLocation_Update]
	@sID varchar(36),
	@sProductID nchar(10),
	@sLocationID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[ProductLocation]
SET 
	[LocationID] = @sLocationID
WHERE
	[ID] = @sID
	AND [ProductID] = @sProductID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_ProductLocation_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_ProductLocation_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'ProductLocation'
-- using the Primary Key. 
-- Gets: @sID varchar(36)
-- Gets: @sProductID nchar(10)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_ProductLocation_Delete]
	@sID varchar(36),
	@sProductID nchar(10),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[ProductLocation]
WHERE
	[ID] = @sID
	AND [ProductID] = @sProductID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using PK field [ID]
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_ProductLocation_DeleteWIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_ProductLocation_DeleteWIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete one or more  existing rows from the table 'ProductLocation'
-- using the Primary Key field [ID]. 
-- Gets: @sID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_ProductLocation_DeleteWIDLogic]
	@sID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE one or more existing rows from the table.
DELETE FROM [dbo].[ProductLocation]
WHERE
	[ID] = @sID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using PK field [ProductID]
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_ProductLocation_DeleteWProductIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_ProductLocation_DeleteWProductIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete one or more  existing rows from the table 'ProductLocation'
-- using the Primary Key field [ProductID]. 
-- Gets: @sProductID nchar(10)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_ProductLocation_DeleteWProductIDLogic]
	@sProductID nchar(10),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE one or more existing rows from the table.
DELETE FROM [dbo].[ProductLocation]
WHERE
	[ProductID] = @sProductID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_ProductLocation_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_ProductLocation_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'ProductLocation'
-- based on the Primary Key.
-- Gets: @sID varchar(36)
-- Gets: @sProductID nchar(10)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_ProductLocation_SelectOne]
	@sID varchar(36),
	@sProductID nchar(10),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[ID],
	[ProductID],
	[LocationID]
FROM [dbo].[ProductLocation]
WHERE
	[ID] = @sID
	AND [ProductID] = @sProductID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_ProductLocation_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_ProductLocation_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'ProductLocation'
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_ProductLocation_SelectAll]
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[ID],
	[ProductID],
	[LocationID]
FROM [dbo].[ProductLocation]
ORDER BY 
	[ID] ASC
	, [ProductID] ASC
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [ProductID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_ProductLocation_SelectAllWProductIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_ProductLocation_SelectAllWProductIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'ProductLocation'
-- based on a foreign key field.
-- Gets: @sProductID nchar(10)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_ProductLocation_SelectAllWProductIDLogic]
	@sProductID nchar(10),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[ID],
	[ProductID],
	[LocationID]
FROM [dbo].[ProductLocation]
WHERE
	[ProductID] = @sProductID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     ProductLocation]
-- ========================================================================================================
GO

-- ========================================================================================================
-- [Stored Procedures generated for table:  ProductMaster]
GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_ProductMaster_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_ProductMaster_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'ProductMaster'
-- Gets: @sID varchar(36)
-- Gets: @sProductID nchar(10)
-- Gets: @sProductName nvarchar(-1)
-- Gets: @sAlternativeID varchar(50)
-- Gets: @sAlternativeName nvarchar(-1)
-- Gets: @sBarCode varchar(50)
-- Gets: @sFamilyID varchar(36)
-- Gets: @sCategoryID varchar(36)
-- Gets: @sSubCategoryID varchar(36)
-- Gets: @sDescription nvarchar(-1)
-- Gets: @sSupplierID varchar(36)
-- Gets: @sPOSID varchar(36)
-- Gets: @sInvID varchar(36)
-- Gets: @sUOMID varchar(50)
-- Gets: @dcLeadTimeMin decimal(18, 2)
-- Gets: @dcLeadTimeMax decimal(18, 2)
-- Gets: @dcQty decimal(18, 2)
-- Gets: @dcBookedQty decimal(18, 2)
-- Gets: @dcPhysicalStockLevel decimal(18, 2)
-- Gets: @dcSafetyLevel decimal(18, 2)
-- Gets: @dcMiniLevel decimal(18, 2)
-- Gets: @dcMaxLevel decimal(18, 2)
-- Gets: @dcReorderLevel decimal(18, 2)
-- Gets: @sCurrencyID char(3)
-- Gets: @curCost1 money
-- Gets: @curCost2 money
-- Gets: @curCostDiscount1 money
-- Gets: @curCostDiscount2 money
-- Gets: @curPrice1 money
-- Gets: @curPrice2 money
-- Gets: @curPrice3 money
-- Gets: @curPriceDiscount1 money
-- Gets: @curPriceDiscount2 money
-- Gets: @curPriceDiscount3 money
-- Gets: @sTaxID1 varchar(36)
-- Gets: @sTaxID2 varchar(36)
-- Gets: @sLocation_id varchar(36)
-- Gets: @sRemarks1 ntext
-- Gets: @sRemarks2 ntext
-- Gets: @sReservedField1 varchar(-1)
-- Gets: @sReservedField2 varchar(-1)
-- Gets: @sReservedField3 varchar(-1)
-- Gets: @sReservedField4 varchar(-1)
-- Gets: @sReservedField5 varchar(-1)
-- Gets: @daExpiredDate datetime
-- Gets: @bShowOnWeb bit
-- Gets: @bViewStatus bit
-- Gets: @sUserID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_ProductMaster_Insert]
	@sID varchar(36),
	@sProductID nchar(10),
	@sProductName nvarchar(-1),
	@sAlternativeID varchar(50),
	@sAlternativeName nvarchar(-1),
	@sBarCode varchar(50),
	@sFamilyID varchar(36),
	@sCategoryID varchar(36),
	@sSubCategoryID varchar(36),
	@sDescription nvarchar(-1),
	@sSupplierID varchar(36),
	@sPOSID varchar(36),
	@sInvID varchar(36),
	@sUOMID varchar(50),
	@dcLeadTimeMin decimal(18, 2),
	@dcLeadTimeMax decimal(18, 2),
	@dcQty decimal(18, 2),
	@dcBookedQty decimal(18, 2),
	@dcPhysicalStockLevel decimal(18, 2),
	@dcSafetyLevel decimal(18, 2),
	@dcMiniLevel decimal(18, 2),
	@dcMaxLevel decimal(18, 2),
	@dcReorderLevel decimal(18, 2),
	@sCurrencyID char(3),
	@curCost1 money,
	@curCost2 money,
	@curCostDiscount1 money,
	@curCostDiscount2 money,
	@curPrice1 money,
	@curPrice2 money,
	@curPrice3 money,
	@curPriceDiscount1 money,
	@curPriceDiscount2 money,
	@curPriceDiscount3 money,
	@sTaxID1 varchar(36),
	@sTaxID2 varchar(36),
	@sLocation_id varchar(36),
	@sRemarks1 ntext,
	@sRemarks2 ntext,
	@sReservedField1 varchar(-1),
	@sReservedField2 varchar(-1),
	@sReservedField3 varchar(-1),
	@sReservedField4 varchar(-1),
	@sReservedField5 varchar(-1),
	@daExpiredDate datetime,
	@bShowOnWeb bit,
	@bViewStatus bit,
	@sUserID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[ProductMaster]
(
	[ID],
	[ProductID],
	[ProductName],
	[AlternativeID],
	[AlternativeName],
	[BarCode],
	[FamilyID],
	[CategoryID],
	[SubCategoryID],
	[Description],
	[SupplierID],
	[POSID],
	[InvID],
	[UOMID],
	[LeadTimeMin],
	[LeadTimeMax],
	[Qty],
	[BookedQty],
	[PhysicalStockLevel],
	[SafetyLevel],
	[MiniLevel],
	[MaxLevel],
	[ReorderLevel],
	[CurrencyID],
	[Cost1],
	[Cost2],
	[CostDiscount1],
	[CostDiscount2],
	[Price1],
	[Price2],
	[Price3],
	[PriceDiscount1],
	[PriceDiscount2],
	[PriceDiscount3],
	[TaxID1],
	[TaxID2],
	[Location_id],
	[Remarks1],
	[Remarks2],
	[ReservedField1],
	[ReservedField2],
	[ReservedField3],
	[ReservedField4],
	[ReservedField5],
	[ExpiredDate],
	[ShowOnWeb],
	[ViewStatus],
	[UserID]
)
VALUES
(
	@sID,
	@sProductID,
	@sProductName,
	@sAlternativeID,
	@sAlternativeName,
	@sBarCode,
	@sFamilyID,
	@sCategoryID,
	@sSubCategoryID,
	@sDescription,
	@sSupplierID,
	@sPOSID,
	@sInvID,
	@sUOMID,
	@dcLeadTimeMin,
	@dcLeadTimeMax,
	@dcQty,
	@dcBookedQty,
	@dcPhysicalStockLevel,
	@dcSafetyLevel,
	@dcMiniLevel,
	@dcMaxLevel,
	@dcReorderLevel,
	@sCurrencyID,
	@curCost1,
	@curCost2,
	@curCostDiscount1,
	@curCostDiscount2,
	@curPrice1,
	@curPrice2,
	@curPrice3,
	@curPriceDiscount1,
	@curPriceDiscount2,
	@curPriceDiscount3,
	@sTaxID1,
	@sTaxID2,
	@sLocation_id,
	@sRemarks1,
	@sRemarks2,
	@sReservedField1,
	@sReservedField2,
	@sReservedField3,
	@sReservedField4,
	@sReservedField5,
	@daExpiredDate,
	@bShowOnWeb,
	@bViewStatus,
	@sUserID
)
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_ProductMaster_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_ProductMaster_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'ProductMaster'
-- Gets: @sID varchar(36)
-- Gets: @sProductID nchar(10)
-- Gets: @sProductName nvarchar(-1)
-- Gets: @sAlternativeID varchar(50)
-- Gets: @sAlternativeName nvarchar(-1)
-- Gets: @sBarCode varchar(50)
-- Gets: @sFamilyID varchar(36)
-- Gets: @sCategoryID varchar(36)
-- Gets: @sSubCategoryID varchar(36)
-- Gets: @sDescription nvarchar(-1)
-- Gets: @sSupplierID varchar(36)
-- Gets: @sPOSID varchar(36)
-- Gets: @sInvID varchar(36)
-- Gets: @sUOMID varchar(50)
-- Gets: @dcLeadTimeMin decimal(18, 2)
-- Gets: @dcLeadTimeMax decimal(18, 2)
-- Gets: @dcQty decimal(18, 2)
-- Gets: @dcBookedQty decimal(18, 2)
-- Gets: @dcPhysicalStockLevel decimal(18, 2)
-- Gets: @dcSafetyLevel decimal(18, 2)
-- Gets: @dcMiniLevel decimal(18, 2)
-- Gets: @dcMaxLevel decimal(18, 2)
-- Gets: @dcReorderLevel decimal(18, 2)
-- Gets: @sCurrencyID char(3)
-- Gets: @curCost1 money
-- Gets: @curCost2 money
-- Gets: @curCostDiscount1 money
-- Gets: @curCostDiscount2 money
-- Gets: @curPrice1 money
-- Gets: @curPrice2 money
-- Gets: @curPrice3 money
-- Gets: @curPriceDiscount1 money
-- Gets: @curPriceDiscount2 money
-- Gets: @curPriceDiscount3 money
-- Gets: @sTaxID1 varchar(36)
-- Gets: @sTaxID2 varchar(36)
-- Gets: @sLocation_id varchar(36)
-- Gets: @sRemarks1 ntext
-- Gets: @sRemarks2 ntext
-- Gets: @sReservedField1 varchar(-1)
-- Gets: @sReservedField2 varchar(-1)
-- Gets: @sReservedField3 varchar(-1)
-- Gets: @sReservedField4 varchar(-1)
-- Gets: @sReservedField5 varchar(-1)
-- Gets: @daExpiredDate datetime
-- Gets: @bShowOnWeb bit
-- Gets: @bViewStatus bit
-- Gets: @sUserID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_ProductMaster_Update]
	@sID varchar(36),
	@sProductID nchar(10),
	@sProductName nvarchar(-1),
	@sAlternativeID varchar(50),
	@sAlternativeName nvarchar(-1),
	@sBarCode varchar(50),
	@sFamilyID varchar(36),
	@sCategoryID varchar(36),
	@sSubCategoryID varchar(36),
	@sDescription nvarchar(-1),
	@sSupplierID varchar(36),
	@sPOSID varchar(36),
	@sInvID varchar(36),
	@sUOMID varchar(50),
	@dcLeadTimeMin decimal(18, 2),
	@dcLeadTimeMax decimal(18, 2),
	@dcQty decimal(18, 2),
	@dcBookedQty decimal(18, 2),
	@dcPhysicalStockLevel decimal(18, 2),
	@dcSafetyLevel decimal(18, 2),
	@dcMiniLevel decimal(18, 2),
	@dcMaxLevel decimal(18, 2),
	@dcReorderLevel decimal(18, 2),
	@sCurrencyID char(3),
	@curCost1 money,
	@curCost2 money,
	@curCostDiscount1 money,
	@curCostDiscount2 money,
	@curPrice1 money,
	@curPrice2 money,
	@curPrice3 money,
	@curPriceDiscount1 money,
	@curPriceDiscount2 money,
	@curPriceDiscount3 money,
	@sTaxID1 varchar(36),
	@sTaxID2 varchar(36),
	@sLocation_id varchar(36),
	@sRemarks1 ntext,
	@sRemarks2 ntext,
	@sReservedField1 varchar(-1),
	@sReservedField2 varchar(-1),
	@sReservedField3 varchar(-1),
	@sReservedField4 varchar(-1),
	@sReservedField5 varchar(-1),
	@daExpiredDate datetime,
	@bShowOnWeb bit,
	@bViewStatus bit,
	@sUserID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[ProductMaster]
SET 
	[ID] = @sID,
	[ProductName] = @sProductName,
	[AlternativeID] = @sAlternativeID,
	[AlternativeName] = @sAlternativeName,
	[BarCode] = @sBarCode,
	[FamilyID] = @sFamilyID,
	[CategoryID] = @sCategoryID,
	[SubCategoryID] = @sSubCategoryID,
	[Description] = @sDescription,
	[SupplierID] = @sSupplierID,
	[POSID] = @sPOSID,
	[InvID] = @sInvID,
	[UOMID] = @sUOMID,
	[LeadTimeMin] = @dcLeadTimeMin,
	[LeadTimeMax] = @dcLeadTimeMax,
	[Qty] = @dcQty,
	[BookedQty] = @dcBookedQty,
	[PhysicalStockLevel] = @dcPhysicalStockLevel,
	[SafetyLevel] = @dcSafetyLevel,
	[MiniLevel] = @dcMiniLevel,
	[MaxLevel] = @dcMaxLevel,
	[ReorderLevel] = @dcReorderLevel,
	[CurrencyID] = @sCurrencyID,
	[Cost1] = @curCost1,
	[Cost2] = @curCost2,
	[CostDiscount1] = @curCostDiscount1,
	[CostDiscount2] = @curCostDiscount2,
	[Price1] = @curPrice1,
	[Price2] = @curPrice2,
	[Price3] = @curPrice3,
	[PriceDiscount1] = @curPriceDiscount1,
	[PriceDiscount2] = @curPriceDiscount2,
	[PriceDiscount3] = @curPriceDiscount3,
	[TaxID1] = @sTaxID1,
	[TaxID2] = @sTaxID2,
	[Location_id] = @sLocation_id,
	[Remarks1] = @sRemarks1,
	[Remarks2] = @sRemarks2,
	[ReservedField1] = @sReservedField1,
	[ReservedField2] = @sReservedField2,
	[ReservedField3] = @sReservedField3,
	[ReservedField4] = @sReservedField4,
	[ReservedField5] = @sReservedField5,
	[ExpiredDate] = @daExpiredDate,
	[ShowOnWeb] = @bShowOnWeb,
	[ViewStatus] = @bViewStatus,
	[UserID] = @sUserID
WHERE
	[ProductID] = @sProductID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [FamilyID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_ProductMaster_UpdateAllWFamilyIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_ProductMaster_UpdateAllWFamilyIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'ProductMaster'.
-- Will reset field [FamilyID] with value @sFamilyIDOld  to value @sFamilyID
-- Gets: @sFamilyID varchar(36)
-- Gets: @sFamilyIDOld varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_ProductMaster_UpdateAllWFamilyIDLogic]
	@sFamilyID varchar(36),
	@sFamilyIDOld varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[ProductMaster]
SET
	[FamilyID] = @sFamilyID
WHERE
	[FamilyID] = @sFamilyIDOld
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [CategoryID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_ProductMaster_UpdateAllWCategoryIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_ProductMaster_UpdateAllWCategoryIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'ProductMaster'.
-- Will reset field [CategoryID] with value @sCategoryIDOld  to value @sCategoryID
-- Gets: @sCategoryID varchar(36)
-- Gets: @sCategoryIDOld varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_ProductMaster_UpdateAllWCategoryIDLogic]
	@sCategoryID varchar(36),
	@sCategoryIDOld varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[ProductMaster]
SET
	[CategoryID] = @sCategoryID
WHERE
	[CategoryID] = @sCategoryIDOld
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [SubCategoryID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_ProductMaster_UpdateAllWSubCategoryIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_ProductMaster_UpdateAllWSubCategoryIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'ProductMaster'.
-- Will reset field [SubCategoryID] with value @sSubCategoryIDOld  to value @sSubCategoryID
-- Gets: @sSubCategoryID varchar(36)
-- Gets: @sSubCategoryIDOld varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_ProductMaster_UpdateAllWSubCategoryIDLogic]
	@sSubCategoryID varchar(36),
	@sSubCategoryIDOld varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[ProductMaster]
SET
	[SubCategoryID] = @sSubCategoryID
WHERE
	[SubCategoryID] = @sSubCategoryIDOld
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [UOMID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_ProductMaster_UpdateAllWUOMIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_ProductMaster_UpdateAllWUOMIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'ProductMaster'.
-- Will reset field [UOMID] with value @sUOMIDOld  to value @sUOMID
-- Gets: @sUOMID varchar(50)
-- Gets: @sUOMIDOld varchar(50)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_ProductMaster_UpdateAllWUOMIDLogic]
	@sUOMID varchar(50),
	@sUOMIDOld varchar(50),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[ProductMaster]
SET
	[UOMID] = @sUOMID
WHERE
	[UOMID] = @sUOMIDOld
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_ProductMaster_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_ProductMaster_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'ProductMaster'
-- using the Primary Key. 
-- Gets: @sProductID nchar(10)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_ProductMaster_Delete]
	@sProductID nchar(10),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[ProductMaster]
WHERE
	[ProductID] = @sProductID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_ProductMaster_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_ProductMaster_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'ProductMaster'
-- based on the Primary Key.
-- Gets: @sProductID nchar(10)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_ProductMaster_SelectOne]
	@sProductID nchar(10),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[ID],
	[ProductID],
	[ProductName],
	[AlternativeID],
	[AlternativeName],
	[BarCode],
	[FamilyID],
	[CategoryID],
	[SubCategoryID],
	[Description],
	[SupplierID],
	[POSID],
	[InvID],
	[UOMID],
	[LeadTimeMin],
	[LeadTimeMax],
	[Qty],
	[BookedQty],
	[PhysicalStockLevel],
	[SafetyLevel],
	[MiniLevel],
	[MaxLevel],
	[ReorderLevel],
	[CurrencyID],
	[Cost1],
	[Cost2],
	[CostDiscount1],
	[CostDiscount2],
	[Price1],
	[Price2],
	[Price3],
	[PriceDiscount1],
	[PriceDiscount2],
	[PriceDiscount3],
	[TaxID1],
	[TaxID2],
	[Location_id],
	[Remarks1],
	[Remarks2],
	[ReservedField1],
	[ReservedField2],
	[ReservedField3],
	[ReservedField4],
	[ReservedField5],
	[ExpiredDate],
	[ShowOnWeb],
	[ViewStatus],
	[UserID],
	[Timestamp]
FROM [dbo].[ProductMaster]
WHERE
	[ProductID] = @sProductID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_ProductMaster_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_ProductMaster_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'ProductMaster'
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_ProductMaster_SelectAll]
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[ID],
	[ProductID],
	[ProductName],
	[AlternativeID],
	[AlternativeName],
	[BarCode],
	[FamilyID],
	[CategoryID],
	[SubCategoryID],
	[Description],
	[SupplierID],
	[POSID],
	[InvID],
	[UOMID],
	[LeadTimeMin],
	[LeadTimeMax],
	[Qty],
	[BookedQty],
	[PhysicalStockLevel],
	[SafetyLevel],
	[MiniLevel],
	[MaxLevel],
	[ReorderLevel],
	[CurrencyID],
	[Cost1],
	[Cost2],
	[CostDiscount1],
	[CostDiscount2],
	[Price1],
	[Price2],
	[Price3],
	[PriceDiscount1],
	[PriceDiscount2],
	[PriceDiscount3],
	[TaxID1],
	[TaxID2],
	[Location_id],
	[Remarks1],
	[Remarks2],
	[ReservedField1],
	[ReservedField2],
	[ReservedField3],
	[ReservedField4],
	[ReservedField5],
	[ExpiredDate],
	[ShowOnWeb],
	[ViewStatus],
	[UserID],
	[Timestamp]
FROM [dbo].[ProductMaster]
ORDER BY 
	[ProductID] ASC
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [FamilyID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_ProductMaster_SelectAllWFamilyIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_ProductMaster_SelectAllWFamilyIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'ProductMaster'
-- based on a foreign key field.
-- Gets: @sFamilyID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_ProductMaster_SelectAllWFamilyIDLogic]
	@sFamilyID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[ID],
	[ProductID],
	[ProductName],
	[AlternativeID],
	[AlternativeName],
	[BarCode],
	[FamilyID],
	[CategoryID],
	[SubCategoryID],
	[Description],
	[SupplierID],
	[POSID],
	[InvID],
	[UOMID],
	[LeadTimeMin],
	[LeadTimeMax],
	[Qty],
	[BookedQty],
	[PhysicalStockLevel],
	[SafetyLevel],
	[MiniLevel],
	[MaxLevel],
	[ReorderLevel],
	[CurrencyID],
	[Cost1],
	[Cost2],
	[CostDiscount1],
	[CostDiscount2],
	[Price1],
	[Price2],
	[Price3],
	[PriceDiscount1],
	[PriceDiscount2],
	[PriceDiscount3],
	[TaxID1],
	[TaxID2],
	[Location_id],
	[Remarks1],
	[Remarks2],
	[ReservedField1],
	[ReservedField2],
	[ReservedField3],
	[ReservedField4],
	[ReservedField5],
	[ExpiredDate],
	[ShowOnWeb],
	[ViewStatus],
	[UserID],
	[Timestamp]
FROM [dbo].[ProductMaster]
WHERE
	[FamilyID] = @sFamilyID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [CategoryID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_ProductMaster_SelectAllWCategoryIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_ProductMaster_SelectAllWCategoryIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'ProductMaster'
-- based on a foreign key field.
-- Gets: @sCategoryID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_ProductMaster_SelectAllWCategoryIDLogic]
	@sCategoryID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[ID],
	[ProductID],
	[ProductName],
	[AlternativeID],
	[AlternativeName],
	[BarCode],
	[FamilyID],
	[CategoryID],
	[SubCategoryID],
	[Description],
	[SupplierID],
	[POSID],
	[InvID],
	[UOMID],
	[LeadTimeMin],
	[LeadTimeMax],
	[Qty],
	[BookedQty],
	[PhysicalStockLevel],
	[SafetyLevel],
	[MiniLevel],
	[MaxLevel],
	[ReorderLevel],
	[CurrencyID],
	[Cost1],
	[Cost2],
	[CostDiscount1],
	[CostDiscount2],
	[Price1],
	[Price2],
	[Price3],
	[PriceDiscount1],
	[PriceDiscount2],
	[PriceDiscount3],
	[TaxID1],
	[TaxID2],
	[Location_id],
	[Remarks1],
	[Remarks2],
	[ReservedField1],
	[ReservedField2],
	[ReservedField3],
	[ReservedField4],
	[ReservedField5],
	[ExpiredDate],
	[ShowOnWeb],
	[ViewStatus],
	[UserID],
	[Timestamp]
FROM [dbo].[ProductMaster]
WHERE
	[CategoryID] = @sCategoryID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [SubCategoryID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_ProductMaster_SelectAllWSubCategoryIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_ProductMaster_SelectAllWSubCategoryIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'ProductMaster'
-- based on a foreign key field.
-- Gets: @sSubCategoryID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_ProductMaster_SelectAllWSubCategoryIDLogic]
	@sSubCategoryID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[ID],
	[ProductID],
	[ProductName],
	[AlternativeID],
	[AlternativeName],
	[BarCode],
	[FamilyID],
	[CategoryID],
	[SubCategoryID],
	[Description],
	[SupplierID],
	[POSID],
	[InvID],
	[UOMID],
	[LeadTimeMin],
	[LeadTimeMax],
	[Qty],
	[BookedQty],
	[PhysicalStockLevel],
	[SafetyLevel],
	[MiniLevel],
	[MaxLevel],
	[ReorderLevel],
	[CurrencyID],
	[Cost1],
	[Cost2],
	[CostDiscount1],
	[CostDiscount2],
	[Price1],
	[Price2],
	[Price3],
	[PriceDiscount1],
	[PriceDiscount2],
	[PriceDiscount3],
	[TaxID1],
	[TaxID2],
	[Location_id],
	[Remarks1],
	[Remarks2],
	[ReservedField1],
	[ReservedField2],
	[ReservedField3],
	[ReservedField4],
	[ReservedField5],
	[ExpiredDate],
	[ShowOnWeb],
	[ViewStatus],
	[UserID],
	[Timestamp]
FROM [dbo].[ProductMaster]
WHERE
	[SubCategoryID] = @sSubCategoryID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [UOMID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_ProductMaster_SelectAllWUOMIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_ProductMaster_SelectAllWUOMIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'ProductMaster'
-- based on a foreign key field.
-- Gets: @sUOMID varchar(50)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_ProductMaster_SelectAllWUOMIDLogic]
	@sUOMID varchar(50),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[ID],
	[ProductID],
	[ProductName],
	[AlternativeID],
	[AlternativeName],
	[BarCode],
	[FamilyID],
	[CategoryID],
	[SubCategoryID],
	[Description],
	[SupplierID],
	[POSID],
	[InvID],
	[UOMID],
	[LeadTimeMin],
	[LeadTimeMax],
	[Qty],
	[BookedQty],
	[PhysicalStockLevel],
	[SafetyLevel],
	[MiniLevel],
	[MaxLevel],
	[ReorderLevel],
	[CurrencyID],
	[Cost1],
	[Cost2],
	[CostDiscount1],
	[CostDiscount2],
	[Price1],
	[Price2],
	[Price3],
	[PriceDiscount1],
	[PriceDiscount2],
	[PriceDiscount3],
	[TaxID1],
	[TaxID2],
	[Location_id],
	[Remarks1],
	[Remarks2],
	[ReservedField1],
	[ReservedField2],
	[ReservedField3],
	[ReservedField4],
	[ReservedField5],
	[ExpiredDate],
	[ShowOnWeb],
	[ViewStatus],
	[UserID],
	[Timestamp]
FROM [dbo].[ProductMaster]
WHERE
	[UOMID] = @sUOMID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     ProductMaster]
-- ========================================================================================================
GO

-- ========================================================================================================
-- [Stored Procedures generated for table:  ProductSubCategory]
GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_ProductSubCategory_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_ProductSubCategory_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'ProductSubCategory'
-- Gets: @sSubCategoryID varchar(36)
-- Gets: @sSubCategoryName nvarchar(-1)
-- Gets: @sNote nvarchar(-1)
-- Gets: @bViewStatus bit
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_ProductSubCategory_Insert]
	@sSubCategoryID varchar(36),
	@sSubCategoryName nvarchar(-1),
	@sNote nvarchar(-1),
	@bViewStatus bit,
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[ProductSubCategory]
(
	[SubCategoryID],
	[SubCategoryName],
	[Note],
	[ViewStatus]
)
VALUES
(
	@sSubCategoryID,
	@sSubCategoryName,
	@sNote,
	@bViewStatus
)
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_ProductSubCategory_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_ProductSubCategory_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'ProductSubCategory'
-- Gets: @sSubCategoryID varchar(36)
-- Gets: @sSubCategoryName nvarchar(-1)
-- Gets: @sNote nvarchar(-1)
-- Gets: @bViewStatus bit
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_ProductSubCategory_Update]
	@sSubCategoryID varchar(36),
	@sSubCategoryName nvarchar(-1),
	@sNote nvarchar(-1),
	@bViewStatus bit,
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[ProductSubCategory]
SET 
	[SubCategoryName] = @sSubCategoryName,
	[Note] = @sNote,
	[ViewStatus] = @bViewStatus
WHERE
	[SubCategoryID] = @sSubCategoryID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_ProductSubCategory_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_ProductSubCategory_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'ProductSubCategory'
-- using the Primary Key. 
-- Gets: @sSubCategoryID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_ProductSubCategory_Delete]
	@sSubCategoryID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[ProductSubCategory]
WHERE
	[SubCategoryID] = @sSubCategoryID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_ProductSubCategory_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_ProductSubCategory_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'ProductSubCategory'
-- based on the Primary Key.
-- Gets: @sSubCategoryID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_ProductSubCategory_SelectOne]
	@sSubCategoryID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[SubCategoryID],
	[SubCategoryName],
	[Note],
	[ViewStatus]
FROM [dbo].[ProductSubCategory]
WHERE
	[SubCategoryID] = @sSubCategoryID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_ProductSubCategory_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_ProductSubCategory_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'ProductSubCategory'
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_ProductSubCategory_SelectAll]
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[SubCategoryID],
	[SubCategoryName],
	[Note],
	[ViewStatus]
FROM [dbo].[ProductSubCategory]
ORDER BY 
	[SubCategoryID] ASC
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     ProductSubCategory]
-- ========================================================================================================
GO

-- ========================================================================================================
-- [Stored Procedures generated for table:  ProductSubCategoryInFamily]
GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_ProductSubCategoryInFamily_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_ProductSubCategoryInFamily_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'ProductSubCategoryInFamily'
-- Gets: @sFamilyID varchar(36)
-- Gets: @sSubCategoryID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_ProductSubCategoryInFamily_Insert]
	@sFamilyID varchar(36),
	@sSubCategoryID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[ProductSubCategoryInFamily]
(
	[FamilyID],
	[SubCategoryID]
)
VALUES
(
	@sFamilyID,
	@sSubCategoryID
)
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_ProductSubCategoryInFamily_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_ProductSubCategoryInFamily_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'ProductSubCategoryInFamily'
-- using the Primary Key. 
-- Gets: @sFamilyID varchar(36)
-- Gets: @sSubCategoryID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_ProductSubCategoryInFamily_Delete]
	@sFamilyID varchar(36),
	@sSubCategoryID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[ProductSubCategoryInFamily]
WHERE
	[FamilyID] = @sFamilyID
	AND [SubCategoryID] = @sSubCategoryID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using PK field [FamilyID]
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_ProductSubCategoryInFamily_DeleteWFamilyIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_ProductSubCategoryInFamily_DeleteWFamilyIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete one or more  existing rows from the table 'ProductSubCategoryInFamily'
-- using the Primary Key field [FamilyID]. 
-- Gets: @sFamilyID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_ProductSubCategoryInFamily_DeleteWFamilyIDLogic]
	@sFamilyID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE one or more existing rows from the table.
DELETE FROM [dbo].[ProductSubCategoryInFamily]
WHERE
	[FamilyID] = @sFamilyID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using PK field [SubCategoryID]
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_ProductSubCategoryInFamily_DeleteWSubCategoryIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_ProductSubCategoryInFamily_DeleteWSubCategoryIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete one or more  existing rows from the table 'ProductSubCategoryInFamily'
-- using the Primary Key field [SubCategoryID]. 
-- Gets: @sSubCategoryID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_ProductSubCategoryInFamily_DeleteWSubCategoryIDLogic]
	@sSubCategoryID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE one or more existing rows from the table.
DELETE FROM [dbo].[ProductSubCategoryInFamily]
WHERE
	[SubCategoryID] = @sSubCategoryID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_ProductSubCategoryInFamily_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_ProductSubCategoryInFamily_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'ProductSubCategoryInFamily'
-- based on the Primary Key.
-- Gets: @sFamilyID varchar(36)
-- Gets: @sSubCategoryID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_ProductSubCategoryInFamily_SelectOne]
	@sFamilyID varchar(36),
	@sSubCategoryID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[FamilyID],
	[SubCategoryID]
FROM [dbo].[ProductSubCategoryInFamily]
WHERE
	[FamilyID] = @sFamilyID
	AND [SubCategoryID] = @sSubCategoryID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_ProductSubCategoryInFamily_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_ProductSubCategoryInFamily_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'ProductSubCategoryInFamily'
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_ProductSubCategoryInFamily_SelectAll]
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[FamilyID],
	[SubCategoryID]
FROM [dbo].[ProductSubCategoryInFamily]
ORDER BY 
	[FamilyID] ASC
	, [SubCategoryID] ASC
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [FamilyID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_ProductSubCategoryInFamily_SelectAllWFamilyIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_ProductSubCategoryInFamily_SelectAllWFamilyIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'ProductSubCategoryInFamily'
-- based on a foreign key field.
-- Gets: @sFamilyID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_ProductSubCategoryInFamily_SelectAllWFamilyIDLogic]
	@sFamilyID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[FamilyID],
	[SubCategoryID]
FROM [dbo].[ProductSubCategoryInFamily]
WHERE
	[FamilyID] = @sFamilyID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [SubCategoryID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_ProductSubCategoryInFamily_SelectAllWSubCategoryIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_ProductSubCategoryInFamily_SelectAllWSubCategoryIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'ProductSubCategoryInFamily'
-- based on a foreign key field.
-- Gets: @sSubCategoryID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_ProductSubCategoryInFamily_SelectAllWSubCategoryIDLogic]
	@sSubCategoryID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[FamilyID],
	[SubCategoryID]
FROM [dbo].[ProductSubCategoryInFamily]
WHERE
	[SubCategoryID] = @sSubCategoryID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     ProductSubCategoryInFamily]
-- ========================================================================================================
GO

-- ========================================================================================================
-- [Stored Procedures generated for table:  Resource]
GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Resource_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Resource_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'Resource'
-- Gets: @sResourceID varchar(36)
-- Gets: @sModuleID varchar(36)
-- Gets: @sResourceName nvarchar(50)
-- Gets: @sResourceSubName nvarchar(50)
-- Gets: @sLanguage1 nvarchar(-1)
-- Gets: @sLanguage2 nvarchar(-1)
-- Gets: @sLanguage3 nvarchar(-1)
-- Gets: @sLanguage4 nvarchar(-1)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Resource_Insert]
	@sResourceID varchar(36),
	@sModuleID varchar(36),
	@sResourceName nvarchar(50),
	@sResourceSubName nvarchar(50),
	@sLanguage1 nvarchar(-1),
	@sLanguage2 nvarchar(-1),
	@sLanguage3 nvarchar(-1),
	@sLanguage4 nvarchar(-1),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[Resource]
(
	[ResourceID],
	[ModuleID],
	[ResourceName],
	[ResourceSubName],
	[Language1],
	[Language2],
	[Language3],
	[Language4]
)
VALUES
(
	ISNULL(@sResourceID, (newid())),
	@sModuleID,
	@sResourceName,
	@sResourceSubName,
	@sLanguage1,
	@sLanguage2,
	@sLanguage3,
	@sLanguage4
)
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Resource_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Resource_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'Resource'
-- Gets: @sResourceID varchar(36)
-- Gets: @sModuleID varchar(36)
-- Gets: @sResourceName nvarchar(50)
-- Gets: @sResourceSubName nvarchar(50)
-- Gets: @sLanguage1 nvarchar(-1)
-- Gets: @sLanguage2 nvarchar(-1)
-- Gets: @sLanguage3 nvarchar(-1)
-- Gets: @sLanguage4 nvarchar(-1)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Resource_Update]
	@sResourceID varchar(36),
	@sModuleID varchar(36),
	@sResourceName nvarchar(50),
	@sResourceSubName nvarchar(50),
	@sLanguage1 nvarchar(-1),
	@sLanguage2 nvarchar(-1),
	@sLanguage3 nvarchar(-1),
	@sLanguage4 nvarchar(-1),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[Resource]
SET 
	[ModuleID] = @sModuleID,
	[ResourceName] = @sResourceName,
	[ResourceSubName] = @sResourceSubName,
	[Language1] = @sLanguage1,
	[Language2] = @sLanguage2,
	[Language3] = @sLanguage3,
	[Language4] = @sLanguage4
WHERE
	[ResourceID] = @sResourceID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Resource_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Resource_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'Resource'
-- using the Primary Key. 
-- Gets: @sResourceID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Resource_Delete]
	@sResourceID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[Resource]
WHERE
	[ResourceID] = @sResourceID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Resource_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Resource_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'Resource'
-- based on the Primary Key.
-- Gets: @sResourceID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Resource_SelectOne]
	@sResourceID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[ResourceID],
	[ModuleID],
	[ResourceName],
	[ResourceSubName],
	[Language1],
	[Language2],
	[Language3],
	[Language4]
FROM [dbo].[Resource]
WHERE
	[ResourceID] = @sResourceID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Resource_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Resource_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'Resource'
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Resource_SelectAll]
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[ResourceID],
	[ModuleID],
	[ResourceName],
	[ResourceSubName],
	[Language1],
	[Language2],
	[Language3],
	[Language4]
FROM [dbo].[Resource]
ORDER BY 
	[ResourceID] ASC
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     Resource]
-- ========================================================================================================
GO

-- ========================================================================================================
-- [Stored Procedures generated for table:  RoleInModule]
GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_RoleInModule_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_RoleInModule_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'RoleInModule'
-- Gets: @sRoleID varchar(36)
-- Gets: @sModuleID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_RoleInModule_Insert]
	@sRoleID varchar(36),
	@sModuleID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[RoleInModule]
(
	[RoleID],
	[ModuleID]
)
VALUES
(
	ISNULL(@sRoleID, (newid())),
	@sModuleID
)
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_RoleInModule_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_RoleInModule_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'RoleInModule'
-- using the Primary Key. 
-- Gets: @sRoleID varchar(36)
-- Gets: @sModuleID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_RoleInModule_Delete]
	@sRoleID varchar(36),
	@sModuleID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[RoleInModule]
WHERE
	[RoleID] = @sRoleID
	AND [ModuleID] = @sModuleID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using PK field [RoleID]
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_RoleInModule_DeleteWRoleIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_RoleInModule_DeleteWRoleIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete one or more  existing rows from the table 'RoleInModule'
-- using the Primary Key field [RoleID]. 
-- Gets: @sRoleID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_RoleInModule_DeleteWRoleIDLogic]
	@sRoleID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE one or more existing rows from the table.
DELETE FROM [dbo].[RoleInModule]
WHERE
	[RoleID] = @sRoleID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using PK field [ModuleID]
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_RoleInModule_DeleteWModuleIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_RoleInModule_DeleteWModuleIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete one or more  existing rows from the table 'RoleInModule'
-- using the Primary Key field [ModuleID]. 
-- Gets: @sModuleID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_RoleInModule_DeleteWModuleIDLogic]
	@sModuleID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE one or more existing rows from the table.
DELETE FROM [dbo].[RoleInModule]
WHERE
	[ModuleID] = @sModuleID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_RoleInModule_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_RoleInModule_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'RoleInModule'
-- based on the Primary Key.
-- Gets: @sRoleID varchar(36)
-- Gets: @sModuleID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_RoleInModule_SelectOne]
	@sRoleID varchar(36),
	@sModuleID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[RoleID],
	[ModuleID]
FROM [dbo].[RoleInModule]
WHERE
	[RoleID] = @sRoleID
	AND [ModuleID] = @sModuleID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_RoleInModule_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_RoleInModule_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'RoleInModule'
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_RoleInModule_SelectAll]
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[RoleID],
	[ModuleID]
FROM [dbo].[RoleInModule]
ORDER BY 
	[RoleID] ASC
	, [ModuleID] ASC
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     RoleInModule]
-- ========================================================================================================
GO

-- ========================================================================================================
-- [Stored Procedures generated for table:  StockLevelHistory]
GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_StockLevelHistory_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_StockLevelHistory_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'StockLevelHistory'
-- Gets: @sID nvarchar(36)
-- Gets: @sProductID nchar(10)
-- Gets: @dcQty decimal(18, 2)
-- Gets: @dcBookedQty decimal(18, 2)
-- Gets: @dcPhysicalStockLevel decimal(18, 2)
-- Gets: @dcSafetyLevel decimal(18, 2)
-- Gets: @dcMiniLevel decimal(18, 2)
-- Gets: @dcMaxLevel decimal(18, 2)
-- Gets: @dcReorderLevel decimal(18, 2)
-- Gets: @sUserID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_StockLevelHistory_Insert]
	@sID nvarchar(36),
	@sProductID nchar(10),
	@dcQty decimal(18, 2),
	@dcBookedQty decimal(18, 2),
	@dcPhysicalStockLevel decimal(18, 2),
	@dcSafetyLevel decimal(18, 2),
	@dcMiniLevel decimal(18, 2),
	@dcMaxLevel decimal(18, 2),
	@dcReorderLevel decimal(18, 2),
	@sUserID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[StockLevelHistory]
(
	[ID],
	[ProductID],
	[Qty],
	[BookedQty],
	[PhysicalStockLevel],
	[SafetyLevel],
	[MiniLevel],
	[MaxLevel],
	[ReorderLevel],
	[UserID]
)
VALUES
(
	@sID,
	@sProductID,
	@dcQty,
	@dcBookedQty,
	@dcPhysicalStockLevel,
	@dcSafetyLevel,
	@dcMiniLevel,
	@dcMaxLevel,
	@dcReorderLevel,
	@sUserID
)
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_StockLevelHistory_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_StockLevelHistory_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'StockLevelHistory'
-- Gets: @sID nvarchar(36)
-- Gets: @sProductID nchar(10)
-- Gets: @dcQty decimal(18, 2)
-- Gets: @dcBookedQty decimal(18, 2)
-- Gets: @dcPhysicalStockLevel decimal(18, 2)
-- Gets: @dcSafetyLevel decimal(18, 2)
-- Gets: @dcMiniLevel decimal(18, 2)
-- Gets: @dcMaxLevel decimal(18, 2)
-- Gets: @dcReorderLevel decimal(18, 2)
-- Gets: @sUserID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_StockLevelHistory_Update]
	@sID nvarchar(36),
	@sProductID nchar(10),
	@dcQty decimal(18, 2),
	@dcBookedQty decimal(18, 2),
	@dcPhysicalStockLevel decimal(18, 2),
	@dcSafetyLevel decimal(18, 2),
	@dcMiniLevel decimal(18, 2),
	@dcMaxLevel decimal(18, 2),
	@dcReorderLevel decimal(18, 2),
	@sUserID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[StockLevelHistory]
SET 
	[ProductID] = @sProductID,
	[Qty] = @dcQty,
	[BookedQty] = @dcBookedQty,
	[PhysicalStockLevel] = @dcPhysicalStockLevel,
	[SafetyLevel] = @dcSafetyLevel,
	[MiniLevel] = @dcMiniLevel,
	[MaxLevel] = @dcMaxLevel,
	[ReorderLevel] = @dcReorderLevel,
	[UserID] = @sUserID
WHERE
	[ID] = @sID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [ProductID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_StockLevelHistory_UpdateAllWProductIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_StockLevelHistory_UpdateAllWProductIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'StockLevelHistory'.
-- Will reset field [ProductID] with value @sProductIDOld  to value @sProductID
-- Gets: @sProductID nchar(10)
-- Gets: @sProductIDOld nchar(10)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_StockLevelHistory_UpdateAllWProductIDLogic]
	@sProductID nchar(10),
	@sProductIDOld nchar(10),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[StockLevelHistory]
SET
	[ProductID] = @sProductID
WHERE
	[ProductID] = @sProductIDOld
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [UserID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_StockLevelHistory_UpdateAllWUserIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_StockLevelHistory_UpdateAllWUserIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'StockLevelHistory'.
-- Will reset field [UserID] with value @sUserIDOld  to value @sUserID
-- Gets: @sUserID varchar(36)
-- Gets: @sUserIDOld varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_StockLevelHistory_UpdateAllWUserIDLogic]
	@sUserID varchar(36),
	@sUserIDOld varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[StockLevelHistory]
SET
	[UserID] = @sUserID
WHERE
	[UserID] = @sUserIDOld
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_StockLevelHistory_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_StockLevelHistory_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'StockLevelHistory'
-- using the Primary Key. 
-- Gets: @sID nvarchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_StockLevelHistory_Delete]
	@sID nvarchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[StockLevelHistory]
WHERE
	[ID] = @sID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_StockLevelHistory_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_StockLevelHistory_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'StockLevelHistory'
-- based on the Primary Key.
-- Gets: @sID nvarchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_StockLevelHistory_SelectOne]
	@sID nvarchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[ID],
	[ProductID],
	[Qty],
	[BookedQty],
	[PhysicalStockLevel],
	[SafetyLevel],
	[MiniLevel],
	[MaxLevel],
	[ReorderLevel],
	[UserID],
	[Timestamp]
FROM [dbo].[StockLevelHistory]
WHERE
	[ID] = @sID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_StockLevelHistory_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_StockLevelHistory_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'StockLevelHistory'
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_StockLevelHistory_SelectAll]
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[ID],
	[ProductID],
	[Qty],
	[BookedQty],
	[PhysicalStockLevel],
	[SafetyLevel],
	[MiniLevel],
	[MaxLevel],
	[ReorderLevel],
	[UserID],
	[Timestamp]
FROM [dbo].[StockLevelHistory]
ORDER BY 
	[ID] ASC
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [ProductID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_StockLevelHistory_SelectAllWProductIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_StockLevelHistory_SelectAllWProductIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'StockLevelHistory'
-- based on a foreign key field.
-- Gets: @sProductID nchar(10)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_StockLevelHistory_SelectAllWProductIDLogic]
	@sProductID nchar(10),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[ID],
	[ProductID],
	[Qty],
	[BookedQty],
	[PhysicalStockLevel],
	[SafetyLevel],
	[MiniLevel],
	[MaxLevel],
	[ReorderLevel],
	[UserID],
	[Timestamp]
FROM [dbo].[StockLevelHistory]
WHERE
	[ProductID] = @sProductID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [UserID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_StockLevelHistory_SelectAllWUserIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_StockLevelHistory_SelectAllWUserIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'StockLevelHistory'
-- based on a foreign key field.
-- Gets: @sUserID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_StockLevelHistory_SelectAllWUserIDLogic]
	@sUserID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[ID],
	[ProductID],
	[Qty],
	[BookedQty],
	[PhysicalStockLevel],
	[SafetyLevel],
	[MiniLevel],
	[MaxLevel],
	[ReorderLevel],
	[UserID],
	[Timestamp]
FROM [dbo].[StockLevelHistory]
WHERE
	[UserID] = @sUserID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     StockLevelHistory]
-- ========================================================================================================
GO

-- ========================================================================================================
-- [Stored Procedures generated for table:  SupplierContact]
GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_SupplierContact_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_SupplierContact_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'SupplierContact'
-- Gets: @sContactID varchar(36)
-- Gets: @sSupplierID varchar(50)
-- Gets: @sPayment_term_id varchar(36)
-- Gets: @sTax_code_id varchar(36)
-- Gets: @sAccountName nvarchar(-1)
-- Gets: @sAccount_number varchar(50)
-- Gets: @dcCredit_limit decimal(18, 2)
-- Gets: @sCurrency nvarchar(3)
-- Gets: @dcBalance decimal(18, 2)
-- Gets: @iDiscount int
-- Gets: @sParent_id varchar(36)
-- Gets: @sTax_agent varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_SupplierContact_Insert]
	@sContactID varchar(36),
	@sSupplierID varchar(50),
	@sPayment_term_id varchar(36),
	@sTax_code_id varchar(36),
	@sAccountName nvarchar(-1),
	@sAccount_number varchar(50),
	@dcCredit_limit decimal(18, 2),
	@sCurrency nvarchar(3),
	@dcBalance decimal(18, 2),
	@iDiscount int,
	@sParent_id varchar(36),
	@sTax_agent varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[SupplierContact]
(
	[ContactID],
	[SupplierID],
	[Payment_term_id],
	[Tax_code_id],
	[AccountName],
	[Account_number],
	[Credit_limit],
	[Currency],
	[Balance],
	[Discount],
	[Parent_id],
	[Tax_agent]
)
VALUES
(
	@sContactID,
	@sSupplierID,
	@sPayment_term_id,
	@sTax_code_id,
	@sAccountName,
	@sAccount_number,
	@dcCredit_limit,
	@sCurrency,
	@dcBalance,
	@iDiscount,
	@sParent_id,
	@sTax_agent
)
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_SupplierContact_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_SupplierContact_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'SupplierContact'
-- Gets: @sContactID varchar(36)
-- Gets: @sSupplierID varchar(50)
-- Gets: @sPayment_term_id varchar(36)
-- Gets: @sTax_code_id varchar(36)
-- Gets: @sAccountName nvarchar(-1)
-- Gets: @sAccount_number varchar(50)
-- Gets: @dcCredit_limit decimal(18, 2)
-- Gets: @sCurrency nvarchar(3)
-- Gets: @dcBalance decimal(18, 2)
-- Gets: @iDiscount int
-- Gets: @sParent_id varchar(36)
-- Gets: @sTax_agent varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_SupplierContact_Update]
	@sContactID varchar(36),
	@sSupplierID varchar(50),
	@sPayment_term_id varchar(36),
	@sTax_code_id varchar(36),
	@sAccountName nvarchar(-1),
	@sAccount_number varchar(50),
	@dcCredit_limit decimal(18, 2),
	@sCurrency nvarchar(3),
	@dcBalance decimal(18, 2),
	@iDiscount int,
	@sParent_id varchar(36),
	@sTax_agent varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[SupplierContact]
SET 
	[SupplierID] = @sSupplierID,
	[Payment_term_id] = @sPayment_term_id,
	[Tax_code_id] = @sTax_code_id,
	[AccountName] = @sAccountName,
	[Account_number] = @sAccount_number,
	[Credit_limit] = @dcCredit_limit,
	[Currency] = @sCurrency,
	[Balance] = @dcBalance,
	[Discount] = @iDiscount,
	[Parent_id] = @sParent_id,
	[Tax_agent] = @sTax_agent
WHERE
	[ContactID] = @sContactID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [Payment_term_id].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_SupplierContact_UpdateAllWPayment_term_idLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_SupplierContact_UpdateAllWPayment_term_idLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'SupplierContact'.
-- Will reset field [Payment_term_id] with value @sPayment_term_idOld  to value @sPayment_term_id
-- Gets: @sPayment_term_id varchar(36)
-- Gets: @sPayment_term_idOld varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_SupplierContact_UpdateAllWPayment_term_idLogic]
	@sPayment_term_id varchar(36),
	@sPayment_term_idOld varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[SupplierContact]
SET
	[Payment_term_id] = @sPayment_term_id
WHERE
	[Payment_term_id] = @sPayment_term_idOld
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [Tax_code_id].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_SupplierContact_UpdateAllWTax_code_idLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_SupplierContact_UpdateAllWTax_code_idLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'SupplierContact'.
-- Will reset field [Tax_code_id] with value @sTax_code_idOld  to value @sTax_code_id
-- Gets: @sTax_code_id varchar(36)
-- Gets: @sTax_code_idOld varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_SupplierContact_UpdateAllWTax_code_idLogic]
	@sTax_code_id varchar(36),
	@sTax_code_idOld varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[SupplierContact]
SET
	[Tax_code_id] = @sTax_code_id
WHERE
	[Tax_code_id] = @sTax_code_idOld
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_SupplierContact_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_SupplierContact_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'SupplierContact'
-- using the Primary Key. 
-- Gets: @sContactID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_SupplierContact_Delete]
	@sContactID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[SupplierContact]
WHERE
	[ContactID] = @sContactID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_SupplierContact_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_SupplierContact_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'SupplierContact'
-- based on the Primary Key.
-- Gets: @sContactID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_SupplierContact_SelectOne]
	@sContactID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[ContactID],
	[SupplierID],
	[Payment_term_id],
	[Tax_code_id],
	[AccountName],
	[Account_number],
	[Credit_limit],
	[Currency],
	[Balance],
	[Discount],
	[Parent_id],
	[Tax_agent]
FROM [dbo].[SupplierContact]
WHERE
	[ContactID] = @sContactID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_SupplierContact_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_SupplierContact_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'SupplierContact'
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_SupplierContact_SelectAll]
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[ContactID],
	[SupplierID],
	[Payment_term_id],
	[Tax_code_id],
	[AccountName],
	[Account_number],
	[Credit_limit],
	[Currency],
	[Balance],
	[Discount],
	[Parent_id],
	[Tax_agent]
FROM [dbo].[SupplierContact]
ORDER BY 
	[ContactID] ASC
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [Payment_term_id].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_SupplierContact_SelectAllWPayment_term_idLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_SupplierContact_SelectAllWPayment_term_idLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'SupplierContact'
-- based on a foreign key field.
-- Gets: @sPayment_term_id varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_SupplierContact_SelectAllWPayment_term_idLogic]
	@sPayment_term_id varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[ContactID],
	[SupplierID],
	[Payment_term_id],
	[Tax_code_id],
	[AccountName],
	[Account_number],
	[Credit_limit],
	[Currency],
	[Balance],
	[Discount],
	[Parent_id],
	[Tax_agent]
FROM [dbo].[SupplierContact]
WHERE
	[Payment_term_id] = @sPayment_term_id
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [Tax_code_id].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_SupplierContact_SelectAllWTax_code_idLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_SupplierContact_SelectAllWTax_code_idLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'SupplierContact'
-- based on a foreign key field.
-- Gets: @sTax_code_id varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_SupplierContact_SelectAllWTax_code_idLogic]
	@sTax_code_id varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[ContactID],
	[SupplierID],
	[Payment_term_id],
	[Tax_code_id],
	[AccountName],
	[Account_number],
	[Credit_limit],
	[Currency],
	[Balance],
	[Discount],
	[Parent_id],
	[Tax_agent]
FROM [dbo].[SupplierContact]
WHERE
	[Tax_code_id] = @sTax_code_id
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     SupplierContact]
-- ========================================================================================================
GO

-- ========================================================================================================
-- [Stored Procedures generated for table:  sysdiagrams]
GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_sysdiagrams_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_sysdiagrams_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'sysdiagrams'
-- Gets: @sname nvarchar(128)
-- Gets: @iprincipal_id int
-- Gets: @iversion int
-- Gets: @bidefinition varbinary(-1)
-- Returns: @idiagram_id int
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_sysdiagrams_Insert]
	@sname nvarchar(128),
	@iprincipal_id int,
	@iversion int,
	@bidefinition varbinary(-1),
	@idiagram_id int OUTPUT,
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[sysdiagrams]
(
	[name],
	[principal_id],
	[version],
	[definition]
)
VALUES
(
	@sname,
	@iprincipal_id,
	@iversion,
	@bidefinition
)
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @idiagram_id=SCOPE_IDENTITY()
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_sysdiagrams_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_sysdiagrams_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'sysdiagrams'
-- Gets: @sname nvarchar(128)
-- Gets: @iprincipal_id int
-- Gets: @idiagram_id int
-- Gets: @iversion int
-- Gets: @bidefinition varbinary(-1)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_sysdiagrams_Update]
	@sname nvarchar(128),
	@iprincipal_id int,
	@idiagram_id int,
	@iversion int,
	@bidefinition varbinary(-1),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[sysdiagrams]
SET 
	[name] = @sname,
	[principal_id] = @iprincipal_id,
	[version] = @iversion,
	[definition] = @bidefinition
WHERE
	[diagram_id] = @idiagram_id
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_sysdiagrams_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_sysdiagrams_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'sysdiagrams'
-- using the Primary Key. 
-- Gets: @idiagram_id int
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_sysdiagrams_Delete]
	@idiagram_id int,
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[sysdiagrams]
WHERE
	[diagram_id] = @idiagram_id
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_sysdiagrams_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_sysdiagrams_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'sysdiagrams'
-- based on the Primary Key.
-- Gets: @idiagram_id int
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_sysdiagrams_SelectOne]
	@idiagram_id int,
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[name],
	[principal_id],
	[diagram_id],
	[version],
	[definition]
FROM [dbo].[sysdiagrams]
WHERE
	[diagram_id] = @idiagram_id
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [name].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_sysdiagrams_SelectOneWnameLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_sysdiagrams_SelectOneWnameLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one existing row from the table 'sysdiagrams'
-- based on the field [name], which is unique per row.
-- Gets: @sname nvarchar(128)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_sysdiagrams_SelectOneWnameLogic]
	@sname nvarchar(128),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[name],
	[principal_id],
	[diagram_id],
	[version],
	[definition]
FROM [dbo].[sysdiagrams]
WHERE
	[name] = @sname
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [principal_id].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_sysdiagrams_SelectOneWprincipal_idLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_sysdiagrams_SelectOneWprincipal_idLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one existing row from the table 'sysdiagrams'
-- based on the field [principal_id], which is unique per row.
-- Gets: @iprincipal_id int
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_sysdiagrams_SelectOneWprincipal_idLogic]
	@iprincipal_id int,
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[name],
	[principal_id],
	[diagram_id],
	[version],
	[definition]
FROM [dbo].[sysdiagrams]
WHERE
	[principal_id] = @iprincipal_id
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_sysdiagrams_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_sysdiagrams_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'sysdiagrams'
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_sysdiagrams_SelectAll]
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[name],
	[principal_id],
	[diagram_id],
	[version],
	[definition]
FROM [dbo].[sysdiagrams]
ORDER BY 
	[diagram_id] ASC
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     sysdiagrams]
-- ========================================================================================================
GO

-- ========================================================================================================
-- [Stored Procedures generated for table:  t_Alltype]
GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_t_Alltype_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_t_Alltype_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 't_Alltype'
-- Gets: @sAllTypeSID varchar(36)
-- Gets: @sTypeColumnName varchar(50)
-- Gets: @sTypeName varchar(50)
-- Gets: @iTypeSorting int
-- Gets: @bTypeStatus bit
-- Gets: @sTypeComment nvarchar(200)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_t_Alltype_Insert]
	@sAllTypeSID varchar(36),
	@sTypeColumnName varchar(50),
	@sTypeName varchar(50),
	@iTypeSorting int,
	@bTypeStatus bit,
	@sTypeComment nvarchar(200),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[t_Alltype]
(
	[AllTypeSID],
	[TypeColumnName],
	[TypeName],
	[TypeSorting],
	[TypeStatus],
	[TypeComment]
)
VALUES
(
	ISNULL(@sAllTypeSID, (newid())),
	@sTypeColumnName,
	@sTypeName,
	@iTypeSorting,
	@bTypeStatus,
	@sTypeComment
)
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_t_Alltype_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_t_Alltype_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 't_Alltype'
-- Gets: @sAllTypeSID varchar(36)
-- Gets: @sTypeColumnName varchar(50)
-- Gets: @sTypeName varchar(50)
-- Gets: @iTypeSorting int
-- Gets: @bTypeStatus bit
-- Gets: @sTypeComment nvarchar(200)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_t_Alltype_Update]
	@sAllTypeSID varchar(36),
	@sTypeColumnName varchar(50),
	@sTypeName varchar(50),
	@iTypeSorting int,
	@bTypeStatus bit,
	@sTypeComment nvarchar(200),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[t_Alltype]
SET 
	[TypeColumnName] = @sTypeColumnName,
	[TypeName] = @sTypeName,
	[TypeSorting] = @iTypeSorting,
	[TypeStatus] = @bTypeStatus,
	[TypeComment] = @sTypeComment
WHERE
	[AllTypeSID] = @sAllTypeSID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_t_Alltype_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_t_Alltype_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 't_Alltype'
-- using the Primary Key. 
-- Gets: @sAllTypeSID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_t_Alltype_Delete]
	@sAllTypeSID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[t_Alltype]
WHERE
	[AllTypeSID] = @sAllTypeSID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_t_Alltype_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_t_Alltype_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 't_Alltype'
-- based on the Primary Key.
-- Gets: @sAllTypeSID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_t_Alltype_SelectOne]
	@sAllTypeSID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[AllTypeSID],
	[TypeColumnName],
	[TypeName],
	[TypeSorting],
	[TypeStatus],
	[TypeComment]
FROM [dbo].[t_Alltype]
WHERE
	[AllTypeSID] = @sAllTypeSID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_t_Alltype_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_t_Alltype_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 't_Alltype'
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_t_Alltype_SelectAll]
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[AllTypeSID],
	[TypeColumnName],
	[TypeName],
	[TypeSorting],
	[TypeStatus],
	[TypeComment]
FROM [dbo].[t_Alltype]
ORDER BY 
	[AllTypeSID] ASC
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     t_Alltype]
-- ========================================================================================================
GO

-- ========================================================================================================
-- [Stored Procedures generated for table:  t_Department]
GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_t_Department_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_t_Department_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 't_Department'
-- Gets: @sDepartmentID varchar(36)
-- Gets: @sDepartmentName nvarchar(-1)
-- Gets: @bViewStatus bit
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_t_Department_Insert]
	@sDepartmentID varchar(36),
	@sDepartmentName nvarchar(-1),
	@bViewStatus bit,
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[t_Department]
(
	[DepartmentID],
	[DepartmentName],
	[ViewStatus]
)
VALUES
(
	ISNULL(@sDepartmentID, (newid())),
	@sDepartmentName,
	@bViewStatus
)
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_t_Department_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_t_Department_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 't_Department'
-- Gets: @sDepartmentID varchar(36)
-- Gets: @sDepartmentName nvarchar(-1)
-- Gets: @bViewStatus bit
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_t_Department_Update]
	@sDepartmentID varchar(36),
	@sDepartmentName nvarchar(-1),
	@bViewStatus bit,
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[t_Department]
SET 
	[DepartmentName] = @sDepartmentName,
	[ViewStatus] = @bViewStatus
WHERE
	[DepartmentID] = @sDepartmentID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_t_Department_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_t_Department_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 't_Department'
-- using the Primary Key. 
-- Gets: @sDepartmentID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_t_Department_Delete]
	@sDepartmentID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[t_Department]
WHERE
	[DepartmentID] = @sDepartmentID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_t_Department_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_t_Department_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 't_Department'
-- based on the Primary Key.
-- Gets: @sDepartmentID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_t_Department_SelectOne]
	@sDepartmentID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[DepartmentID],
	[DepartmentName],
	[ViewStatus]
FROM [dbo].[t_Department]
WHERE
	[DepartmentID] = @sDepartmentID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_t_Department_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_t_Department_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 't_Department'
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_t_Department_SelectAll]
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[DepartmentID],
	[DepartmentName],
	[ViewStatus]
FROM [dbo].[t_Department]
ORDER BY 
	[DepartmentID] ASC
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     t_Department]
-- ========================================================================================================
GO

-- ========================================================================================================
-- [Stored Procedures generated for table:  t_ModuleFunctions]
GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_t_ModuleFunctions_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_t_ModuleFunctions_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 't_ModuleFunctions'
-- Gets: @sFunctionID varchar(36)
-- Gets: @sFunctionName nvarchar(-1)
-- Gets: @sModuleID varchar(36)
-- Gets: @sNotes ntext
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_t_ModuleFunctions_Insert]
	@sFunctionID varchar(36),
	@sFunctionName nvarchar(-1),
	@sModuleID varchar(36),
	@sNotes ntext,
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[t_ModuleFunctions]
(
	[FunctionID],
	[FunctionName],
	[ModuleID],
	[Notes]
)
VALUES
(
	@sFunctionID,
	@sFunctionName,
	@sModuleID,
	@sNotes
)
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_t_ModuleFunctions_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_t_ModuleFunctions_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 't_ModuleFunctions'
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_t_ModuleFunctions_SelectAll]
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[FunctionID],
	[FunctionName],
	[ModuleID],
	[Notes]
FROM [dbo].[t_ModuleFunctions]
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     t_ModuleFunctions]
-- ========================================================================================================
GO

-- ========================================================================================================
-- [Stored Procedures generated for table:  t_Purchase_Order_Detail]
GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_t_Purchase_Order_Detail_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_t_Purchase_Order_Detail_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 't_Purchase_Order_Detail'
-- Gets: @sPONo varchar(36)
-- Gets: @sPOLineNo nvarchar(36)
-- Gets: @sPOProductID varchar(36)
-- Gets: @sPOSupplierProduct nvarchar(-1)
-- Gets: @sProductUnit nvarchar(-1)
-- Gets: @dcPackQty decimal(18, 2)
-- Gets: @dcOrderQty decimal(18, 2)
-- Gets: @dcReceiveQty decimal(18, 2)
-- Gets: @bViewStatus bit
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_t_Purchase_Order_Detail_Insert]
	@sPONo varchar(36),
	@sPOLineNo nvarchar(36),
	@sPOProductID varchar(36),
	@sPOSupplierProduct nvarchar(-1),
	@sProductUnit nvarchar(-1),
	@dcPackQty decimal(18, 2),
	@dcOrderQty decimal(18, 2),
	@dcReceiveQty decimal(18, 2),
	@bViewStatus bit,
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[t_Purchase_Order_Detail]
(
	[PONo],
	[POLineNo],
	[POProductID],
	[POSupplierProduct],
	[ProductUnit],
	[PackQty],
	[OrderQty],
	[ReceiveQty],
	[ViewStatus]
)
VALUES
(
	@sPONo,
	@sPOLineNo,
	@sPOProductID,
	@sPOSupplierProduct,
	@sProductUnit,
	@dcPackQty,
	@dcOrderQty,
	@dcReceiveQty,
	@bViewStatus
)
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_t_Purchase_Order_Detail_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_t_Purchase_Order_Detail_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 't_Purchase_Order_Detail'
-- Gets: @sPONo varchar(36)
-- Gets: @sPOLineNo nvarchar(36)
-- Gets: @sPOProductID varchar(36)
-- Gets: @sPOSupplierProduct nvarchar(-1)
-- Gets: @sProductUnit nvarchar(-1)
-- Gets: @dcPackQty decimal(18, 2)
-- Gets: @dcOrderQty decimal(18, 2)
-- Gets: @dcReceiveQty decimal(18, 2)
-- Gets: @bViewStatus bit
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_t_Purchase_Order_Detail_Update]
	@sPONo varchar(36),
	@sPOLineNo nvarchar(36),
	@sPOProductID varchar(36),
	@sPOSupplierProduct nvarchar(-1),
	@sProductUnit nvarchar(-1),
	@dcPackQty decimal(18, 2),
	@dcOrderQty decimal(18, 2),
	@dcReceiveQty decimal(18, 2),
	@bViewStatus bit,
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[t_Purchase_Order_Detail]
SET 
	[POProductID] = @sPOProductID,
	[POSupplierProduct] = @sPOSupplierProduct,
	[ProductUnit] = @sProductUnit,
	[PackQty] = @dcPackQty,
	[OrderQty] = @dcOrderQty,
	[ReceiveQty] = @dcReceiveQty,
	[ViewStatus] = @bViewStatus
WHERE
	[PONo] = @sPONo
	AND [POLineNo] = @sPOLineNo
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_t_Purchase_Order_Detail_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_t_Purchase_Order_Detail_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 't_Purchase_Order_Detail'
-- using the Primary Key. 
-- Gets: @sPONo varchar(36)
-- Gets: @sPOLineNo nvarchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_t_Purchase_Order_Detail_Delete]
	@sPONo varchar(36),
	@sPOLineNo nvarchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[t_Purchase_Order_Detail]
WHERE
	[PONo] = @sPONo
	AND [POLineNo] = @sPOLineNo
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using PK field [PONo]
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_t_Purchase_Order_Detail_DeleteWPONoLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_t_Purchase_Order_Detail_DeleteWPONoLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete one or more  existing rows from the table 't_Purchase_Order_Detail'
-- using the Primary Key field [PONo]. 
-- Gets: @sPONo varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_t_Purchase_Order_Detail_DeleteWPONoLogic]
	@sPONo varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE one or more existing rows from the table.
DELETE FROM [dbo].[t_Purchase_Order_Detail]
WHERE
	[PONo] = @sPONo
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using PK field [POLineNo]
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_t_Purchase_Order_Detail_DeleteWPOLineNoLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_t_Purchase_Order_Detail_DeleteWPOLineNoLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete one or more  existing rows from the table 't_Purchase_Order_Detail'
-- using the Primary Key field [POLineNo]. 
-- Gets: @sPOLineNo nvarchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_t_Purchase_Order_Detail_DeleteWPOLineNoLogic]
	@sPOLineNo nvarchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE one or more existing rows from the table.
DELETE FROM [dbo].[t_Purchase_Order_Detail]
WHERE
	[POLineNo] = @sPOLineNo
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_t_Purchase_Order_Detail_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_t_Purchase_Order_Detail_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 't_Purchase_Order_Detail'
-- based on the Primary Key.
-- Gets: @sPONo varchar(36)
-- Gets: @sPOLineNo nvarchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_t_Purchase_Order_Detail_SelectOne]
	@sPONo varchar(36),
	@sPOLineNo nvarchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[PONo],
	[POLineNo],
	[POProductID],
	[POSupplierProduct],
	[ProductUnit],
	[PackQty],
	[OrderQty],
	[ReceiveQty],
	[ViewStatus]
FROM [dbo].[t_Purchase_Order_Detail]
WHERE
	[PONo] = @sPONo
	AND [POLineNo] = @sPOLineNo
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_t_Purchase_Order_Detail_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_t_Purchase_Order_Detail_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 't_Purchase_Order_Detail'
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_t_Purchase_Order_Detail_SelectAll]
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[PONo],
	[POLineNo],
	[POProductID],
	[POSupplierProduct],
	[ProductUnit],
	[PackQty],
	[OrderQty],
	[ReceiveQty],
	[ViewStatus]
FROM [dbo].[t_Purchase_Order_Detail]
ORDER BY 
	[PONo] ASC
	, [POLineNo] ASC
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     t_Purchase_Order_Detail]
-- ========================================================================================================
GO

-- ========================================================================================================
-- [Stored Procedures generated for table:  t_Purchase_Order_Header]
GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_t_Purchase_Order_Header_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_t_Purchase_Order_Header_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 't_Purchase_Order_Header'
-- Gets: @sPONo varchar(36)
-- Gets: @daPODate datetime
-- Gets: @sPOTypeID varchar(36)
-- Gets: @daDeliveryDate datetime
-- Gets: @sShipTo nvarchar(-1)
-- Gets: @sSupplierID varchar(36)
-- Gets: @dcTotalAmt decimal(18, 2)
-- Gets: @sAccountNo varchar(-1)
-- Gets: @sTax_code_id varchar(36)
-- Gets: @dcDiscount decimal(18, 2)
-- Gets: @dcShipping decimal(18, 2)
-- Gets: @sSupplierTermsID varchar(36)
-- Gets: @sNotes ntext
-- Gets: @sCreatedBy varchar(-1)
-- Gets: @daCreatedDate datetime
-- Gets: @sLastUpdatedBy varchar(-1)
-- Gets: @daLastUpdatedDate datetime
-- Gets: @bViewStatus bit
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_t_Purchase_Order_Header_Insert]
	@sPONo varchar(36),
	@daPODate datetime,
	@sPOTypeID varchar(36),
	@daDeliveryDate datetime,
	@sShipTo nvarchar(-1),
	@sSupplierID varchar(36),
	@dcTotalAmt decimal(18, 2),
	@sAccountNo varchar(-1),
	@sTax_code_id varchar(36),
	@dcDiscount decimal(18, 2),
	@dcShipping decimal(18, 2),
	@sSupplierTermsID varchar(36),
	@sNotes ntext,
	@sCreatedBy varchar(-1),
	@daCreatedDate datetime,
	@sLastUpdatedBy varchar(-1),
	@daLastUpdatedDate datetime,
	@bViewStatus bit,
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[t_Purchase_Order_Header]
(
	[PONo],
	[PODate],
	[POTypeID],
	[DeliveryDate],
	[ShipTo],
	[SupplierID],
	[TotalAmt],
	[AccountNo],
	[Tax_code_id],
	[Discount],
	[Shipping],
	[SupplierTermsID],
	[Notes],
	[CreatedBy],
	[CreatedDate],
	[LastUpdatedBy],
	[LastUpdatedDate],
	[ViewStatus]
)
VALUES
(
	@sPONo,
	@daPODate,
	@sPOTypeID,
	@daDeliveryDate,
	@sShipTo,
	@sSupplierID,
	@dcTotalAmt,
	@sAccountNo,
	@sTax_code_id,
	@dcDiscount,
	@dcShipping,
	@sSupplierTermsID,
	@sNotes,
	@sCreatedBy,
	@daCreatedDate,
	@sLastUpdatedBy,
	@daLastUpdatedDate,
	@bViewStatus
)
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_t_Purchase_Order_Header_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_t_Purchase_Order_Header_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 't_Purchase_Order_Header'
-- Gets: @sPONo varchar(36)
-- Gets: @daPODate datetime
-- Gets: @sPOTypeID varchar(36)
-- Gets: @daDeliveryDate datetime
-- Gets: @sShipTo nvarchar(-1)
-- Gets: @sSupplierID varchar(36)
-- Gets: @dcTotalAmt decimal(18, 2)
-- Gets: @sAccountNo varchar(-1)
-- Gets: @sTax_code_id varchar(36)
-- Gets: @dcDiscount decimal(18, 2)
-- Gets: @dcShipping decimal(18, 2)
-- Gets: @sSupplierTermsID varchar(36)
-- Gets: @sNotes ntext
-- Gets: @sCreatedBy varchar(-1)
-- Gets: @daCreatedDate datetime
-- Gets: @sLastUpdatedBy varchar(-1)
-- Gets: @daLastUpdatedDate datetime
-- Gets: @bViewStatus bit
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_t_Purchase_Order_Header_Update]
	@sPONo varchar(36),
	@daPODate datetime,
	@sPOTypeID varchar(36),
	@daDeliveryDate datetime,
	@sShipTo nvarchar(-1),
	@sSupplierID varchar(36),
	@dcTotalAmt decimal(18, 2),
	@sAccountNo varchar(-1),
	@sTax_code_id varchar(36),
	@dcDiscount decimal(18, 2),
	@dcShipping decimal(18, 2),
	@sSupplierTermsID varchar(36),
	@sNotes ntext,
	@sCreatedBy varchar(-1),
	@daCreatedDate datetime,
	@sLastUpdatedBy varchar(-1),
	@daLastUpdatedDate datetime,
	@bViewStatus bit,
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[t_Purchase_Order_Header]
SET 
	[PODate] = @daPODate,
	[POTypeID] = @sPOTypeID,
	[DeliveryDate] = @daDeliveryDate,
	[ShipTo] = @sShipTo,
	[SupplierID] = @sSupplierID,
	[TotalAmt] = @dcTotalAmt,
	[AccountNo] = @sAccountNo,
	[Tax_code_id] = @sTax_code_id,
	[Discount] = @dcDiscount,
	[Shipping] = @dcShipping,
	[SupplierTermsID] = @sSupplierTermsID,
	[Notes] = @sNotes,
	[CreatedBy] = @sCreatedBy,
	[CreatedDate] = @daCreatedDate,
	[LastUpdatedBy] = @sLastUpdatedBy,
	[LastUpdatedDate] = @daLastUpdatedDate,
	[ViewStatus] = @bViewStatus
WHERE
	[PONo] = @sPONo
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [POTypeID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_t_Purchase_Order_Header_UpdateAllWPOTypeIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_t_Purchase_Order_Header_UpdateAllWPOTypeIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 't_Purchase_Order_Header'.
-- Will reset field [POTypeID] with value @sPOTypeIDOld  to value @sPOTypeID
-- Gets: @sPOTypeID varchar(36)
-- Gets: @sPOTypeIDOld varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_t_Purchase_Order_Header_UpdateAllWPOTypeIDLogic]
	@sPOTypeID varchar(36),
	@sPOTypeIDOld varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[t_Purchase_Order_Header]
SET
	[POTypeID] = @sPOTypeID
WHERE
	[POTypeID] = @sPOTypeIDOld
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [SupplierID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_t_Purchase_Order_Header_UpdateAllWSupplierIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_t_Purchase_Order_Header_UpdateAllWSupplierIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 't_Purchase_Order_Header'.
-- Will reset field [SupplierID] with value @sSupplierIDOld  to value @sSupplierID
-- Gets: @sSupplierID varchar(36)
-- Gets: @sSupplierIDOld varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_t_Purchase_Order_Header_UpdateAllWSupplierIDLogic]
	@sSupplierID varchar(36),
	@sSupplierIDOld varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[t_Purchase_Order_Header]
SET
	[SupplierID] = @sSupplierID
WHERE
	[SupplierID] = @sSupplierIDOld
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [Tax_code_id].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_t_Purchase_Order_Header_UpdateAllWTax_code_idLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_t_Purchase_Order_Header_UpdateAllWTax_code_idLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 't_Purchase_Order_Header'.
-- Will reset field [Tax_code_id] with value @sTax_code_idOld  to value @sTax_code_id
-- Gets: @sTax_code_id varchar(36)
-- Gets: @sTax_code_idOld varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_t_Purchase_Order_Header_UpdateAllWTax_code_idLogic]
	@sTax_code_id varchar(36),
	@sTax_code_idOld varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[t_Purchase_Order_Header]
SET
	[Tax_code_id] = @sTax_code_id
WHERE
	[Tax_code_id] = @sTax_code_idOld
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_t_Purchase_Order_Header_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_t_Purchase_Order_Header_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 't_Purchase_Order_Header'
-- using the Primary Key. 
-- Gets: @sPONo varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_t_Purchase_Order_Header_Delete]
	@sPONo varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[t_Purchase_Order_Header]
WHERE
	[PONo] = @sPONo
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_t_Purchase_Order_Header_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_t_Purchase_Order_Header_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 't_Purchase_Order_Header'
-- based on the Primary Key.
-- Gets: @sPONo varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_t_Purchase_Order_Header_SelectOne]
	@sPONo varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[PONo],
	[PODate],
	[POTypeID],
	[DeliveryDate],
	[ShipTo],
	[SupplierID],
	[TotalAmt],
	[AccountNo],
	[Tax_code_id],
	[Discount],
	[Shipping],
	[SupplierTermsID],
	[Notes],
	[CreatedBy],
	[CreatedDate],
	[LastUpdatedBy],
	[LastUpdatedDate],
	[ViewStatus]
FROM [dbo].[t_Purchase_Order_Header]
WHERE
	[PONo] = @sPONo
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_t_Purchase_Order_Header_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_t_Purchase_Order_Header_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 't_Purchase_Order_Header'
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_t_Purchase_Order_Header_SelectAll]
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[PONo],
	[PODate],
	[POTypeID],
	[DeliveryDate],
	[ShipTo],
	[SupplierID],
	[TotalAmt],
	[AccountNo],
	[Tax_code_id],
	[Discount],
	[Shipping],
	[SupplierTermsID],
	[Notes],
	[CreatedBy],
	[CreatedDate],
	[LastUpdatedBy],
	[LastUpdatedDate],
	[ViewStatus]
FROM [dbo].[t_Purchase_Order_Header]
ORDER BY 
	[PONo] ASC
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [POTypeID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_t_Purchase_Order_Header_SelectAllWPOTypeIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_t_Purchase_Order_Header_SelectAllWPOTypeIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 't_Purchase_Order_Header'
-- based on a foreign key field.
-- Gets: @sPOTypeID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_t_Purchase_Order_Header_SelectAllWPOTypeIDLogic]
	@sPOTypeID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[PONo],
	[PODate],
	[POTypeID],
	[DeliveryDate],
	[ShipTo],
	[SupplierID],
	[TotalAmt],
	[AccountNo],
	[Tax_code_id],
	[Discount],
	[Shipping],
	[SupplierTermsID],
	[Notes],
	[CreatedBy],
	[CreatedDate],
	[LastUpdatedBy],
	[LastUpdatedDate],
	[ViewStatus]
FROM [dbo].[t_Purchase_Order_Header]
WHERE
	[POTypeID] = @sPOTypeID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [SupplierID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_t_Purchase_Order_Header_SelectAllWSupplierIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_t_Purchase_Order_Header_SelectAllWSupplierIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 't_Purchase_Order_Header'
-- based on a foreign key field.
-- Gets: @sSupplierID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_t_Purchase_Order_Header_SelectAllWSupplierIDLogic]
	@sSupplierID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[PONo],
	[PODate],
	[POTypeID],
	[DeliveryDate],
	[ShipTo],
	[SupplierID],
	[TotalAmt],
	[AccountNo],
	[Tax_code_id],
	[Discount],
	[Shipping],
	[SupplierTermsID],
	[Notes],
	[CreatedBy],
	[CreatedDate],
	[LastUpdatedBy],
	[LastUpdatedDate],
	[ViewStatus]
FROM [dbo].[t_Purchase_Order_Header]
WHERE
	[SupplierID] = @sSupplierID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [Tax_code_id].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_t_Purchase_Order_Header_SelectAllWTax_code_idLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_t_Purchase_Order_Header_SelectAllWTax_code_idLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 't_Purchase_Order_Header'
-- based on a foreign key field.
-- Gets: @sTax_code_id varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_t_Purchase_Order_Header_SelectAllWTax_code_idLogic]
	@sTax_code_id varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[PONo],
	[PODate],
	[POTypeID],
	[DeliveryDate],
	[ShipTo],
	[SupplierID],
	[TotalAmt],
	[AccountNo],
	[Tax_code_id],
	[Discount],
	[Shipping],
	[SupplierTermsID],
	[Notes],
	[CreatedBy],
	[CreatedDate],
	[LastUpdatedBy],
	[LastUpdatedDate],
	[ViewStatus]
FROM [dbo].[t_Purchase_Order_Header]
WHERE
	[Tax_code_id] = @sTax_code_id
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     t_Purchase_Order_Header]
-- ========================================================================================================
GO

-- ========================================================================================================
-- [Stored Procedures generated for table:  t_Role]
GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_t_Role_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_t_Role_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 't_Role'
-- Gets: @sRoleID varchar(36)
-- Gets: @sRoleName nvarchar(-1)
-- Gets: @sNotes ntext
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_t_Role_Insert]
	@sRoleID varchar(36),
	@sRoleName nvarchar(-1),
	@sNotes ntext,
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[t_Role]
(
	[RoleID],
	[RoleName],
	[Notes]
)
VALUES
(
	ISNULL(@sRoleID, (newid())),
	@sRoleName,
	@sNotes
)
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_t_Role_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_t_Role_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 't_Role'
-- Gets: @sRoleID varchar(36)
-- Gets: @sRoleName nvarchar(-1)
-- Gets: @sNotes ntext
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_t_Role_Update]
	@sRoleID varchar(36),
	@sRoleName nvarchar(-1),
	@sNotes ntext,
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[t_Role]
SET 
	[RoleName] = @sRoleName,
	[Notes] = @sNotes
WHERE
	[RoleID] = @sRoleID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_t_Role_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_t_Role_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 't_Role'
-- using the Primary Key. 
-- Gets: @sRoleID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_t_Role_Delete]
	@sRoleID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[t_Role]
WHERE
	[RoleID] = @sRoleID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_t_Role_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_t_Role_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 't_Role'
-- based on the Primary Key.
-- Gets: @sRoleID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_t_Role_SelectOne]
	@sRoleID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[RoleID],
	[RoleName],
	[Notes]
FROM [dbo].[t_Role]
WHERE
	[RoleID] = @sRoleID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_t_Role_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_t_Role_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 't_Role'
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_t_Role_SelectAll]
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[RoleID],
	[RoleName],
	[Notes]
FROM [dbo].[t_Role]
ORDER BY 
	[RoleID] ASC
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     t_Role]
-- ========================================================================================================
GO

-- ========================================================================================================
-- [Stored Procedures generated for table:  t_RoleFunction]
GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_t_RoleFunction_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_t_RoleFunction_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 't_RoleFunction'
-- Gets: @sRoleFunctionID varchar(36)
-- Gets: @sRoleID varchar(36)
-- Gets: @sFunctionID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_t_RoleFunction_Insert]
	@sRoleFunctionID varchar(36),
	@sRoleID varchar(36),
	@sFunctionID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[t_RoleFunction]
(
	[RoleFunctionID],
	[RoleID],
	[FunctionID]
)
VALUES
(
	ISNULL(@sRoleFunctionID, (newid())),
	@sRoleID,
	@sFunctionID
)
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_t_RoleFunction_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_t_RoleFunction_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 't_RoleFunction'
-- Gets: @sRoleFunctionID varchar(36)
-- Gets: @sRoleID varchar(36)
-- Gets: @sFunctionID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_t_RoleFunction_Update]
	@sRoleFunctionID varchar(36),
	@sRoleID varchar(36),
	@sFunctionID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[t_RoleFunction]
SET 
	[RoleID] = @sRoleID,
	[FunctionID] = @sFunctionID
WHERE
	[RoleFunctionID] = @sRoleFunctionID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_t_RoleFunction_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_t_RoleFunction_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 't_RoleFunction'
-- using the Primary Key. 
-- Gets: @sRoleFunctionID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_t_RoleFunction_Delete]
	@sRoleFunctionID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[t_RoleFunction]
WHERE
	[RoleFunctionID] = @sRoleFunctionID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_t_RoleFunction_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_t_RoleFunction_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 't_RoleFunction'
-- based on the Primary Key.
-- Gets: @sRoleFunctionID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_t_RoleFunction_SelectOne]
	@sRoleFunctionID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[RoleFunctionID],
	[RoleID],
	[FunctionID]
FROM [dbo].[t_RoleFunction]
WHERE
	[RoleFunctionID] = @sRoleFunctionID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_t_RoleFunction_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_t_RoleFunction_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 't_RoleFunction'
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_t_RoleFunction_SelectAll]
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[RoleFunctionID],
	[RoleID],
	[FunctionID]
FROM [dbo].[t_RoleFunction]
ORDER BY 
	[RoleFunctionID] ASC
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     t_RoleFunction]
-- ========================================================================================================
GO

-- ========================================================================================================
-- [Stored Procedures generated for table:  t_Sales_Order_Detail]
GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_t_Sales_Order_Detail_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_t_Sales_Order_Detail_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 't_Sales_Order_Detail'
-- Gets: @sSONo varchar(36)
-- Gets: @sSOLineNo nvarchar(36)
-- Gets: @sProductID varchar(36)
-- Gets: @sQty nvarchar(-1)
-- Gets: @dcUnitPrice decimal(18, 2)
-- Gets: @dcDiscountPrice decimal(18, 2)
-- Gets: @dcDiscountPer decimal(18, 2)
-- Gets: @dcTotalAmount decimal(18, 2)
-- Gets: @dcSettleAmount decimal(18, 2)
-- Gets: @dcOSAmount decimal(18, 2)
-- Gets: @sInvoiceNo nvarchar(-1)
-- Gets: @bViewStatus bit
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_t_Sales_Order_Detail_Insert]
	@sSONo varchar(36),
	@sSOLineNo nvarchar(36),
	@sProductID varchar(36),
	@sQty nvarchar(-1),
	@dcUnitPrice decimal(18, 2),
	@dcDiscountPrice decimal(18, 2),
	@dcDiscountPer decimal(18, 2),
	@dcTotalAmount decimal(18, 2),
	@dcSettleAmount decimal(18, 2),
	@dcOSAmount decimal(18, 2),
	@sInvoiceNo nvarchar(-1),
	@bViewStatus bit,
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[t_Sales_Order_Detail]
(
	[SONo],
	[SOLineNo],
	[ProductID],
	[Qty],
	[UnitPrice],
	[DiscountPrice],
	[DiscountPer],
	[TotalAmount],
	[SettleAmount],
	[OSAmount],
	[InvoiceNo],
	[ViewStatus]
)
VALUES
(
	@sSONo,
	@sSOLineNo,
	@sProductID,
	@sQty,
	@dcUnitPrice,
	@dcDiscountPrice,
	@dcDiscountPer,
	@dcTotalAmount,
	@dcSettleAmount,
	@dcOSAmount,
	@sInvoiceNo,
	@bViewStatus
)
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_t_Sales_Order_Detail_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_t_Sales_Order_Detail_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 't_Sales_Order_Detail'
-- Gets: @sSONo varchar(36)
-- Gets: @sSOLineNo nvarchar(36)
-- Gets: @sProductID varchar(36)
-- Gets: @sQty nvarchar(-1)
-- Gets: @dcUnitPrice decimal(18, 2)
-- Gets: @dcDiscountPrice decimal(18, 2)
-- Gets: @dcDiscountPer decimal(18, 2)
-- Gets: @dcTotalAmount decimal(18, 2)
-- Gets: @dcSettleAmount decimal(18, 2)
-- Gets: @dcOSAmount decimal(18, 2)
-- Gets: @sInvoiceNo nvarchar(-1)
-- Gets: @bViewStatus bit
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_t_Sales_Order_Detail_Update]
	@sSONo varchar(36),
	@sSOLineNo nvarchar(36),
	@sProductID varchar(36),
	@sQty nvarchar(-1),
	@dcUnitPrice decimal(18, 2),
	@dcDiscountPrice decimal(18, 2),
	@dcDiscountPer decimal(18, 2),
	@dcTotalAmount decimal(18, 2),
	@dcSettleAmount decimal(18, 2),
	@dcOSAmount decimal(18, 2),
	@sInvoiceNo nvarchar(-1),
	@bViewStatus bit,
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[t_Sales_Order_Detail]
SET 
	[ProductID] = @sProductID,
	[Qty] = @sQty,
	[UnitPrice] = @dcUnitPrice,
	[DiscountPrice] = @dcDiscountPrice,
	[DiscountPer] = @dcDiscountPer,
	[TotalAmount] = @dcTotalAmount,
	[SettleAmount] = @dcSettleAmount,
	[OSAmount] = @dcOSAmount,
	[InvoiceNo] = @sInvoiceNo,
	[ViewStatus] = @bViewStatus
WHERE
	[SONo] = @sSONo
	AND [SOLineNo] = @sSOLineNo
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_t_Sales_Order_Detail_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_t_Sales_Order_Detail_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 't_Sales_Order_Detail'
-- using the Primary Key. 
-- Gets: @sSONo varchar(36)
-- Gets: @sSOLineNo nvarchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_t_Sales_Order_Detail_Delete]
	@sSONo varchar(36),
	@sSOLineNo nvarchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[t_Sales_Order_Detail]
WHERE
	[SONo] = @sSONo
	AND [SOLineNo] = @sSOLineNo
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using PK field [SONo]
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_t_Sales_Order_Detail_DeleteWSONoLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_t_Sales_Order_Detail_DeleteWSONoLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete one or more  existing rows from the table 't_Sales_Order_Detail'
-- using the Primary Key field [SONo]. 
-- Gets: @sSONo varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_t_Sales_Order_Detail_DeleteWSONoLogic]
	@sSONo varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE one or more existing rows from the table.
DELETE FROM [dbo].[t_Sales_Order_Detail]
WHERE
	[SONo] = @sSONo
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using PK field [SOLineNo]
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_t_Sales_Order_Detail_DeleteWSOLineNoLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_t_Sales_Order_Detail_DeleteWSOLineNoLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete one or more  existing rows from the table 't_Sales_Order_Detail'
-- using the Primary Key field [SOLineNo]. 
-- Gets: @sSOLineNo nvarchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_t_Sales_Order_Detail_DeleteWSOLineNoLogic]
	@sSOLineNo nvarchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE one or more existing rows from the table.
DELETE FROM [dbo].[t_Sales_Order_Detail]
WHERE
	[SOLineNo] = @sSOLineNo
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_t_Sales_Order_Detail_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_t_Sales_Order_Detail_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 't_Sales_Order_Detail'
-- based on the Primary Key.
-- Gets: @sSONo varchar(36)
-- Gets: @sSOLineNo nvarchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_t_Sales_Order_Detail_SelectOne]
	@sSONo varchar(36),
	@sSOLineNo nvarchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[SONo],
	[SOLineNo],
	[ProductID],
	[Qty],
	[UnitPrice],
	[DiscountPrice],
	[DiscountPer],
	[TotalAmount],
	[SettleAmount],
	[OSAmount],
	[InvoiceNo],
	[ViewStatus]
FROM [dbo].[t_Sales_Order_Detail]
WHERE
	[SONo] = @sSONo
	AND [SOLineNo] = @sSOLineNo
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_t_Sales_Order_Detail_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_t_Sales_Order_Detail_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 't_Sales_Order_Detail'
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_t_Sales_Order_Detail_SelectAll]
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[SONo],
	[SOLineNo],
	[ProductID],
	[Qty],
	[UnitPrice],
	[DiscountPrice],
	[DiscountPer],
	[TotalAmount],
	[SettleAmount],
	[OSAmount],
	[InvoiceNo],
	[ViewStatus]
FROM [dbo].[t_Sales_Order_Detail]
ORDER BY 
	[SONo] ASC
	, [SOLineNo] ASC
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     t_Sales_Order_Detail]
-- ========================================================================================================
GO

-- ========================================================================================================
-- [Stored Procedures generated for table:  t_Sales_Order_Header]
GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_t_Sales_Order_Header_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_t_Sales_Order_Header_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 't_Sales_Order_Header'
-- Gets: @sSONo varchar(36)
-- Gets: @daSODate datetime
-- Gets: @sSOTypeID varchar(36)
-- Gets: @sShopID varchar(36)
-- Gets: @sCustID varchar(36)
-- Gets: @sPayType varchar(36)
-- Gets: @dcPayAmount decimal(18, 2)
-- Gets: @dcOSAmount decimal(18, 2)
-- Gets: @sTax_code_id varchar(36)
-- Gets: @dcDiscount decimal(18, 2)
-- Gets: @sNotes ntext
-- Gets: @sCreatedBy varchar(36)
-- Gets: @daCreatedDate datetime
-- Gets: @sLastUpdatedBy varchar(36)
-- Gets: @daLastUpdatedDate datetime
-- Gets: @bViewStatus bit
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_t_Sales_Order_Header_Insert]
	@sSONo varchar(36),
	@daSODate datetime,
	@sSOTypeID varchar(36),
	@sShopID varchar(36),
	@sCustID varchar(36),
	@sPayType varchar(36),
	@dcPayAmount decimal(18, 2),
	@dcOSAmount decimal(18, 2),
	@sTax_code_id varchar(36),
	@dcDiscount decimal(18, 2),
	@sNotes ntext,
	@sCreatedBy varchar(36),
	@daCreatedDate datetime,
	@sLastUpdatedBy varchar(36),
	@daLastUpdatedDate datetime,
	@bViewStatus bit,
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[t_Sales_Order_Header]
(
	[SONo],
	[SODate],
	[SOTypeID],
	[ShopID],
	[CustID],
	[PayType],
	[PayAmount],
	[OSAmount],
	[Tax_code_id],
	[Discount],
	[Notes],
	[CreatedBy],
	[CreatedDate],
	[LastUpdatedBy],
	[LastUpdatedDate],
	[ViewStatus]
)
VALUES
(
	@sSONo,
	@daSODate,
	@sSOTypeID,
	@sShopID,
	@sCustID,
	@sPayType,
	@dcPayAmount,
	@dcOSAmount,
	@sTax_code_id,
	@dcDiscount,
	@sNotes,
	@sCreatedBy,
	@daCreatedDate,
	@sLastUpdatedBy,
	@daLastUpdatedDate,
	@bViewStatus
)
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_t_Sales_Order_Header_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_t_Sales_Order_Header_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 't_Sales_Order_Header'
-- Gets: @sSONo varchar(36)
-- Gets: @daSODate datetime
-- Gets: @sSOTypeID varchar(36)
-- Gets: @sShopID varchar(36)
-- Gets: @sCustID varchar(36)
-- Gets: @sPayType varchar(36)
-- Gets: @dcPayAmount decimal(18, 2)
-- Gets: @dcOSAmount decimal(18, 2)
-- Gets: @sTax_code_id varchar(36)
-- Gets: @dcDiscount decimal(18, 2)
-- Gets: @sNotes ntext
-- Gets: @sCreatedBy varchar(36)
-- Gets: @daCreatedDate datetime
-- Gets: @sLastUpdatedBy varchar(36)
-- Gets: @daLastUpdatedDate datetime
-- Gets: @bViewStatus bit
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_t_Sales_Order_Header_Update]
	@sSONo varchar(36),
	@daSODate datetime,
	@sSOTypeID varchar(36),
	@sShopID varchar(36),
	@sCustID varchar(36),
	@sPayType varchar(36),
	@dcPayAmount decimal(18, 2),
	@dcOSAmount decimal(18, 2),
	@sTax_code_id varchar(36),
	@dcDiscount decimal(18, 2),
	@sNotes ntext,
	@sCreatedBy varchar(36),
	@daCreatedDate datetime,
	@sLastUpdatedBy varchar(36),
	@daLastUpdatedDate datetime,
	@bViewStatus bit,
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[t_Sales_Order_Header]
SET 
	[SODate] = @daSODate,
	[SOTypeID] = @sSOTypeID,
	[ShopID] = @sShopID,
	[CustID] = @sCustID,
	[PayType] = @sPayType,
	[PayAmount] = @dcPayAmount,
	[OSAmount] = @dcOSAmount,
	[Tax_code_id] = @sTax_code_id,
	[Discount] = @dcDiscount,
	[Notes] = @sNotes,
	[CreatedBy] = @sCreatedBy,
	[CreatedDate] = @daCreatedDate,
	[LastUpdatedBy] = @sLastUpdatedBy,
	[LastUpdatedDate] = @daLastUpdatedDate,
	[ViewStatus] = @bViewStatus
WHERE
	[SONo] = @sSONo
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [SOTypeID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_t_Sales_Order_Header_UpdateAllWSOTypeIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_t_Sales_Order_Header_UpdateAllWSOTypeIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 't_Sales_Order_Header'.
-- Will reset field [SOTypeID] with value @sSOTypeIDOld  to value @sSOTypeID
-- Gets: @sSOTypeID varchar(36)
-- Gets: @sSOTypeIDOld varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_t_Sales_Order_Header_UpdateAllWSOTypeIDLogic]
	@sSOTypeID varchar(36),
	@sSOTypeIDOld varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[t_Sales_Order_Header]
SET
	[SOTypeID] = @sSOTypeID
WHERE
	[SOTypeID] = @sSOTypeIDOld
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [ShopID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_t_Sales_Order_Header_UpdateAllWShopIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_t_Sales_Order_Header_UpdateAllWShopIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 't_Sales_Order_Header'.
-- Will reset field [ShopID] with value @sShopIDOld  to value @sShopID
-- Gets: @sShopID varchar(36)
-- Gets: @sShopIDOld varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_t_Sales_Order_Header_UpdateAllWShopIDLogic]
	@sShopID varchar(36),
	@sShopIDOld varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[t_Sales_Order_Header]
SET
	[ShopID] = @sShopID
WHERE
	[ShopID] = @sShopIDOld
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [CustID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_t_Sales_Order_Header_UpdateAllWCustIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_t_Sales_Order_Header_UpdateAllWCustIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 't_Sales_Order_Header'.
-- Will reset field [CustID] with value @sCustIDOld  to value @sCustID
-- Gets: @sCustID varchar(36)
-- Gets: @sCustIDOld varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_t_Sales_Order_Header_UpdateAllWCustIDLogic]
	@sCustID varchar(36),
	@sCustIDOld varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[t_Sales_Order_Header]
SET
	[CustID] = @sCustID
WHERE
	[CustID] = @sCustIDOld
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [PayType].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_t_Sales_Order_Header_UpdateAllWPayTypeLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_t_Sales_Order_Header_UpdateAllWPayTypeLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 't_Sales_Order_Header'.
-- Will reset field [PayType] with value @sPayTypeOld  to value @sPayType
-- Gets: @sPayType varchar(36)
-- Gets: @sPayTypeOld varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_t_Sales_Order_Header_UpdateAllWPayTypeLogic]
	@sPayType varchar(36),
	@sPayTypeOld varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[t_Sales_Order_Header]
SET
	[PayType] = @sPayType
WHERE
	[PayType] = @sPayTypeOld
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [Tax_code_id].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_t_Sales_Order_Header_UpdateAllWTax_code_idLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_t_Sales_Order_Header_UpdateAllWTax_code_idLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 't_Sales_Order_Header'.
-- Will reset field [Tax_code_id] with value @sTax_code_idOld  to value @sTax_code_id
-- Gets: @sTax_code_id varchar(36)
-- Gets: @sTax_code_idOld varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_t_Sales_Order_Header_UpdateAllWTax_code_idLogic]
	@sTax_code_id varchar(36),
	@sTax_code_idOld varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[t_Sales_Order_Header]
SET
	[Tax_code_id] = @sTax_code_id
WHERE
	[Tax_code_id] = @sTax_code_idOld
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_t_Sales_Order_Header_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_t_Sales_Order_Header_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 't_Sales_Order_Header'
-- using the Primary Key. 
-- Gets: @sSONo varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_t_Sales_Order_Header_Delete]
	@sSONo varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[t_Sales_Order_Header]
WHERE
	[SONo] = @sSONo
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_t_Sales_Order_Header_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_t_Sales_Order_Header_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 't_Sales_Order_Header'
-- based on the Primary Key.
-- Gets: @sSONo varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_t_Sales_Order_Header_SelectOne]
	@sSONo varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[SONo],
	[SODate],
	[SOTypeID],
	[ShopID],
	[CustID],
	[PayType],
	[PayAmount],
	[OSAmount],
	[Tax_code_id],
	[Discount],
	[Notes],
	[CreatedBy],
	[CreatedDate],
	[LastUpdatedBy],
	[LastUpdatedDate],
	[ViewStatus]
FROM [dbo].[t_Sales_Order_Header]
WHERE
	[SONo] = @sSONo
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_t_Sales_Order_Header_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_t_Sales_Order_Header_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 't_Sales_Order_Header'
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_t_Sales_Order_Header_SelectAll]
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[SONo],
	[SODate],
	[SOTypeID],
	[ShopID],
	[CustID],
	[PayType],
	[PayAmount],
	[OSAmount],
	[Tax_code_id],
	[Discount],
	[Notes],
	[CreatedBy],
	[CreatedDate],
	[LastUpdatedBy],
	[LastUpdatedDate],
	[ViewStatus]
FROM [dbo].[t_Sales_Order_Header]
ORDER BY 
	[SONo] ASC
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [SOTypeID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_t_Sales_Order_Header_SelectAllWSOTypeIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_t_Sales_Order_Header_SelectAllWSOTypeIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 't_Sales_Order_Header'
-- based on a foreign key field.
-- Gets: @sSOTypeID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_t_Sales_Order_Header_SelectAllWSOTypeIDLogic]
	@sSOTypeID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[SONo],
	[SODate],
	[SOTypeID],
	[ShopID],
	[CustID],
	[PayType],
	[PayAmount],
	[OSAmount],
	[Tax_code_id],
	[Discount],
	[Notes],
	[CreatedBy],
	[CreatedDate],
	[LastUpdatedBy],
	[LastUpdatedDate],
	[ViewStatus]
FROM [dbo].[t_Sales_Order_Header]
WHERE
	[SOTypeID] = @sSOTypeID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [ShopID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_t_Sales_Order_Header_SelectAllWShopIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_t_Sales_Order_Header_SelectAllWShopIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 't_Sales_Order_Header'
-- based on a foreign key field.
-- Gets: @sShopID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_t_Sales_Order_Header_SelectAllWShopIDLogic]
	@sShopID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[SONo],
	[SODate],
	[SOTypeID],
	[ShopID],
	[CustID],
	[PayType],
	[PayAmount],
	[OSAmount],
	[Tax_code_id],
	[Discount],
	[Notes],
	[CreatedBy],
	[CreatedDate],
	[LastUpdatedBy],
	[LastUpdatedDate],
	[ViewStatus]
FROM [dbo].[t_Sales_Order_Header]
WHERE
	[ShopID] = @sShopID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [CustID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_t_Sales_Order_Header_SelectAllWCustIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_t_Sales_Order_Header_SelectAllWCustIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 't_Sales_Order_Header'
-- based on a foreign key field.
-- Gets: @sCustID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_t_Sales_Order_Header_SelectAllWCustIDLogic]
	@sCustID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[SONo],
	[SODate],
	[SOTypeID],
	[ShopID],
	[CustID],
	[PayType],
	[PayAmount],
	[OSAmount],
	[Tax_code_id],
	[Discount],
	[Notes],
	[CreatedBy],
	[CreatedDate],
	[LastUpdatedBy],
	[LastUpdatedDate],
	[ViewStatus]
FROM [dbo].[t_Sales_Order_Header]
WHERE
	[CustID] = @sCustID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [PayType].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_t_Sales_Order_Header_SelectAllWPayTypeLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_t_Sales_Order_Header_SelectAllWPayTypeLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 't_Sales_Order_Header'
-- based on a foreign key field.
-- Gets: @sPayType varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_t_Sales_Order_Header_SelectAllWPayTypeLogic]
	@sPayType varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[SONo],
	[SODate],
	[SOTypeID],
	[ShopID],
	[CustID],
	[PayType],
	[PayAmount],
	[OSAmount],
	[Tax_code_id],
	[Discount],
	[Notes],
	[CreatedBy],
	[CreatedDate],
	[LastUpdatedBy],
	[LastUpdatedDate],
	[ViewStatus]
FROM [dbo].[t_Sales_Order_Header]
WHERE
	[PayType] = @sPayType
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [Tax_code_id].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_t_Sales_Order_Header_SelectAllWTax_code_idLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_t_Sales_Order_Header_SelectAllWTax_code_idLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 't_Sales_Order_Header'
-- based on a foreign key field.
-- Gets: @sTax_code_id varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_t_Sales_Order_Header_SelectAllWTax_code_idLogic]
	@sTax_code_id varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[SONo],
	[SODate],
	[SOTypeID],
	[ShopID],
	[CustID],
	[PayType],
	[PayAmount],
	[OSAmount],
	[Tax_code_id],
	[Discount],
	[Notes],
	[CreatedBy],
	[CreatedDate],
	[LastUpdatedBy],
	[LastUpdatedDate],
	[ViewStatus]
FROM [dbo].[t_Sales_Order_Header]
WHERE
	[Tax_code_id] = @sTax_code_id
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     t_Sales_Order_Header]
-- ========================================================================================================
GO

-- ========================================================================================================
-- [Stored Procedures generated for table:  t_Shop]
GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_t_Shop_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_t_Shop_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 't_Shop'
-- Gets: @sShopID varchar(36)
-- Gets: @sShopName nvarchar(-1)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_t_Shop_Insert]
	@sShopID varchar(36),
	@sShopName nvarchar(-1),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[t_Shop]
(
	[ShopID],
	[ShopName]
)
VALUES
(
	ISNULL(@sShopID, (newid())),
	@sShopName
)
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_t_Shop_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_t_Shop_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 't_Shop'
-- Gets: @sShopID varchar(36)
-- Gets: @sShopName nvarchar(-1)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_t_Shop_Update]
	@sShopID varchar(36),
	@sShopName nvarchar(-1),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[t_Shop]
SET 
	[ShopName] = @sShopName
WHERE
	[ShopID] = @sShopID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_t_Shop_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_t_Shop_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 't_Shop'
-- using the Primary Key. 
-- Gets: @sShopID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_t_Shop_Delete]
	@sShopID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[t_Shop]
WHERE
	[ShopID] = @sShopID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_t_Shop_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_t_Shop_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 't_Shop'
-- based on the Primary Key.
-- Gets: @sShopID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_t_Shop_SelectOne]
	@sShopID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[ShopID],
	[ShopName]
FROM [dbo].[t_Shop]
WHERE
	[ShopID] = @sShopID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_t_Shop_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_t_Shop_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 't_Shop'
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_t_Shop_SelectAll]
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[ShopID],
	[ShopName]
FROM [dbo].[t_Shop]
ORDER BY 
	[ShopID] ASC
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     t_Shop]
-- ========================================================================================================
GO

-- ========================================================================================================
-- [Stored Procedures generated for table:  Tax_code_master]
GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Tax_code_master_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Tax_code_master_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'Tax_code_master'
-- Gets: @sTax_code_id varchar(36)
-- Gets: @sTaxTypeID varchar(36)
-- Gets: @sTax_code_desc nvarchar(50)
-- Gets: @curTaxRate money
-- Gets: @sNote ntext
-- Gets: @bViewStatus bit
-- Gets: @sUserID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Tax_code_master_Insert]
	@sTax_code_id varchar(36),
	@sTaxTypeID varchar(36),
	@sTax_code_desc nvarchar(50),
	@curTaxRate money,
	@sNote ntext,
	@bViewStatus bit,
	@sUserID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[Tax_code_master]
(
	[Tax_code_id],
	[TaxTypeID],
	[Tax_code_desc],
	[TaxRate],
	[Note],
	[ViewStatus],
	[UserID]
)
VALUES
(
	@sTax_code_id,
	@sTaxTypeID,
	@sTax_code_desc,
	@curTaxRate,
	@sNote,
	@bViewStatus,
	@sUserID
)
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Tax_code_master_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Tax_code_master_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'Tax_code_master'
-- Gets: @sTax_code_id varchar(36)
-- Gets: @sTaxTypeID varchar(36)
-- Gets: @sTax_code_desc nvarchar(50)
-- Gets: @curTaxRate money
-- Gets: @sNote ntext
-- Gets: @bViewStatus bit
-- Gets: @sUserID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Tax_code_master_Update]
	@sTax_code_id varchar(36),
	@sTaxTypeID varchar(36),
	@sTax_code_desc nvarchar(50),
	@curTaxRate money,
	@sNote ntext,
	@bViewStatus bit,
	@sUserID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[Tax_code_master]
SET 
	[TaxTypeID] = @sTaxTypeID,
	[Tax_code_desc] = @sTax_code_desc,
	[TaxRate] = @curTaxRate,
	[Note] = @sNote,
	[ViewStatus] = @bViewStatus,
	[UserID] = @sUserID
WHERE
	[Tax_code_id] = @sTax_code_id
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [TaxTypeID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Tax_code_master_UpdateAllWTaxTypeIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Tax_code_master_UpdateAllWTaxTypeIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'Tax_code_master'.
-- Will reset field [TaxTypeID] with value @sTaxTypeIDOld  to value @sTaxTypeID
-- Gets: @sTaxTypeID varchar(36)
-- Gets: @sTaxTypeIDOld varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Tax_code_master_UpdateAllWTaxTypeIDLogic]
	@sTaxTypeID varchar(36),
	@sTaxTypeIDOld varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[Tax_code_master]
SET
	[TaxTypeID] = @sTaxTypeID
WHERE
	[TaxTypeID] = @sTaxTypeIDOld
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [UserID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Tax_code_master_UpdateAllWUserIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Tax_code_master_UpdateAllWUserIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'Tax_code_master'.
-- Will reset field [UserID] with value @sUserIDOld  to value @sUserID
-- Gets: @sUserID varchar(36)
-- Gets: @sUserIDOld varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Tax_code_master_UpdateAllWUserIDLogic]
	@sUserID varchar(36),
	@sUserIDOld varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[Tax_code_master]
SET
	[UserID] = @sUserID
WHERE
	[UserID] = @sUserIDOld
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Tax_code_master_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Tax_code_master_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'Tax_code_master'
-- using the Primary Key. 
-- Gets: @sTax_code_id varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Tax_code_master_Delete]
	@sTax_code_id varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[Tax_code_master]
WHERE
	[Tax_code_id] = @sTax_code_id
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Tax_code_master_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Tax_code_master_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'Tax_code_master'
-- based on the Primary Key.
-- Gets: @sTax_code_id varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Tax_code_master_SelectOne]
	@sTax_code_id varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[Tax_code_id],
	[TaxTypeID],
	[Tax_code_desc],
	[TaxRate],
	[Note],
	[ViewStatus],
	[UserID],
	[Timestamp]
FROM [dbo].[Tax_code_master]
WHERE
	[Tax_code_id] = @sTax_code_id
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Tax_code_master_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Tax_code_master_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'Tax_code_master'
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Tax_code_master_SelectAll]
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[Tax_code_id],
	[TaxTypeID],
	[Tax_code_desc],
	[TaxRate],
	[Note],
	[ViewStatus],
	[UserID],
	[Timestamp]
FROM [dbo].[Tax_code_master]
ORDER BY 
	[Tax_code_id] ASC
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [TaxTypeID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Tax_code_master_SelectAllWTaxTypeIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Tax_code_master_SelectAllWTaxTypeIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'Tax_code_master'
-- based on a foreign key field.
-- Gets: @sTaxTypeID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Tax_code_master_SelectAllWTaxTypeIDLogic]
	@sTaxTypeID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[Tax_code_id],
	[TaxTypeID],
	[Tax_code_desc],
	[TaxRate],
	[Note],
	[ViewStatus],
	[UserID],
	[Timestamp]
FROM [dbo].[Tax_code_master]
WHERE
	[TaxTypeID] = @sTaxTypeID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [UserID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Tax_code_master_SelectAllWUserIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Tax_code_master_SelectAllWUserIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'Tax_code_master'
-- based on a foreign key field.
-- Gets: @sUserID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Tax_code_master_SelectAllWUserIDLogic]
	@sUserID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[Tax_code_id],
	[TaxTypeID],
	[Tax_code_desc],
	[TaxRate],
	[Note],
	[ViewStatus],
	[UserID],
	[Timestamp]
FROM [dbo].[Tax_code_master]
WHERE
	[UserID] = @sUserID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     Tax_code_master]
-- ========================================================================================================
GO

-- ========================================================================================================
-- [Stored Procedures generated for table:  TaxType]
GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_TaxType_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_TaxType_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'TaxType'
-- Gets: @sTaxTypeID varchar(36)
-- Gets: @sTaxTypeName nvarchar(-1)
-- Gets: @sNote ntext
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_TaxType_Insert]
	@sTaxTypeID varchar(36),
	@sTaxTypeName nvarchar(-1),
	@sNote ntext,
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[TaxType]
(
	[TaxTypeID],
	[TaxTypeName],
	[Note]
)
VALUES
(
	@sTaxTypeID,
	@sTaxTypeName,
	@sNote
)
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_TaxType_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_TaxType_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'TaxType'
-- Gets: @sTaxTypeID varchar(36)
-- Gets: @sTaxTypeName nvarchar(-1)
-- Gets: @sNote ntext
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_TaxType_Update]
	@sTaxTypeID varchar(36),
	@sTaxTypeName nvarchar(-1),
	@sNote ntext,
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[TaxType]
SET 
	[TaxTypeName] = @sTaxTypeName,
	[Note] = @sNote
WHERE
	[TaxTypeID] = @sTaxTypeID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_TaxType_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_TaxType_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'TaxType'
-- using the Primary Key. 
-- Gets: @sTaxTypeID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_TaxType_Delete]
	@sTaxTypeID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[TaxType]
WHERE
	[TaxTypeID] = @sTaxTypeID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_TaxType_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_TaxType_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'TaxType'
-- based on the Primary Key.
-- Gets: @sTaxTypeID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_TaxType_SelectOne]
	@sTaxTypeID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[TaxTypeID],
	[TaxTypeName],
	[Note]
FROM [dbo].[TaxType]
WHERE
	[TaxTypeID] = @sTaxTypeID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_TaxType_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_TaxType_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'TaxType'
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_TaxType_SelectAll]
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[TaxTypeID],
	[TaxTypeName],
	[Note]
FROM [dbo].[TaxType]
ORDER BY 
	[TaxTypeID] ASC
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     TaxType]
-- ========================================================================================================
GO

-- ========================================================================================================
-- [Stored Procedures generated for table:  Transport_Master]
GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Transport_Master_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Transport_Master_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'Transport_Master'
-- Gets: @sTransport_Code varchar(36)
-- Gets: @sTransport_text nvarchar(50)
-- Gets: @sUserID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Transport_Master_Insert]
	@sTransport_Code varchar(36),
	@sTransport_text nvarchar(50),
	@sUserID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[Transport_Master]
(
	[Transport_Code],
	[Transport_text],
	[UserID]
)
VALUES
(
	ISNULL(@sTransport_Code, (newid())),
	@sTransport_text,
	@sUserID
)
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Transport_Master_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Transport_Master_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'Transport_Master'
-- Gets: @sTransport_Code varchar(36)
-- Gets: @sTransport_text nvarchar(50)
-- Gets: @sUserID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Transport_Master_Update]
	@sTransport_Code varchar(36),
	@sTransport_text nvarchar(50),
	@sUserID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[Transport_Master]
SET 
	[Transport_text] = @sTransport_text,
	[UserID] = @sUserID
WHERE
	[Transport_Code] = @sTransport_Code
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Transport_Master_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Transport_Master_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'Transport_Master'
-- using the Primary Key. 
-- Gets: @sTransport_Code varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Transport_Master_Delete]
	@sTransport_Code varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[Transport_Master]
WHERE
	[Transport_Code] = @sTransport_Code
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Transport_Master_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Transport_Master_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'Transport_Master'
-- based on the Primary Key.
-- Gets: @sTransport_Code varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Transport_Master_SelectOne]
	@sTransport_Code varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[Transport_Code],
	[Transport_text],
	[UserID],
	[Timestamp]
FROM [dbo].[Transport_Master]
WHERE
	[Transport_Code] = @sTransport_Code
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Transport_Master_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Transport_Master_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'Transport_Master'
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Transport_Master_SelectAll]
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[Transport_Code],
	[Transport_text],
	[UserID],
	[Timestamp]
FROM [dbo].[Transport_Master]
ORDER BY 
	[Transport_Code] ASC
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     Transport_Master]
-- ========================================================================================================
GO

-- ========================================================================================================
-- [Stored Procedures generated for table:  UOM]
GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_UOM_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_UOM_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'UOM'
-- Gets: @sUOMID varchar(50)
-- Gets: @sNote ntext
-- Gets: @bViewStatus bit
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_UOM_Insert]
	@sUOMID varchar(50),
	@sNote ntext,
	@bViewStatus bit,
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[UOM]
(
	[UOMID],
	[Note],
	[ViewStatus]
)
VALUES
(
	@sUOMID,
	@sNote,
	@bViewStatus
)
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_UOM_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_UOM_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'UOM'
-- Gets: @sUOMID varchar(50)
-- Gets: @sNote ntext
-- Gets: @bViewStatus bit
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_UOM_Update]
	@sUOMID varchar(50),
	@sNote ntext,
	@bViewStatus bit,
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[UOM]
SET 
	[Note] = @sNote,
	[ViewStatus] = @bViewStatus
WHERE
	[UOMID] = @sUOMID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_UOM_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_UOM_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'UOM'
-- using the Primary Key. 
-- Gets: @sUOMID varchar(50)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_UOM_Delete]
	@sUOMID varchar(50),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[UOM]
WHERE
	[UOMID] = @sUOMID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_UOM_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_UOM_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'UOM'
-- based on the Primary Key.
-- Gets: @sUOMID varchar(50)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_UOM_SelectOne]
	@sUOMID varchar(50),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[UOMID],
	[Note],
	[ViewStatus]
FROM [dbo].[UOM]
WHERE
	[UOMID] = @sUOMID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_UOM_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_UOM_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'UOM'
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_UOM_SelectAll]
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[UOMID],
	[Note],
	[ViewStatus]
FROM [dbo].[UOM]
ORDER BY 
	[UOMID] ASC
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     UOM]
-- ========================================================================================================
GO

-- ========================================================================================================
-- [Stored Procedures generated for table:  UsageHistory]
GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_UsageHistory_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_UsageHistory_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'UsageHistory'
-- Gets: @sID varchar(36)
-- Gets: @sProductID nchar(10)
-- Gets: @daTime datetime
-- Gets: @dcStockOutQty decimal(18, 2)
-- Gets: @sUserID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_UsageHistory_Insert]
	@sID varchar(36),
	@sProductID nchar(10),
	@daTime datetime,
	@dcStockOutQty decimal(18, 2),
	@sUserID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[UsageHistory]
(
	[ID],
	[ProductID],
	[Time],
	[StockOutQty],
	[UserID]
)
VALUES
(
	@sID,
	@sProductID,
	@daTime,
	@dcStockOutQty,
	@sUserID
)
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_UsageHistory_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_UsageHistory_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'UsageHistory'
-- Gets: @sID varchar(36)
-- Gets: @sProductID nchar(10)
-- Gets: @daTime datetime
-- Gets: @dcStockOutQty decimal(18, 2)
-- Gets: @sUserID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_UsageHistory_Update]
	@sID varchar(36),
	@sProductID nchar(10),
	@daTime datetime,
	@dcStockOutQty decimal(18, 2),
	@sUserID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[UsageHistory]
SET 
	[Time] = @daTime,
	[StockOutQty] = @dcStockOutQty,
	[UserID] = @sUserID
WHERE
	[ID] = @sID
	AND [ProductID] = @sProductID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [UserID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_UsageHistory_UpdateAllWUserIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_UsageHistory_UpdateAllWUserIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'UsageHistory'.
-- Will reset field [UserID] with value @sUserIDOld  to value @sUserID
-- Gets: @sUserID varchar(36)
-- Gets: @sUserIDOld varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_UsageHistory_UpdateAllWUserIDLogic]
	@sUserID varchar(36),
	@sUserIDOld varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[UsageHistory]
SET
	[UserID] = @sUserID
WHERE
	[UserID] = @sUserIDOld
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_UsageHistory_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_UsageHistory_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'UsageHistory'
-- using the Primary Key. 
-- Gets: @sID varchar(36)
-- Gets: @sProductID nchar(10)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_UsageHistory_Delete]
	@sID varchar(36),
	@sProductID nchar(10),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[UsageHistory]
WHERE
	[ID] = @sID
	AND [ProductID] = @sProductID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using PK field [ID]
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_UsageHistory_DeleteWIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_UsageHistory_DeleteWIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete one or more  existing rows from the table 'UsageHistory'
-- using the Primary Key field [ID]. 
-- Gets: @sID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_UsageHistory_DeleteWIDLogic]
	@sID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE one or more existing rows from the table.
DELETE FROM [dbo].[UsageHistory]
WHERE
	[ID] = @sID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using PK field [ProductID]
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_UsageHistory_DeleteWProductIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_UsageHistory_DeleteWProductIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete one or more  existing rows from the table 'UsageHistory'
-- using the Primary Key field [ProductID]. 
-- Gets: @sProductID nchar(10)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_UsageHistory_DeleteWProductIDLogic]
	@sProductID nchar(10),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE one or more existing rows from the table.
DELETE FROM [dbo].[UsageHistory]
WHERE
	[ProductID] = @sProductID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_UsageHistory_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_UsageHistory_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'UsageHistory'
-- based on the Primary Key.
-- Gets: @sID varchar(36)
-- Gets: @sProductID nchar(10)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_UsageHistory_SelectOne]
	@sID varchar(36),
	@sProductID nchar(10),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[ID],
	[ProductID],
	[Time],
	[StockOutQty],
	[UserID]
FROM [dbo].[UsageHistory]
WHERE
	[ID] = @sID
	AND [ProductID] = @sProductID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_UsageHistory_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_UsageHistory_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'UsageHistory'
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_UsageHistory_SelectAll]
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[ID],
	[ProductID],
	[Time],
	[StockOutQty],
	[UserID]
FROM [dbo].[UsageHistory]
ORDER BY 
	[ID] ASC
	, [ProductID] ASC
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [ProductID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_UsageHistory_SelectAllWProductIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_UsageHistory_SelectAllWProductIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'UsageHistory'
-- based on a foreign key field.
-- Gets: @sProductID nchar(10)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_UsageHistory_SelectAllWProductIDLogic]
	@sProductID nchar(10),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[ID],
	[ProductID],
	[Time],
	[StockOutQty],
	[UserID]
FROM [dbo].[UsageHistory]
WHERE
	[ProductID] = @sProductID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [UserID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_UsageHistory_SelectAllWUserIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_UsageHistory_SelectAllWUserIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'UsageHistory'
-- based on a foreign key field.
-- Gets: @sUserID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_UsageHistory_SelectAllWUserIDLogic]
	@sUserID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[ID],
	[ProductID],
	[Time],
	[StockOutQty],
	[UserID]
FROM [dbo].[UsageHistory]
WHERE
	[UserID] = @sUserID
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     UsageHistory]
-- ========================================================================================================
GO

-- ========================================================================================================
-- [Stored Procedures generated for table:  Warehouse Product Master]
GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Warehouse Product Master_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Warehouse Product Master_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'Warehouse Product Master'
-- Gets: @sWarehouse_id varchar(36)
-- Gets: @sProduct_id varchar(36)
-- Gets: @sPackage_Code varchar(36)
-- Gets: @iProduct_weight int
-- Gets: @iWide int
-- Gets: @iLength int
-- Gets: @iHigh int
-- Gets: @iPack_weight int
-- Gets: @iStorage_Unit int
-- Gets: @iQty_prod_pack int
-- Gets: @iOn_hand_qty int
-- Gets: @daDate_created datetime
-- Gets: @daDate_last_Receipt datetime
-- Gets: @daDate_last_picked datetime
-- Gets: @daDate_qty_zero datetime
-- Gets: @daDate_last_count datetime
-- Gets: @sUserID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Warehouse Product Master_Insert]
	@sWarehouse_id varchar(36),
	@sProduct_id varchar(36),
	@sPackage_Code varchar(36),
	@iProduct_weight int,
	@iWide int,
	@iLength int,
	@iHigh int,
	@iPack_weight int,
	@iStorage_Unit int,
	@iQty_prod_pack int,
	@iOn_hand_qty int,
	@daDate_created datetime,
	@daDate_last_Receipt datetime,
	@daDate_last_picked datetime,
	@daDate_qty_zero datetime,
	@daDate_last_count datetime,
	@sUserID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[Warehouse Product Master]
(
	[Warehouse_id],
	[Product_id],
	[Package Code],
	[Product_weight],
	[Wide],
	[Length],
	[High],
	[Pack weight],
	[Storage_Unit],
	[Qty_prod_pack],
	[On_hand_qty],
	[Date_created],
	[Date_last_Receipt],
	[Date_last_picked],
	[Date_qty_zero],
	[Date_last_count],
	[UserID]
)
VALUES
(
	ISNULL(@sWarehouse_id, (newid())),
	@sProduct_id,
	@sPackage_Code,
	@iProduct_weight,
	@iWide,
	@iLength,
	@iHigh,
	@iPack_weight,
	@iStorage_Unit,
	@iQty_prod_pack,
	@iOn_hand_qty,
	@daDate_created,
	@daDate_last_Receipt,
	@daDate_last_picked,
	@daDate_qty_zero,
	@daDate_last_count,
	@sUserID
)
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Warehouse Product Master_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Warehouse Product Master_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'Warehouse Product Master'
-- Gets: @sWarehouse_id varchar(36)
-- Gets: @sProduct_id varchar(36)
-- Gets: @sPackage_Code varchar(36)
-- Gets: @iProduct_weight int
-- Gets: @iWide int
-- Gets: @iLength int
-- Gets: @iHigh int
-- Gets: @iPack_weight int
-- Gets: @iStorage_Unit int
-- Gets: @iQty_prod_pack int
-- Gets: @iOn_hand_qty int
-- Gets: @daDate_created datetime
-- Gets: @daDate_last_Receipt datetime
-- Gets: @daDate_last_picked datetime
-- Gets: @daDate_qty_zero datetime
-- Gets: @daDate_last_count datetime
-- Gets: @sUserID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Warehouse Product Master_Update]
	@sWarehouse_id varchar(36),
	@sProduct_id varchar(36),
	@sPackage_Code varchar(36),
	@iProduct_weight int,
	@iWide int,
	@iLength int,
	@iHigh int,
	@iPack_weight int,
	@iStorage_Unit int,
	@iQty_prod_pack int,
	@iOn_hand_qty int,
	@daDate_created datetime,
	@daDate_last_Receipt datetime,
	@daDate_last_picked datetime,
	@daDate_qty_zero datetime,
	@daDate_last_count datetime,
	@sUserID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[Warehouse Product Master]
SET 
	[Package Code] = @sPackage_Code,
	[Product_weight] = @iProduct_weight,
	[Wide] = @iWide,
	[Length] = @iLength,
	[High] = @iHigh,
	[Pack weight] = @iPack_weight,
	[Storage_Unit] = @iStorage_Unit,
	[Qty_prod_pack] = @iQty_prod_pack,
	[On_hand_qty] = @iOn_hand_qty,
	[Date_created] = @daDate_created,
	[Date_last_Receipt] = @daDate_last_Receipt,
	[Date_last_picked] = @daDate_last_picked,
	[Date_qty_zero] = @daDate_qty_zero,
	[Date_last_count] = @daDate_last_count,
	[UserID] = @sUserID
WHERE
	[Warehouse_id] = @sWarehouse_id
	AND [Product_id] = @sProduct_id
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Warehouse Product Master_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Warehouse Product Master_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'Warehouse Product Master'
-- using the Primary Key. 
-- Gets: @sWarehouse_id varchar(36)
-- Gets: @sProduct_id varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Warehouse Product Master_Delete]
	@sWarehouse_id varchar(36),
	@sProduct_id varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[Warehouse Product Master]
WHERE
	[Warehouse_id] = @sWarehouse_id
	AND [Product_id] = @sProduct_id
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using PK field [Warehouse_id]
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Warehouse Product Master_DeleteWWarehouse_idLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Warehouse Product Master_DeleteWWarehouse_idLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete one or more  existing rows from the table 'Warehouse Product Master'
-- using the Primary Key field [Warehouse_id]. 
-- Gets: @sWarehouse_id varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Warehouse Product Master_DeleteWWarehouse_idLogic]
	@sWarehouse_id varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE one or more existing rows from the table.
DELETE FROM [dbo].[Warehouse Product Master]
WHERE
	[Warehouse_id] = @sWarehouse_id
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using PK field [Product_id]
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Warehouse Product Master_DeleteWProduct_idLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Warehouse Product Master_DeleteWProduct_idLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete one or more  existing rows from the table 'Warehouse Product Master'
-- using the Primary Key field [Product_id]. 
-- Gets: @sProduct_id varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Warehouse Product Master_DeleteWProduct_idLogic]
	@sProduct_id varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE one or more existing rows from the table.
DELETE FROM [dbo].[Warehouse Product Master]
WHERE
	[Product_id] = @sProduct_id
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Warehouse Product Master_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Warehouse Product Master_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'Warehouse Product Master'
-- based on the Primary Key.
-- Gets: @sWarehouse_id varchar(36)
-- Gets: @sProduct_id varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Warehouse Product Master_SelectOne]
	@sWarehouse_id varchar(36),
	@sProduct_id varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[Warehouse_id],
	[Product_id],
	[Package Code],
	[Product_weight],
	[Wide],
	[Length],
	[High],
	[Pack weight],
	[Storage_Unit],
	[Qty_prod_pack],
	[On_hand_qty],
	[Date_created],
	[Date_last_Receipt],
	[Date_last_picked],
	[Date_qty_zero],
	[Date_last_count],
	[UserID],
	[Timestamp]
FROM [dbo].[Warehouse Product Master]
WHERE
	[Warehouse_id] = @sWarehouse_id
	AND [Product_id] = @sProduct_id
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Warehouse Product Master_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Warehouse Product Master_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'Warehouse Product Master'
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Warehouse Product Master_SelectAll]
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[Warehouse_id],
	[Product_id],
	[Package Code],
	[Product_weight],
	[Wide],
	[Length],
	[High],
	[Pack weight],
	[Storage_Unit],
	[Qty_prod_pack],
	[On_hand_qty],
	[Date_created],
	[Date_last_Receipt],
	[Date_last_picked],
	[Date_qty_zero],
	[Date_last_count],
	[UserID],
	[Timestamp]
FROM [dbo].[Warehouse Product Master]
ORDER BY 
	[Warehouse_id] ASC
	, [Product_id] ASC
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     Warehouse Product Master]
-- ========================================================================================================
GO

-- ========================================================================================================
-- [Stored Procedures generated for table:  Warehouse_Master]
GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Warehouse_Master_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Warehouse_Master_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'Warehouse_Master'
-- Gets: @sWarehouse_id varchar(36)
-- Gets: @sDescription nvarchar(50)
-- Gets: @sAddress_line nvarchar(-1)
-- Gets: @sPostal_Code nvarchar(20)
-- Gets: @sCountry nvarchar(20)
-- Gets: @sDivision_Code nvarchar(20)
-- Gets: @sPull_system nvarchar(1)
-- Gets: @sPull_rush_order nvarchar(1)
-- Gets: @daOrder_cons_date datetime
-- Gets: @sOrder_cons_type nvarchar(1)
-- Gets: @sPayment_Cons nvarchar(1)
-- Gets: @sWeight_control nvarchar(20)
-- Gets: @iPercentage_change int
-- Gets: @sLocation_Lock nvarchar(1)
-- Gets: @iLast_pick_list_Nr int
-- Gets: @sCons_Picklist nvarchar(1)
-- Gets: @sSplit_Pick_list nvarchar(1)
-- Gets: @sUserID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Warehouse_Master_Insert]
	@sWarehouse_id varchar(36),
	@sDescription nvarchar(50),
	@sAddress_line nvarchar(-1),
	@sPostal_Code nvarchar(20),
	@sCountry nvarchar(20),
	@sDivision_Code nvarchar(20),
	@sPull_system nvarchar(1),
	@sPull_rush_order nvarchar(1),
	@daOrder_cons_date datetime,
	@sOrder_cons_type nvarchar(1),
	@sPayment_Cons nvarchar(1),
	@sWeight_control nvarchar(20),
	@iPercentage_change int,
	@sLocation_Lock nvarchar(1),
	@iLast_pick_list_Nr int,
	@sCons_Picklist nvarchar(1),
	@sSplit_Pick_list nvarchar(1),
	@sUserID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[Warehouse_Master]
(
	[Warehouse_id],
	[Description],
	[Address line],
	[Postal Code],
	[Country],
	[Division Code],
	[Pull system],
	[Pull rush order],
	[Order_cons_date],
	[Order_cons_type],
	[Payment_Cons],
	[Weight_control],
	[Percentage_change],
	[Location Lock],
	[Last_pick_list Nr],
	[Cons_Picklist],
	[Split_Pick_list],
	[UserID]
)
VALUES
(
	ISNULL(@sWarehouse_id, (newid())),
	@sDescription,
	@sAddress_line,
	@sPostal_Code,
	@sCountry,
	@sDivision_Code,
	@sPull_system,
	@sPull_rush_order,
	@daOrder_cons_date,
	@sOrder_cons_type,
	@sPayment_Cons,
	@sWeight_control,
	@iPercentage_change,
	@sLocation_Lock,
	@iLast_pick_list_Nr,
	@sCons_Picklist,
	@sSplit_Pick_list,
	@sUserID
)
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Warehouse_Master_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Warehouse_Master_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'Warehouse_Master'
-- Gets: @sWarehouse_id varchar(36)
-- Gets: @sDescription nvarchar(50)
-- Gets: @sAddress_line nvarchar(-1)
-- Gets: @sPostal_Code nvarchar(20)
-- Gets: @sCountry nvarchar(20)
-- Gets: @sDivision_Code nvarchar(20)
-- Gets: @sPull_system nvarchar(1)
-- Gets: @sPull_rush_order nvarchar(1)
-- Gets: @daOrder_cons_date datetime
-- Gets: @sOrder_cons_type nvarchar(1)
-- Gets: @sPayment_Cons nvarchar(1)
-- Gets: @sWeight_control nvarchar(20)
-- Gets: @iPercentage_change int
-- Gets: @sLocation_Lock nvarchar(1)
-- Gets: @iLast_pick_list_Nr int
-- Gets: @sCons_Picklist nvarchar(1)
-- Gets: @sSplit_Pick_list nvarchar(1)
-- Gets: @sUserID varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Warehouse_Master_Update]
	@sWarehouse_id varchar(36),
	@sDescription nvarchar(50),
	@sAddress_line nvarchar(-1),
	@sPostal_Code nvarchar(20),
	@sCountry nvarchar(20),
	@sDivision_Code nvarchar(20),
	@sPull_system nvarchar(1),
	@sPull_rush_order nvarchar(1),
	@daOrder_cons_date datetime,
	@sOrder_cons_type nvarchar(1),
	@sPayment_Cons nvarchar(1),
	@sWeight_control nvarchar(20),
	@iPercentage_change int,
	@sLocation_Lock nvarchar(1),
	@iLast_pick_list_Nr int,
	@sCons_Picklist nvarchar(1),
	@sSplit_Pick_list nvarchar(1),
	@sUserID varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[Warehouse_Master]
SET 
	[Description] = @sDescription,
	[Address line] = @sAddress_line,
	[Postal Code] = @sPostal_Code,
	[Country] = @sCountry,
	[Division Code] = @sDivision_Code,
	[Pull system] = @sPull_system,
	[Pull rush order] = @sPull_rush_order,
	[Order_cons_date] = @daOrder_cons_date,
	[Order_cons_type] = @sOrder_cons_type,
	[Payment_Cons] = @sPayment_Cons,
	[Weight_control] = @sWeight_control,
	[Percentage_change] = @iPercentage_change,
	[Location Lock] = @sLocation_Lock,
	[Last_pick_list Nr] = @iLast_pick_list_Nr,
	[Cons_Picklist] = @sCons_Picklist,
	[Split_Pick_list] = @sSplit_Pick_list,
	[UserID] = @sUserID
WHERE
	[Warehouse_id] = @sWarehouse_id
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Warehouse_Master_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Warehouse_Master_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'Warehouse_Master'
-- using the Primary Key. 
-- Gets: @sWarehouse_id varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Warehouse_Master_Delete]
	@sWarehouse_id varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[Warehouse_Master]
WHERE
	[Warehouse_id] = @sWarehouse_id
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Warehouse_Master_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Warehouse_Master_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'Warehouse_Master'
-- based on the Primary Key.
-- Gets: @sWarehouse_id varchar(36)
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Warehouse_Master_SelectOne]
	@sWarehouse_id varchar(36),
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[Warehouse_id],
	[Description],
	[Address line],
	[Postal Code],
	[Country],
	[Division Code],
	[Pull system],
	[Pull rush order],
	[Order_cons_date],
	[Order_cons_type],
	[Payment_Cons],
	[Weight_control],
	[Percentage_change],
	[Location Lock],
	[Last_pick_list Nr],
	[Cons_Picklist],
	[Split_Pick_list],
	[UserID],
	[Timestamp]
FROM [dbo].[Warehouse_Master]
WHERE
	[Warehouse_id] = @sWarehouse_id
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_Warehouse_Master_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_Warehouse_Master_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'Warehouse_Master'
-- Returns: @iErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_Warehouse_Master_SelectAll]
	@iErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[Warehouse_id],
	[Description],
	[Address line],
	[Postal Code],
	[Country],
	[Division Code],
	[Pull system],
	[Pull rush order],
	[Order_cons_date],
	[Order_cons_type],
	[Payment_Cons],
	[Weight_control],
	[Percentage_change],
	[Location Lock],
	[Last_pick_list Nr],
	[Cons_Picklist],
	[Split_Pick_list],
	[UserID],
	[Timestamp]
FROM [dbo].[Warehouse_Master]
ORDER BY 
	[Warehouse_id] ASC
-- Get the Error Code for the statement just executed.
SELECT @iErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     Warehouse_Master]
-- ========================================================================================================
GO
