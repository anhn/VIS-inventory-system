///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'Payment_Term_Master'
// Generated by LLBLGen v1.2.2690.36218 Final on: Monday, May 14, 2007, 8:07:34 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace Inventory.DataObjects
{
	/// <summary>
	/// Purpose: Data Access class for the table 'Payment_Term_Master'.
	/// </summary>
	public class Payment_Term_Master : DBInteractionBase
	{
		#region Class Member Declarations
			private SqlBoolean		m_bStandard;
			private SqlDateTime		m_daNet_due_date_advance, m_daNet_due_date;
			private SqlInt32		m_iDiscount_advance, m_iDiscount_period_advance, m_iDiscount, m_iDiscount_payment_period;
			private SqlBinary		m_biTimestamp;
			private SqlString		m_sUserID, m_sPayment_term_desc, m_sPayment_term_id;
		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public Payment_Term_Master()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>Payment_term_id</LI>
		///		 <LI>Payment_term_desc. May be SqlString.Null</LI>
		///		 <LI>Net_due_date. May be SqlDateTime.Null</LI>
		///		 <LI>Discount. May be SqlInt32.Null</LI>
		///		 <LI>Discount_payment_period. May be SqlInt32.Null</LI>
		///		 <LI>Net_due_date_advance. May be SqlDateTime.Null</LI>
		///		 <LI>Discount_advance. May be SqlInt32.Null</LI>
		///		 <LI>Discount_period_advance. May be SqlInt32.Null</LI>
		///		 <LI>Standard. May be SqlBoolean.Null</LI>
		///		 <LI>UserID. May be SqlString.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Insert(SqlCommand scmCmdToExecute)
		{
			scmCmdToExecute.Parameters.Clear();
			scmCmdToExecute.CommandText = "dbo.[pr_Payment_Term_Master_Insert]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sPayment_term_id", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sPayment_term_id));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sPayment_term_desc", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sPayment_term_desc));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@daNet_due_date", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daNet_due_date));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iDiscount", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iDiscount));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iDiscount_payment_period", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iDiscount_payment_period));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@daNet_due_date_advance", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daNet_due_date_advance));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iDiscount_advance", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iDiscount_advance));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iDiscount_period_advance", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iDiscount_period_advance));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@bStandard", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bStandard));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sUserID", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sUserID));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_Payment_Term_Master_Insert' reported the ErrorCode: " + m_iErrorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("Payment_Term_Master::Insert::Error occured.", ex);
			}
			finally
			{
			}
		}


		/// <summary>
		/// Purpose: Update method. This method will Update one existing row in the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>Payment_term_id</LI>
		///		 <LI>Payment_term_desc. May be SqlString.Null</LI>
		///		 <LI>Net_due_date. May be SqlDateTime.Null</LI>
		///		 <LI>Discount. May be SqlInt32.Null</LI>
		///		 <LI>Discount_payment_period. May be SqlInt32.Null</LI>
		///		 <LI>Net_due_date_advance. May be SqlDateTime.Null</LI>
		///		 <LI>Discount_advance. May be SqlInt32.Null</LI>
		///		 <LI>Discount_period_advance. May be SqlInt32.Null</LI>
		///		 <LI>Standard. May be SqlBoolean.Null</LI>
		///		 <LI>UserID. May be SqlString.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Update(SqlCommand scmCmdToExecute)
		{
			scmCmdToExecute.Parameters.Clear();
			scmCmdToExecute.CommandText = "dbo.[pr_Payment_Term_Master_Update]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sPayment_term_id", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sPayment_term_id));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sPayment_term_desc", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sPayment_term_desc));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@daNet_due_date", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daNet_due_date));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iDiscount", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iDiscount));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iDiscount_payment_period", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iDiscount_payment_period));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@daNet_due_date_advance", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daNet_due_date_advance));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iDiscount_advance", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iDiscount_advance));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iDiscount_period_advance", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iDiscount_period_advance));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@bStandard", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bStandard));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sUserID", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sUserID));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_Payment_Term_Master_Update' reported the ErrorCode: " + m_iErrorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("Payment_Term_Master::Update::Error occured.", ex);
			}
			finally
			{
			}
		}


		/// <summary>
		/// Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>Payment_term_id</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Delete(SqlCommand scmCmdToExecute)
		{
			scmCmdToExecute.Parameters.Clear();
			scmCmdToExecute.CommandText = "dbo.[pr_Payment_Term_Master_Delete]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sPayment_term_id", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sPayment_term_id));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_Payment_Term_Master_Delete' reported the ErrorCode: " + m_iErrorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("Payment_Term_Master::Delete::Error occured.", ex);
			}
			finally
			{
			}
		}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>Payment_term_id</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		///		 <LI>Payment_term_id</LI>
		///		 <LI>Payment_term_desc</LI>
		///		 <LI>Net_due_date</LI>
		///		 <LI>Discount</LI>
		///		 <LI>Discount_payment_period</LI>
		///		 <LI>Net_due_date_advance</LI>
		///		 <LI>Discount_advance</LI>
		///		 <LI>Discount_period_advance</LI>
		///		 <LI>Standard</LI>
		///		 <LI>UserID</LI>
		///		 <LI>Timestamp</LI>
		/// </UL>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public override DataTable SelectOne()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_Payment_Term_Master_SelectOne]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable dtToReturn = new DataTable("Payment_Term_Master");
			SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sPayment_term_id", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sPayment_term_id));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				sdaAdapter.Fill(dtToReturn);
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_Payment_Term_Master_SelectOne' reported the ErrorCode: " + m_iErrorCode);
				}

				if(dtToReturn.Rows.Count > 0)
				{
					m_sPayment_term_id = (string)dtToReturn.Rows[0]["Payment_term_id"];
					m_sPayment_term_desc = dtToReturn.Rows[0]["Payment_term_desc"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["Payment_term_desc"];
					m_daNet_due_date = dtToReturn.Rows[0]["Net_due_date"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)dtToReturn.Rows[0]["Net_due_date"];
					m_iDiscount = dtToReturn.Rows[0]["Discount"] == System.DBNull.Value ? SqlInt32.Null : (Int32)dtToReturn.Rows[0]["Discount"];
					m_iDiscount_payment_period = dtToReturn.Rows[0]["Discount_payment_period"] == System.DBNull.Value ? SqlInt32.Null : (Int32)dtToReturn.Rows[0]["Discount_payment_period"];
					m_daNet_due_date_advance = dtToReturn.Rows[0]["Net_due_date_advance"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)dtToReturn.Rows[0]["Net_due_date_advance"];
					m_iDiscount_advance = dtToReturn.Rows[0]["Discount_advance"] == System.DBNull.Value ? SqlInt32.Null : (Int32)dtToReturn.Rows[0]["Discount_advance"];
					m_iDiscount_period_advance = dtToReturn.Rows[0]["Discount_period_advance"] == System.DBNull.Value ? SqlInt32.Null : (Int32)dtToReturn.Rows[0]["Discount_period_advance"];
					m_bStandard = dtToReturn.Rows[0]["Standard"] == System.DBNull.Value ? SqlBoolean.Null : (bool)dtToReturn.Rows[0]["Standard"];
					m_sUserID = dtToReturn.Rows[0]["UserID"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["UserID"];
					m_biTimestamp = dtToReturn.Rows[0]["Timestamp"] == System.DBNull.Value ? SqlBinary.Null : (byte[])dtToReturn.Rows[0]["Timestamp"];
				}
				return dtToReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("Payment_Term_Master::SelectOne::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
				sdaAdapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override DataTable SelectAll()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_Payment_Term_Master_SelectAll]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable dtToReturn = new DataTable("Payment_Term_Master");
			SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				sdaAdapter.Fill(dtToReturn);
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_Payment_Term_Master_SelectAll' reported the ErrorCode: " + m_iErrorCode);
				}

				return dtToReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("Payment_Term_Master::SelectAll::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
				sdaAdapter.Dispose();
			}
		}


		#region Class Property Declarations
		public SqlString Payment_term_id
		{
			get
			{
				return m_sPayment_term_id;
			}
			set
			{
				m_sPayment_term_id = value;
			}
		}


		public SqlString Payment_term_desc
		{
			get
			{
				return m_sPayment_term_desc;
			}
			set
			{
				m_sPayment_term_desc = value;
			}
		}


		public SqlDateTime Net_due_date
		{
			get
			{
				return m_daNet_due_date;
			}
			set
			{
				m_daNet_due_date = value;
			}
		}


		public SqlInt32 Discount
		{
			get
			{
				return m_iDiscount;
			}
			set
			{
				m_iDiscount = value;
			}
		}


		public SqlInt32 Discount_payment_period
		{
			get
			{
				return m_iDiscount_payment_period;
			}
			set
			{
				m_iDiscount_payment_period = value;
			}
		}


		public SqlDateTime Net_due_date_advance
		{
			get
			{
				return m_daNet_due_date_advance;
			}
			set
			{
				m_daNet_due_date_advance = value;
			}
		}


		public SqlInt32 Discount_advance
		{
			get
			{
				return m_iDiscount_advance;
			}
			set
			{
				m_iDiscount_advance = value;
			}
		}


		public SqlInt32 Discount_period_advance
		{
			get
			{
				return m_iDiscount_period_advance;
			}
			set
			{
				m_iDiscount_period_advance = value;
			}
		}


		public SqlBoolean Standard
		{
			get
			{
				return m_bStandard;
			}
			set
			{
				m_bStandard = value;
			}
		}


		public SqlString UserID
		{
			get
			{
				return m_sUserID;
			}
			set
			{
				m_sUserID = value;
			}
		}


		public SqlBinary Timestamp
		{
			get
			{
				return m_biTimestamp;
			}
			set
			{
				m_biTimestamp = value;
			}
		}
		#endregion
	}
}
