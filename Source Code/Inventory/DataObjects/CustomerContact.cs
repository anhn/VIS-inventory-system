///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'CustomerContact'
// Generated by LLBLGen v1.2.2690.36218 Final on: Monday, May 14, 2007, 8:07:34 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace Inventory.DataObjects
{
	/// <summary>
	/// Purpose: Data Access class for the table 'CustomerContact'.
	/// </summary>
	public class CustomerContact : DBInteractionBase
	{
		#region Class Member Declarations
			private SqlDecimal		m_dcDiscount, m_dcBalance;
			private SqlString		m_sShipping_email, m_sBankName, m_sShipping_phone, m_sShipping_zip, m_sShipping_country, m_sAccountName, m_sParent_id, m_sTax_agent, m_sCurrency, m_sAccount_number, m_sCredit_limit, m_sShipping_state, m_sTax_code_id, m_sTax_code_idOld, m_sBilling_address, m_sBilling_city, m_sContactID, m_sCustomerID, m_sPayment_term_id, m_sPayment_term_idOld, m_sBilling_state, m_sBilling_email, m_sShipping_address1, m_sShipping_city, m_sBilling_country, m_sBilling_zip, m_sBilling_phone;
		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public CustomerContact()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ContactID</LI>
		///		 <LI>CustomerID. May be SqlString.Null</LI>
		///		 <LI>Payment_term_id. May be SqlString.Null</LI>
		///		 <LI>Tax_code_id. May be SqlString.Null</LI>
		///		 <LI>Billing_address. May be SqlString.Null</LI>
		///		 <LI>Billing_city. May be SqlString.Null</LI>
		///		 <LI>Billing_state. May be SqlString.Null</LI>
		///		 <LI>Billing_country. May be SqlString.Null</LI>
		///		 <LI>Billing_zip. May be SqlString.Null</LI>
		///		 <LI>Billing_phone. May be SqlString.Null</LI>
		///		 <LI>Billing_email. May be SqlString.Null</LI>
		///		 <LI>Shipping_address1. May be SqlString.Null</LI>
		///		 <LI>Shipping_city. May be SqlString.Null</LI>
		///		 <LI>Shipping_state. May be SqlString.Null</LI>
		///		 <LI>Shipping_country. May be SqlString.Null</LI>
		///		 <LI>Shipping_zip. May be SqlString.Null</LI>
		///		 <LI>Shipping_phone. May be SqlString.Null</LI>
		///		 <LI>Shipping_email. May be SqlString.Null</LI>
		///		 <LI>BankName. May be SqlString.Null</LI>
		///		 <LI>AccountName. May be SqlString.Null</LI>
		///		 <LI>Account_number. May be SqlString.Null</LI>
		///		 <LI>Credit_limit. May be SqlString.Null</LI>
		///		 <LI>Currency. May be SqlString.Null</LI>
		///		 <LI>Balance. May be SqlDecimal.Null</LI>
		///		 <LI>Discount. May be SqlDecimal.Null</LI>
		///		 <LI>Parent_id. May be SqlString.Null</LI>
		///		 <LI>Tax_agent. May be SqlString.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Insert(SqlCommand scmCmdToExecute)
		{
			scmCmdToExecute.Parameters.Clear();
			scmCmdToExecute.CommandText = "dbo.[pr_CustomerContact_Insert]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sContactID", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sContactID));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sCustomerID", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sCustomerID));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sPayment_term_id", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sPayment_term_id));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sTax_code_id", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sTax_code_id));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sBilling_address", SqlDbType.VarChar, -1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sBilling_address));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sBilling_city", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sBilling_city));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sBilling_state", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sBilling_state));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sBilling_country", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sBilling_country));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sBilling_zip", SqlDbType.NVarChar, 20, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sBilling_zip));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sBilling_phone", SqlDbType.NVarChar, 20, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sBilling_phone));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sBilling_email", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sBilling_email));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sShipping_address1", SqlDbType.NVarChar, -1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sShipping_address1));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sShipping_city", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sShipping_city));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sShipping_state", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sShipping_state));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sShipping_country", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sShipping_country));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sShipping_zip", SqlDbType.NVarChar, 20, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sShipping_zip));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sShipping_phone", SqlDbType.NVarChar, 20, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sShipping_phone));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sShipping_email", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sShipping_email));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sBankName", SqlDbType.NVarChar, -1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sBankName));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sAccountName", SqlDbType.NVarChar, -1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sAccountName));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sAccount_number", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sAccount_number));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sCredit_limit", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sCredit_limit));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sCurrency", SqlDbType.NVarChar, 3, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sCurrency));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@dcBalance", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 2, "", DataRowVersion.Proposed, m_dcBalance));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@dcDiscount", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 2, "", DataRowVersion.Proposed, m_dcDiscount));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sParent_id", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sParent_id));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sTax_agent", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sTax_agent));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_CustomerContact_Insert' reported the ErrorCode: " + m_iErrorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("CustomerContact::Insert::Error occured.", ex);
			}
			finally
			{
			}
		}


		/// <summary>
		/// Purpose: Update method. This method will Update one existing row in the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ContactID</LI>
		///		 <LI>CustomerID. May be SqlString.Null</LI>
		///		 <LI>Payment_term_id. May be SqlString.Null</LI>
		///		 <LI>Tax_code_id. May be SqlString.Null</LI>
		///		 <LI>Billing_address. May be SqlString.Null</LI>
		///		 <LI>Billing_city. May be SqlString.Null</LI>
		///		 <LI>Billing_state. May be SqlString.Null</LI>
		///		 <LI>Billing_country. May be SqlString.Null</LI>
		///		 <LI>Billing_zip. May be SqlString.Null</LI>
		///		 <LI>Billing_phone. May be SqlString.Null</LI>
		///		 <LI>Billing_email. May be SqlString.Null</LI>
		///		 <LI>Shipping_address1. May be SqlString.Null</LI>
		///		 <LI>Shipping_city. May be SqlString.Null</LI>
		///		 <LI>Shipping_state. May be SqlString.Null</LI>
		///		 <LI>Shipping_country. May be SqlString.Null</LI>
		///		 <LI>Shipping_zip. May be SqlString.Null</LI>
		///		 <LI>Shipping_phone. May be SqlString.Null</LI>
		///		 <LI>Shipping_email. May be SqlString.Null</LI>
		///		 <LI>BankName. May be SqlString.Null</LI>
		///		 <LI>AccountName. May be SqlString.Null</LI>
		///		 <LI>Account_number. May be SqlString.Null</LI>
		///		 <LI>Credit_limit. May be SqlString.Null</LI>
		///		 <LI>Currency. May be SqlString.Null</LI>
		///		 <LI>Balance. May be SqlDecimal.Null</LI>
		///		 <LI>Discount. May be SqlDecimal.Null</LI>
		///		 <LI>Parent_id. May be SqlString.Null</LI>
		///		 <LI>Tax_agent. May be SqlString.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Update(SqlCommand scmCmdToExecute)
		{
			scmCmdToExecute.Parameters.Clear();
			scmCmdToExecute.CommandText = "dbo.[pr_CustomerContact_Update]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sContactID", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sContactID));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sCustomerID", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sCustomerID));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sPayment_term_id", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sPayment_term_id));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sTax_code_id", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sTax_code_id));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sBilling_address", SqlDbType.VarChar, -1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sBilling_address));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sBilling_city", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sBilling_city));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sBilling_state", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sBilling_state));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sBilling_country", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sBilling_country));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sBilling_zip", SqlDbType.NVarChar, 20, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sBilling_zip));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sBilling_phone", SqlDbType.NVarChar, 20, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sBilling_phone));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sBilling_email", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sBilling_email));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sShipping_address1", SqlDbType.NVarChar, -1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sShipping_address1));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sShipping_city", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sShipping_city));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sShipping_state", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sShipping_state));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sShipping_country", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sShipping_country));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sShipping_zip", SqlDbType.NVarChar, 20, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sShipping_zip));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sShipping_phone", SqlDbType.NVarChar, 20, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sShipping_phone));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sShipping_email", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sShipping_email));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sBankName", SqlDbType.NVarChar, -1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sBankName));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sAccountName", SqlDbType.NVarChar, -1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sAccountName));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sAccount_number", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sAccount_number));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sCredit_limit", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sCredit_limit));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sCurrency", SqlDbType.NVarChar, 3, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sCurrency));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@dcBalance", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 2, "", DataRowVersion.Proposed, m_dcBalance));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@dcDiscount", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 2, "", DataRowVersion.Proposed, m_dcDiscount));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sParent_id", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sParent_id));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sTax_agent", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sTax_agent));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_CustomerContact_Update' reported the ErrorCode: " + m_iErrorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("CustomerContact::Update::Error occured.", ex);
			}
			finally
			{
			}
		}


		/// <summary>
		/// Purpose: Update method for updating one or more rows using the Foreign Key 'Payment_term_id.
		/// This method will Update one or more existing rows in the database. It will reset the field 'Payment_term_id' in
		/// all rows which have as value for this field the value as set in property 'payment_term_idOld' to 
		/// the value as set in property 'payment_term_id'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>Payment_term_id. May be SqlString.Null</LI>
		///		 <LI>Payment_term_idOld. May be SqlString.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool UpdateAllWPayment_term_idLogic()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_CustomerContact_UpdateAllWPayment_term_idLogic]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sPayment_term_id", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sPayment_term_id));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sPayment_term_idOld", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sPayment_term_idOld));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 36, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_CustomerContact_UpdateAllWPayment_term_idLogic' reported the ErrorCode: " + m_iErrorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("CustomerContact::UpdateAllWPayment_term_idLogic::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method for updating one or more rows using the Foreign Key 'Tax_code_id.
		/// This method will Update one or more existing rows in the database. It will reset the field 'Tax_code_id' in
		/// all rows which have as value for this field the value as set in property 'tax_code_idOld' to 
		/// the value as set in property 'tax_code_id'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>Tax_code_id. May be SqlString.Null</LI>
		///		 <LI>Tax_code_idOld. May be SqlString.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool UpdateAllWTax_code_idLogic()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_CustomerContact_UpdateAllWTax_code_idLogic]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sTax_code_id", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sTax_code_id));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sTax_code_idOld", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sTax_code_idOld));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 36, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_CustomerContact_UpdateAllWTax_code_idLogic' reported the ErrorCode: " + m_iErrorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("CustomerContact::UpdateAllWTax_code_idLogic::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ContactID</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Delete(SqlCommand scmCmdToExecute)
		{
			scmCmdToExecute.Parameters.Clear();
			scmCmdToExecute.CommandText = "dbo.[pr_CustomerContact_Delete]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sContactID", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sContactID));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_CustomerContact_Delete' reported the ErrorCode: " + m_iErrorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("CustomerContact::Delete::Error occured.", ex);
			}
			finally
			{
			}
		}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ContactID</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		///		 <LI>ContactID</LI>
		///		 <LI>CustomerID</LI>
		///		 <LI>Payment_term_id</LI>
		///		 <LI>Tax_code_id</LI>
		///		 <LI>Billing_address</LI>
		///		 <LI>Billing_city</LI>
		///		 <LI>Billing_state</LI>
		///		 <LI>Billing_country</LI>
		///		 <LI>Billing_zip</LI>
		///		 <LI>Billing_phone</LI>
		///		 <LI>Billing_email</LI>
		///		 <LI>Shipping_address1</LI>
		///		 <LI>Shipping_city</LI>
		///		 <LI>Shipping_state</LI>
		///		 <LI>Shipping_country</LI>
		///		 <LI>Shipping_zip</LI>
		///		 <LI>Shipping_phone</LI>
		///		 <LI>Shipping_email</LI>
		///		 <LI>BankName</LI>
		///		 <LI>AccountName</LI>
		///		 <LI>Account_number</LI>
		///		 <LI>Credit_limit</LI>
		///		 <LI>Currency</LI>
		///		 <LI>Balance</LI>
		///		 <LI>Discount</LI>
		///		 <LI>Parent_id</LI>
		///		 <LI>Tax_agent</LI>
		/// </UL>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public override DataTable SelectOne()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_CustomerContact_SelectOne]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable dtToReturn = new DataTable("CustomerContact");
			SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sContactID", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sContactID));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				sdaAdapter.Fill(dtToReturn);
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_CustomerContact_SelectOne' reported the ErrorCode: " + m_iErrorCode);
				}

				if(dtToReturn.Rows.Count > 0)
				{
					m_sContactID = (string)dtToReturn.Rows[0]["ContactID"];
					m_sCustomerID = dtToReturn.Rows[0]["CustomerID"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["CustomerID"];
					m_sPayment_term_id = dtToReturn.Rows[0]["Payment_term_id"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["Payment_term_id"];
					m_sTax_code_id = dtToReturn.Rows[0]["Tax_code_id"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["Tax_code_id"];
					m_sBilling_address = dtToReturn.Rows[0]["Billing_address"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["Billing_address"];
					m_sBilling_city = dtToReturn.Rows[0]["Billing_city"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["Billing_city"];
					m_sBilling_state = dtToReturn.Rows[0]["Billing_state"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["Billing_state"];
					m_sBilling_country = dtToReturn.Rows[0]["Billing_country"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["Billing_country"];
					m_sBilling_zip = dtToReturn.Rows[0]["Billing_zip"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["Billing_zip"];
					m_sBilling_phone = dtToReturn.Rows[0]["Billing_phone"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["Billing_phone"];
					m_sBilling_email = dtToReturn.Rows[0]["Billing_email"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["Billing_email"];
					m_sShipping_address1 = dtToReturn.Rows[0]["Shipping_address1"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["Shipping_address1"];
					m_sShipping_city = dtToReturn.Rows[0]["Shipping_city"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["Shipping_city"];
					m_sShipping_state = dtToReturn.Rows[0]["Shipping_state"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["Shipping_state"];
					m_sShipping_country = dtToReturn.Rows[0]["Shipping_country"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["Shipping_country"];
					m_sShipping_zip = dtToReturn.Rows[0]["Shipping_zip"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["Shipping_zip"];
					m_sShipping_phone = dtToReturn.Rows[0]["Shipping_phone"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["Shipping_phone"];
					m_sShipping_email = dtToReturn.Rows[0]["Shipping_email"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["Shipping_email"];
					m_sBankName = dtToReturn.Rows[0]["BankName"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["BankName"];
					m_sAccountName = dtToReturn.Rows[0]["AccountName"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["AccountName"];
					m_sAccount_number = dtToReturn.Rows[0]["Account_number"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["Account_number"];
					m_sCredit_limit = dtToReturn.Rows[0]["Credit_limit"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["Credit_limit"];
					m_sCurrency = dtToReturn.Rows[0]["Currency"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["Currency"];
					m_dcBalance = dtToReturn.Rows[0]["Balance"] == System.DBNull.Value ? SqlDecimal.Null : (Decimal)dtToReturn.Rows[0]["Balance"];
					m_dcDiscount = dtToReturn.Rows[0]["Discount"] == System.DBNull.Value ? SqlDecimal.Null : (Decimal)dtToReturn.Rows[0]["Discount"];
					m_sParent_id = dtToReturn.Rows[0]["Parent_id"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["Parent_id"];
					m_sTax_agent = dtToReturn.Rows[0]["Tax_agent"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["Tax_agent"];
				}
				return dtToReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("CustomerContact::SelectOne::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
				sdaAdapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override DataTable SelectAll()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_CustomerContact_SelectAll]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable dtToReturn = new DataTable("CustomerContact");
			SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				sdaAdapter.Fill(dtToReturn);
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_CustomerContact_SelectAll' reported the ErrorCode: " + m_iErrorCode);
				}

				return dtToReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("CustomerContact::SelectAll::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
				sdaAdapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method for a foreign key. This method will Select one or more rows from the database, based on the Foreign Key 'Payment_term_id'
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>Payment_term_id. May be SqlString.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public DataTable SelectAllWPayment_term_idLogic()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_CustomerContact_SelectAllWPayment_term_idLogic]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable dtToReturn = new DataTable("CustomerContact");
			SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sPayment_term_id", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sPayment_term_id));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				sdaAdapter.Fill(dtToReturn);
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_CustomerContact_SelectAllWPayment_term_idLogic' reported the ErrorCode: " + m_iErrorCode);
				}

				return dtToReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("CustomerContact::SelectAllWPayment_term_idLogic::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
				sdaAdapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method for a foreign key. This method will Select one or more rows from the database, based on the Foreign Key 'Tax_code_id'
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>Tax_code_id. May be SqlString.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public DataTable SelectAllWTax_code_idLogic()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_CustomerContact_SelectAllWTax_code_idLogic]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable dtToReturn = new DataTable("CustomerContact");
			SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sTax_code_id", SqlDbType.VarChar, 36, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sTax_code_id));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				sdaAdapter.Fill(dtToReturn);
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_CustomerContact_SelectAllWTax_code_idLogic' reported the ErrorCode: " + m_iErrorCode);
				}

				return dtToReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("CustomerContact::SelectAllWTax_code_idLogic::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
				sdaAdapter.Dispose();
			}
		}


		#region Class Property Declarations
		public SqlString ContactID
		{
			get
			{
				return m_sContactID;
			}
			set
			{
				SqlString sContactIDTmp = (SqlString)value;
				if(sContactIDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("contactID", "contactID can't be NULL");
				}
				m_sContactID = value;
			}
		}


		public SqlString CustomerID
		{
			get
			{
				return m_sCustomerID;
			}
			set
			{
				m_sCustomerID = value;
			}
		}


		public SqlString Payment_term_id
		{
			get
			{
				return m_sPayment_term_id;
			}
			set
			{
				m_sPayment_term_id = value;
			}
		}
		public SqlString payment_term_idOld
		{
			get
			{
				return m_sPayment_term_idOld;
			}
			set
			{
				m_sPayment_term_idOld = value;
			}
		}


		public SqlString Tax_code_id
		{
			get
			{
				return m_sTax_code_id;
			}
			set
			{
				m_sTax_code_id = value;
			}
		}
		public SqlString tax_code_idOld
		{
			get
			{
				return m_sTax_code_idOld;
			}
			set
			{
				m_sTax_code_idOld = value;
			}
		}


		public SqlString Billing_address
		{
			get
			{
				return m_sBilling_address;
			}
			set
			{
				m_sBilling_address = value;
			}
		}


		public SqlString Billing_city
		{
			get
			{
				return m_sBilling_city;
			}
			set
			{
				m_sBilling_city = value;
			}
		}


		public SqlString Billing_state
		{
			get
			{
				return m_sBilling_state;
			}
			set
			{
				m_sBilling_state = value;
			}
		}


		public SqlString Billing_country
		{
			get
			{
				return m_sBilling_country;
			}
			set
			{
				m_sBilling_country = value;
			}
		}


		public SqlString Billing_zip
		{
			get
			{
				return m_sBilling_zip;
			}
			set
			{
				m_sBilling_zip = value;
			}
		}


		public SqlString Billing_phone
		{
			get
			{
				return m_sBilling_phone;
			}
			set
			{
				m_sBilling_phone = value;
			}
		}


		public SqlString Billing_email
		{
			get
			{
				return m_sBilling_email;
			}
			set
			{
				m_sBilling_email = value;
			}
		}


		public SqlString Shipping_address1
		{
			get
			{
				return m_sShipping_address1;
			}
			set
			{
				m_sShipping_address1 = value;
			}
		}


		public SqlString Shipping_city
		{
			get
			{
				return m_sShipping_city;
			}
			set
			{
				m_sShipping_city = value;
			}
		}


		public SqlString Shipping_state
		{
			get
			{
				return m_sShipping_state;
			}
			set
			{
				m_sShipping_state = value;
			}
		}


		public SqlString Shipping_country
		{
			get
			{
				return m_sShipping_country;
			}
			set
			{
				m_sShipping_country = value;
			}
		}


		public SqlString Shipping_zip
		{
			get
			{
				return m_sShipping_zip;
			}
			set
			{
				m_sShipping_zip = value;
			}
		}


		public SqlString Shipping_phone
		{
			get
			{
				return m_sShipping_phone;
			}
			set
			{
				m_sShipping_phone = value;
			}
		}


		public SqlString Shipping_email
		{
			get
			{
				return m_sShipping_email;
			}
			set
			{
				m_sShipping_email = value;
			}
		}


		public SqlString BankName
		{
			get
			{
				return m_sBankName;
			}
			set
			{
				m_sBankName = value;
			}
		}


		public SqlString AccountName
		{
			get
			{
				return m_sAccountName;
			}
			set
			{
				m_sAccountName = value;
			}
		}


		public SqlString Account_number
		{
			get
			{
				return m_sAccount_number;
			}
			set
			{
				m_sAccount_number = value;
			}
		}


		public SqlString Credit_limit
		{
			get
			{
				return m_sCredit_limit;
			}
			set
			{
				m_sCredit_limit = value;
			}
		}


		public SqlString Currency
		{
			get
			{
				return m_sCurrency;
			}
			set
			{
				m_sCurrency = value;
			}
		}


		public SqlDecimal Balance
		{
			get
			{
				return m_dcBalance;
			}
			set
			{
				m_dcBalance = value;
			}
		}


		public SqlDecimal Discount
		{
			get
			{
				return m_dcDiscount;
			}
			set
			{
				m_dcDiscount = value;
			}
		}


		public SqlString Parent_id
		{
			get
			{
				return m_sParent_id;
			}
			set
			{
				m_sParent_id = value;
			}
		}


		public SqlString Tax_agent
		{
			get
			{
				return m_sTax_agent;
			}
			set
			{
				m_sTax_agent = value;
			}
		}
		#endregion
	}
}
